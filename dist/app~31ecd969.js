(window.webpackJsonp=window.webpackJsonp||[]).push([[1],{121:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2),o=n(89);t.Justify=o.Justify,n(434),n(432);var i=function(e){var t=e.children,n=e.justify,i=e.style,u="column"+o.getClassNameByJustify(n);return r.createElement("div",{style:i,className:u},t)};i.defaultProps={justify:o.Justify.Start},t.default=i},122:function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(2);n(425),function(e){e[e.Standart=0]="Standart",e[e.Mobile=1]="Mobile"}(t.Tags||(t.Tags={})),t.Context=i.createContext({});var u=function(e){function n(t){return e.call(this,t)||this}return o(n,e),n.prototype.render=function(){var e=this.props.sentimentScore,n={};return n=e<30?{color:"red",fontSize:12}:e>90?{color:"green",fontSize:18}:{color:"yellow",fontSize:15},i.createElement(t.Context.Provider,{value:n},this.props.children)},n}(i.Component);t.default=u},13:function(e,t,n){"use strict";var r=function(){};e.exports=r},164:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=(r=n(392))&&"object"==typeof r&&"default"in r?r.default:r,i=function(){return Math.random().toString(36).substring(7).split("").join(".")},u={INIT:"@@redux/INIT"+i(),REPLACE:"@@redux/REPLACE"+i(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+i()}};function a(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function c(e,t){var n=t&&t.type;return"Given "+(n&&'action "'+String(n)+'"'||"an action")+', reducer "'+e+'" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.'}function l(e,t){return function(){return t(e.apply(this,arguments))}}function s(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function f(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return 0===t.length?function(e){return e}:1===t.length?t[0]:t.reduce(function(e,t){return function(){return e(t.apply(void 0,arguments))}})}t.createStore=function e(t,n,r){var i;if("function"==typeof n&&"function"==typeof r||"function"==typeof r&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function");if("function"==typeof n&&void 0===r&&(r=n,n=void 0),void 0!==r){if("function"!=typeof r)throw new Error("Expected the enhancer to be a function.");return r(e)(t,n)}if("function"!=typeof t)throw new Error("Expected the reducer to be a function.");var c=t,l=n,s=[],f=s,p=!1;function d(){f===s&&(f=s.slice())}function y(){if(p)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return l}function v(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(p)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");var t=!0;return d(),f.push(e),function(){if(t){if(p)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribe(listener) for more details.");t=!1,d();var n=f.indexOf(e);f.splice(n,1)}}}function h(e){if(!a(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(p)throw new Error("Reducers may not dispatch actions.");try{p=!0,l=c(l,e)}finally{p=!1}for(var t=s=f,n=0;n<t.length;n++)(0,t[n])();return e}return h({type:u.INIT}),(i={dispatch:h,subscribe:v,getState:y,replaceReducer:function(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");c=e,h({type:u.REPLACE})}})[o]=function(){var e,t=v;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(y())}return n(),{unsubscribe:t(n)}}})[o]=function(){return this},e},i},t.combineReducers=function(e){for(var t=Object.keys(e),n={},r=0;r<t.length;r++){var o=t[r];"function"==typeof e[o]&&(n[o]=e[o])}var i,a=Object.keys(n);try{!function(e){Object.keys(e).forEach(function(t){var n=e[t];if(void 0===n(void 0,{type:u.INIT}))throw new Error('Reducer "'+t+"\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.");if(void 0===n(void 0,{type:u.PROBE_UNKNOWN_ACTION()}))throw new Error('Reducer "'+t+"\" returned undefined when probed with a random type. Don't try to handle "+u.INIT+' or other actions in "redux/*" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.')})}(n)}catch(e){i=e}return function(e,t){if(void 0===e&&(e={}),i)throw i;for(var r=!1,o={},u=0;u<a.length;u++){var l=a[u],s=n[l],f=e[l],p=s(f,t);if(void 0===p){var d=c(l,t);throw new Error(d)}o[l]=p,r=r||p!==f}return r?o:e}},t.bindActionCreators=function(e,t){if("function"==typeof e)return l(e,t);if("object"!=typeof e||null===e)throw new Error("bindActionCreators expected an object or a function, instead received "+(null===e?"null":typeof e)+'. Did you write "import ActionCreators from" instead of "import * as ActionCreators from"?');for(var n=Object.keys(e),r={},o=0;o<n.length;o++){var i=n[o],u=e[i];"function"==typeof u&&(r[i]=l(u,t))}return r},t.applyMiddleware=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(){var n=e.apply(void 0,arguments),r=function(){throw new Error("Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.")},o={getState:n.getState,dispatch:function(){return r.apply(void 0,arguments)}},i=t.map(function(e){return e(o)});return function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},r=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(r=r.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),r.forEach(function(t){s(e,t,n[t])})}return e}({},n,{dispatch:r=f.apply(void 0,i)(n.dispatch)})}}},t.compose=f,t.__DO_NOT_USE__ActionTypes=u},169:function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i,u=n(2),a=n(423);n(425),function(e){e[e.Standart=0]="Standart",e[e.Mobile=1]="Mobile"}(i=t.Browsers||(t.Browsers={})),t.Context=u.createContext(i.Standart);var c=function(e){function n(t){var n=e.call(this,t)||this;return n.state={value:i.Standart},n}return o(n,e),n.prototype.componentWillMount=function(){try{"desktop"!==a.default.getParser(window.navigator.userAgent).parsedResult.platform.type&&this.setState({value:i.Mobile})}catch(e){console.warn("Identify Browser problems appear: ",e)}},n.prototype.render=function(){var e=this.state.value,n=e===i.Standart?"desktop-layout":"mobile-layout";return u.createElement(t.Context.Provider,{value:e},u.createElement("div",{className:"layout "+n},this.props.children))},n}(u.Component);t.default=c},173:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2);n(442);var o=function(e){var t=e.children,n=e.withShadow,o=e.style,i="paper";return n&&(i+=" shadow"),r.createElement("div",{className:i,style:o},t)};o.defaultProps={withShadow:!1},t.default=o},175:function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",function(){return r})},176:function(e,t,n){"use strict";function r(e){return"/"===e.charAt(0)}function o(e,t){for(var n=t,r=n+1,o=e.length;r<o;n+=1,r+=1)e[n]=e[r];e.pop()}t.a=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=e&&e.split("/")||[],i=t&&t.split("/")||[],u=e&&r(e),a=t&&r(t),c=u||a;if(e&&r(e)?i=n:n.length&&(i.pop(),i=i.concat(n)),!i.length)return"/";var l=void 0;if(i.length){var s=i[i.length-1];l="."===s||".."===s||""===s}else l=!1;for(var f=0,p=i.length;p>=0;p--){var d=i[p];"."===d?o(i,p):".."===d?(o(i,p),f++):f&&(o(i,p),f--)}if(!c)for(;f--;f)i.unshift("..");!c||""===i[0]||i[0]&&r(i[0])||i.unshift("");var y=i.join("/");return l&&"/"!==y.substr(-1)&&(y+="/"),y}},177:function(e,t,n){"use strict";var r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.a=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every(function(t,r){return e(t,n[r])});var o=void 0===t?"undefined":r(t);if(o!==(void 0===n?"undefined":r(n)))return!1;if("object"===o){var i=t.valueOf(),u=n.valueOf();if(i!==t||u!==n)return e(i,u);var a=Object.keys(t),c=Object.keys(n);return a.length===c.length&&a.every(function(r){return e(t[r],n[r])})}return!1}},386:function(e,t,n){"use strict";e.exports=n(387)},387:function(e,t,n){"use strict";(function(e){
/** @license React v0.12.0
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
Object.defineProperty(t,"__esModule",{value:!0});var n=null,r=!1,o=3,i=-1,u=-1,a=!1,c=!1;function l(){if(!a){var e=n.expirationTime;c?O():c=!0,x(p,e)}}function s(){var e=n,t=n.next;if(n===t)n=null;else{var r=n.previous;n=r.next=t,t.previous=r}e.next=e.previous=null,r=e.callback,t=e.expirationTime,e=e.priorityLevel;var i=o,a=u;o=e,u=t;try{var c=r()}finally{o=i,u=a}if("function"==typeof c)if(c={callback:c,priorityLevel:e,expirationTime:t,next:null,previous:null},null===n)n=c.next=c.previous=c;else{r=null,e=n;do{if(e.expirationTime>=t){r=e;break}e=e.next}while(e!==n);null===r?r=n:r===n&&(n=c,l()),(t=r.previous).next=r.previous=c,c.next=r,c.previous=t}}function f(){if(-1===i&&null!==n&&1===n.priorityLevel){a=!0;try{do{s()}while(null!==n&&1===n.priorityLevel)}finally{a=!1,null!==n?l():c=!1}}}function p(e){a=!0;var o=r;r=e;try{if(e)for(;null!==n;){var i=t.unstable_now();if(!(n.expirationTime<=i))break;do{s()}while(null!==n&&n.expirationTime<=i)}else if(null!==n)do{s()}while(null!==n&&!j())}finally{a=!1,r=o,null!==n?l():c=!1,f()}}var d,y,v=Date,h="function"==typeof setTimeout?setTimeout:void 0,b="function"==typeof clearTimeout?clearTimeout:void 0,w="function"==typeof requestAnimationFrame?requestAnimationFrame:void 0,m="function"==typeof cancelAnimationFrame?cancelAnimationFrame:void 0;function _(e){d=w(function(t){b(y),e(t)}),y=h(function(){m(d),e(t.unstable_now())},100)}if("object"==typeof performance&&"function"==typeof performance.now){var g=performance;t.unstable_now=function(){return g.now()}}else t.unstable_now=function(){return v.now()};var x,O,j,E=null;if("undefined"!=typeof window?E=window:void 0!==e&&(E=e),E&&E._schedMock){var P=E._schedMock;x=P[0],O=P[1],j=P[2],t.unstable_now=P[3]}else if("undefined"==typeof window||"function"!=typeof MessageChannel){var k=null,S=function(e){if(null!==k)try{k(e)}finally{k=null}};x=function(e){null!==k?setTimeout(x,0,e):(k=e,setTimeout(S,0,!1))},O=function(){k=null},j=function(){return!1}}else{"undefined"!=typeof console&&("function"!=typeof w&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof m&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"));var T=null,C=!1,A=-1,N=!1,M=!1,I=0,B=33,R=33;j=function(){return I<=t.unstable_now()};var J=new MessageChannel,L=J.port2;J.port1.onmessage=function(){C=!1;var e=T,n=A;T=null,A=-1;var r=t.unstable_now(),o=!1;if(0>=I-r){if(!(-1!==n&&n<=r))return N||(N=!0,_(F)),T=e,void(A=n);o=!0}if(null!==e){M=!0;try{e(o)}finally{M=!1}}};var F=function(e){if(null!==T){_(F);var t=e-I+R;t<R&&B<R?(8>t&&(t=8),R=t<B?B:t):B=t,I=e+R,C||(C=!0,L.postMessage(void 0))}else N=!1};x=function(e,t){T=e,A=t,M||0>t?L.postMessage(void 0):N||(N=!0,_(F))},O=function(){T=null,C=!1,A=-1}}t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,n){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var r=o,u=i;o=e,i=t.unstable_now();try{return n()}finally{o=r,i=u,f()}},t.unstable_scheduleCallback=function(e,r){var u=-1!==i?i:t.unstable_now();if("object"==typeof r&&null!==r&&"number"==typeof r.timeout)r=u+r.timeout;else switch(o){case 1:r=u+-1;break;case 2:r=u+250;break;case 5:r=u+1073741823;break;case 4:r=u+1e4;break;default:r=u+5e3}if(e={callback:e,priorityLevel:o,expirationTime:r,next:null,previous:null},null===n)n=e.next=e.previous=e,l();else{u=null;var a=n;do{if(a.expirationTime>r){u=a;break}a=a.next}while(a!==n);null===u?u=n:u===n&&(n=e,l()),(r=u.previous).next=u.previous=e,e.next=u,e.previous=r}return e},t.unstable_cancelCallback=function(e){var t=e.next;if(null!==t){if(t===e)n=null;else{e===n&&(n=t);var r=e.previous;r.next=t,t.previous=r}e.next=e.previous=null}},t.unstable_wrapCallback=function(e){var n=o;return function(){var r=o,u=i;o=n,i=t.unstable_now();try{return e.apply(this,arguments)}finally{o=r,i=u,f()}}},t.unstable_getCurrentPriorityLevel=function(){return o},t.unstable_shouldYield=function(){return!r&&(null!==n&&n.expirationTime<u||j())},t.unstable_continueExecution=function(){null!==n&&l()},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return n}}).call(this,n(67))},391:function(e,t,n){"use strict";function r(e){return function(t){var n=t.dispatch,r=t.getState;return function(t){return function(o){return"function"==typeof o?o(n,r,e):t(o)}}}}t.__esModule=!0;var o=r();o.withExtraArgument=r,t.default=o},392:function(e,t,n){"use strict";n.r(t),function(e,r){var o,i=n(175);o="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var u=Object(i.a)(o);t.default=u}.call(this,n(67),n(393)(e))},393:function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},407:function(e,t){e.exports={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,menuitem:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0}},413:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var o=n(2);n(438);t.default=function(e){var t=e.color,n=e.size,i={width:n,height:n},u={width:n?n+13:void 0,height:n?n+13:void 0};return o.createElement("div",{className:"lds-ring",style:u},o.createElement("div",{style:r({border:"6px solid "+t,borderColor:t+"  transparent transparent transparent"},i)}),o.createElement("div",{style:i}),o.createElement("div",{style:i}),o.createElement("div",{style:i}))}},419:function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(2),u=n(121),a=n(89),c=n(65),l=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return o(t,e),t.prototype.render=function(){var e=this.props,t=e.object,n=e.columnJustify,r=e.rowJustify,o=Object.keys(t);return i.createElement(u.default,{justify:n},o.map(function(e){return i.createElement(a.default,{justify:r,key:e},i.createElement(c.Text,null,e,":"),i.createElement(c.Text,null,t[e]))}))},t}(i.Component);t.default=l},425:function(e,t){},430:function(e,t){},432:function(e,t){},434:function(e,t){},436:function(e,t){},438:function(e,t){},442:function(e,t){},65:function(e,t,n){"use strict";var r,o=this&&this.__extends||(r=function(e,t){return(r=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}r(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__assign||function(){return(i=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var o in t=arguments[n])Object.prototype.hasOwnProperty.call(t,o)&&(e[o]=t[o]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var u=n(2),a=n(169);n(430),n(430),t.Text=function(e){var t=e.children,n=e.bold,r=e.italic,o=e.style,i="my-text";return n&&(i+=" bold"),r&&(i+=" italic"),e.className&&(i+=" "+e.className),u.createElement("div",{className:i,style:o},t)},t.Text.defaultProps={italic:!1,bold:!1};var c=function(e){function n(){return null!==e&&e.apply(this,arguments)||this}return o(n,e),n.prototype.render=function(){var e=this.props,n=e.italic,r=e.bold;return this.context===a.Browsers.Mobile&&(n=!0,r=!0),u.createElement(t.Text,i({},this.props,{italic:n,bold:r}))},n.contextType=a.Context,n}(u.Component);t.default=c},67:function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},72:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(2);n(436);t.default=function(e){var t=e.children;return r.createElement("div",{className:"centered"},t)}},89:function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r,o=n(2);n(432),function(e){e[e.Center=0]="Center",e[e.Start=1]="Start",e[e.End=2]="End",e[e.SpaceBetween=3]="SpaceBetween"}(r=t.Justify||(t.Justify={})),t.getClassNameByJustify=function(e){switch(e){case r.Start:return" start";case r.End:return" end";case r.SpaceBetween:return" space-between";case r.Center:default:return" center"}};var i=function(e){var n=e.children,r=e.justify,i=e.style,u=e.wrap,a="row"+t.getClassNameByJustify(r);return u&&(a+=" wrap"),o.createElement("div",{style:i,className:a},n)};i.defaultProps={justify:r.Center},t.default=i}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,