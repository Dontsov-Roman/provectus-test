(window.webpackJsonp=window.webpackJsonp||[]).push([[0],{125:function(t,e,n){"use strict";function r(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}n.d(e,"a",function(){return r})},15:function(t,e,n){"use strict";t.exports=function(){}},16:function(t,e,n){"use strict";var r=n(15),o=n.n(r),i=n(9),s=n.n(i),a=n(176),c=n(177),u=function(t){return"/"===t.charAt(0)?t:"/"+t},l=function(t){return"/"===t.charAt(0)?t.substr(1):t},p=function(t,e){return new RegExp("^"+e+"(\\/|\\?|#|$)","i").test(t)},f=function(t,e){return p(t,e)?t.substr(e.length):t},h=function(t){return"/"===t.charAt(t.length-1)?t.slice(0,-1):t},d=function(t){var e=t.pathname,n=t.search,r=t.hash,o=e||"/";return n&&"?"!==n&&(o+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(o+="#"===r.charAt(0)?r:"#"+r),o},g=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},b=function(t,e,n,r){var o=void 0;"string"==typeof t?(o=function(t){var e=t||"/",n="",r="",o=e.indexOf("#");-1!==o&&(r=e.substr(o),e=e.substr(0,o));var i=e.indexOf("?");return-1!==i&&(n=e.substr(i),e=e.substr(0,i)),{pathname:e,search:"?"===n?"":n,hash:"#"===r?"":r}}(t)).state=e:(void 0===(o=g({},t)).pathname&&(o.pathname=""),o.search?"?"!==o.search.charAt(0)&&(o.search="?"+o.search):o.search="",o.hash?"#"!==o.hash.charAt(0)&&(o.hash="#"+o.hash):o.hash="",void 0!==e&&void 0===o.state&&(o.state=e));try{o.pathname=decodeURI(o.pathname)}catch(t){throw t instanceof URIError?new URIError('Pathname "'+o.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):t}return n&&(o.key=n),r?o.pathname?"/"!==o.pathname.charAt(0)&&(o.pathname=Object(a.a)(o.pathname,r.pathname)):o.pathname=r.pathname:o.pathname||(o.pathname="/"),o},y=function(t,e){return t.pathname===e.pathname&&t.search===e.search&&t.hash===e.hash&&t.key===e.key&&Object(c.a)(t.state,e.state)},v=function(){var t=null,e=[];return{setPrompt:function(e){return o()(null==t,"A history supports only one prompt at a time"),t=e,function(){t===e&&(t=null)}},confirmTransitionTo:function(e,n,r,i){if(null!=t){var s="function"==typeof t?t(e,n):t;"string"==typeof s?"function"==typeof r?r(s,i):(o()(!1,"A history needs a getUserConfirmation function in order to use a prompt message"),i(!0)):i(!1!==s)}else i(!0)},appendListener:function(t){var n=!0,r=function(){n&&t.apply(void 0,arguments)};return e.push(r),function(){n=!1,e=e.filter(function(t){return t!==r})}},notifyListeners:function(){for(var t=arguments.length,n=Array(t),r=0;r<t;r++)n[r]=arguments[r];e.forEach(function(t){return t.apply(void 0,n)})}}},m=!("undefined"==typeof window||!window.document||!window.document.createElement),w=function(t,e,n){return t.addEventListener?t.addEventListener(e,n,!1):t.attachEvent("on"+e,n)},O=function(t,e,n){return t.removeEventListener?t.removeEventListener(e,n,!1):t.detachEvent("on"+e,n)},x=function(t,e){return e(window.confirm(t))},j="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},S=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},k=function(){try{return window.history.state||{}}catch(t){return{}}},P=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};s()(m,"Browser history needs a DOM");var e,n=window.history,r=(-1===(e=window.navigator.userAgent).indexOf("Android 2.")&&-1===e.indexOf("Android 4.0")||-1===e.indexOf("Mobile Safari")||-1!==e.indexOf("Chrome")||-1!==e.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,i=!(-1===window.navigator.userAgent.indexOf("Trident")),a=t.forceRefresh,c=void 0!==a&&a,l=t.getUserConfirmation,g=void 0===l?x:l,y=t.keyLength,P=void 0===y?6:y,E=t.basename?h(u(t.basename)):"",F=function(t){var e=t||{},n=e.key,r=e.state,i=window.location,s=i.pathname+i.search+i.hash;return o()(!E||p(s,E),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+s+'" to begin with "'+E+'".'),E&&(s=f(s,E)),b(s,r,n)},M=function(){return Math.random().toString(36).substr(2,P)},R=v(),L=function(t){S(z,t),z.length=n.length,R.notifyListeners(z.location,z.action)},N=function(t){(function(t){return void 0===t.state&&-1===navigator.userAgent.indexOf("CriOS")})(t)||A(F(t.state))},C=function(){A(F(k()))},T=!1,A=function(t){T?(T=!1,L()):R.confirmTransitionTo(t,"POP",g,function(e){e?L({action:"POP",location:t}):B(t)})},B=function(t){var e=z.location,n=U.indexOf(e.key);-1===n&&(n=0);var r=U.indexOf(t.key);-1===r&&(r=0);var o=n-r;o&&(T=!0,H(o))},_=F(k()),U=[_.key],V=function(t){return E+d(t)},H=function(t){n.go(t)},I=0,D=function(t){1===(I+=t)?(w(window,"popstate",N),i&&w(window,"hashchange",C)):0===I&&(O(window,"popstate",N),i&&O(window,"hashchange",C))},K=!1,z={length:n.length,action:"POP",location:_,createHref:V,push:function(t,e){o()(!("object"===(void 0===t?"undefined":j(t))&&void 0!==t.state&&void 0!==e),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var i=b(t,e,M(),z.location);R.confirmTransitionTo(i,"PUSH",g,function(t){if(t){var e=V(i),s=i.key,a=i.state;if(r)if(n.pushState({key:s,state:a},null,e),c)window.location.href=e;else{var u=U.indexOf(z.location.key),l=U.slice(0,-1===u?0:u+1);l.push(i.key),U=l,L({action:"PUSH",location:i})}else o()(void 0===a,"Browser history cannot push state in browsers that do not support HTML5 history"),window.location.href=e}})},replace:function(t,e){o()(!("object"===(void 0===t?"undefined":j(t))&&void 0!==t.state&&void 0!==e),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var i=b(t,e,M(),z.location);R.confirmTransitionTo(i,"REPLACE",g,function(t){if(t){var e=V(i),s=i.key,a=i.state;if(r)if(n.replaceState({key:s,state:a},null,e),c)window.location.replace(e);else{var u=U.indexOf(z.location.key);-1!==u&&(U[u]=i.key),L({action:"REPLACE",location:i})}else o()(void 0===a,"Browser history cannot replace state in browsers that do not support HTML5 history"),window.location.replace(e)}})},go:H,goBack:function(){return H(-1)},goForward:function(){return H(1)},block:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],e=R.setPrompt(t);return K||(D(1),K=!0),function(){return K&&(K=!1,D(-1)),e()}},listen:function(t){var e=R.appendListener(t);return D(1),function(){D(-1),e()}}};return z},E=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},F={hashbang:{encodePath:function(t){return"!"===t.charAt(0)?t:"!/"+l(t)},decodePath:function(t){return"!"===t.charAt(0)?t.substr(1):t}},noslash:{encodePath:l,decodePath:u},slash:{encodePath:u,decodePath:u}},M=function(){var t=window.location.href,e=t.indexOf("#");return-1===e?"":t.substring(e+1)},R=function(t){var e=window.location.href.indexOf("#");window.location.replace(window.location.href.slice(0,e>=0?e:0)+"#"+t)},L=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};s()(m,"Hash history needs a DOM");var e=window.history,n=-1===window.navigator.userAgent.indexOf("Firefox"),r=t.getUserConfirmation,i=void 0===r?x:r,a=t.hashType,c=void 0===a?"slash":a,l=t.basename?h(u(t.basename)):"",g=F[c],j=g.encodePath,S=g.decodePath,k=function(){var t=S(M());return o()(!l||p(t,l),'You are attempting to use a basename on a page whose URL path does not begin with the basename. Expected path "'+t+'" to begin with "'+l+'".'),l&&(t=f(t,l)),b(t)},P=v(),L=function(t){E(W,t),W.length=e.length,P.notifyListeners(W.location,W.action)},N=!1,C=null,T=function(){var t=M(),e=j(t);if(t!==e)R(e);else{var n=k(),r=W.location;if(!N&&y(r,n))return;if(C===d(n))return;C=null,A(n)}},A=function(t){N?(N=!1,L()):P.confirmTransitionTo(t,"POP",i,function(e){e?L({action:"POP",location:t}):B(t)})},B=function(t){var e=W.location,n=H.lastIndexOf(d(e));-1===n&&(n=0);var r=H.lastIndexOf(d(t));-1===r&&(r=0);var o=n-r;o&&(N=!0,I(o))},_=M(),U=j(_);_!==U&&R(U);var V=k(),H=[d(V)],I=function(t){o()(n,"Hash history go(n) causes a full page reload in this browser"),e.go(t)},D=0,K=function(t){1===(D+=t)?w(window,"hashchange",T):0===D&&O(window,"hashchange",T)},z=!1,W={length:e.length,action:"POP",location:V,createHref:function(t){return"#"+j(l+d(t))},push:function(t,e){o()(void 0===e,"Hash history cannot push state; it is ignored");var n=b(t,void 0,void 0,W.location);P.confirmTransitionTo(n,"PUSH",i,function(t){if(t){var e=d(n),r=j(l+e);if(M()!==r){C=e,function(t){window.location.hash=t}(r);var i=H.lastIndexOf(d(W.location)),s=H.slice(0,-1===i?0:i+1);s.push(e),H=s,L({action:"PUSH",location:n})}else o()(!1,"Hash history cannot PUSH the same path; a new entry will not be added to the history stack"),L()}})},replace:function(t,e){o()(void 0===e,"Hash history cannot replace state; it is ignored");var n=b(t,void 0,void 0,W.location);P.confirmTransitionTo(n,"REPLACE",i,function(t){if(t){var e=d(n),r=j(l+e);M()!==r&&(C=e,R(r));var o=H.indexOf(d(W.location));-1!==o&&(H[o]=e),L({action:"REPLACE",location:n})}})},go:I,goBack:function(){return I(-1)},goForward:function(){return I(1)},block:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0],e=P.setPrompt(t);return z||(K(1),z=!0),function(){return z&&(z=!1,K(-1)),e()}},listen:function(t){var e=P.appendListener(t);return K(1),function(){K(-1),e()}}};return W},N="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},C=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},T=function(t,e,n){return Math.min(Math.max(t,e),n)},A=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.getUserConfirmation,n=t.initialEntries,r=void 0===n?["/"]:n,i=t.initialIndex,s=void 0===i?0:i,a=t.keyLength,c=void 0===a?6:a,u=v(),l=function(t){C(m,t),m.length=m.entries.length,u.notifyListeners(m.location,m.action)},p=function(){return Math.random().toString(36).substr(2,c)},f=T(s,0,r.length-1),h=r.map(function(t){return b(t,void 0,"string"==typeof t?p():t.key||p())}),g=d,y=function(t){var n=T(m.index+t,0,m.entries.length-1),r=m.entries[n];u.confirmTransitionTo(r,"POP",e,function(t){t?l({action:"POP",location:r,index:n}):l()})},m={length:h.length,action:"POP",location:h[f],index:f,entries:h,createHref:g,push:function(t,n){o()(!("object"===(void 0===t?"undefined":N(t))&&void 0!==t.state&&void 0!==n),"You should avoid providing a 2nd state argument to push when the 1st argument is a location-like object that already has state; it is ignored");var r=b(t,n,p(),m.location);u.confirmTransitionTo(r,"PUSH",e,function(t){if(t){var e=m.index+1,n=m.entries.slice(0);n.length>e?n.splice(e,n.length-e,r):n.push(r),l({action:"PUSH",location:r,index:e,entries:n})}})},replace:function(t,n){o()(!("object"===(void 0===t?"undefined":N(t))&&void 0!==t.state&&void 0!==n),"You should avoid providing a 2nd state argument to replace when the 1st argument is a location-like object that already has state; it is ignored");var r=b(t,n,p(),m.location);u.confirmTransitionTo(r,"REPLACE",e,function(t){t&&(m.entries[m.index]=r,l({action:"REPLACE",location:r}))})},go:y,goBack:function(){return y(-1)},goForward:function(){return y(1)},canGo:function(t){var e=m.index+t;return e>=0&&e<m.entries.length},block:function(){var t=arguments.length>0&&void 0!==arguments[0]&&arguments[0];return u.setPrompt(t)},listen:function(t){return u.appendListener(t)}};return m};n.d(e,"a",function(){return P}),n.d(e,"b",function(){return L}),n.d(e,"d",function(){return A}),n.d(e,"c",function(){return b}),n.d(e,"f",function(){return y}),n.d(e,"e",function(){return d})},178:function(t,e,n){"use strict";var r={childContextTypes:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},i=Object.defineProperty,s=Object.getOwnPropertyNames,a=Object.getOwnPropertySymbols,c=Object.getOwnPropertyDescriptor,u=Object.getPrototypeOf,l=u&&u(Object);t.exports=function t(e,n,p){if("string"!=typeof n){if(l){var f=u(n);f&&f!==l&&t(e,f,p)}var h=s(n);a&&(h=h.concat(a(n)));for(var d=0;d<h.length;++d){var g=h[d];if(!(r[g]||o[g]||p&&p[g])){var b=c(n,g);try{i(e,g,b)}catch(t){}}}return e}return e}},179:function(t,e,n){var r=n(399),o=n(400),i=n(401);t.exports=function(t,e){return r(t)||o(t,e)||i()}},180:function(t,e,n){t.exports={parse:n(405),stringify:n(408)}},19:function(t,e,n){var r=n(43),o=n(47);t.exports=function(t,e){return!e||"object"!==r(e)&&"function"!=typeof e?o(t):e}},20:function(t,e,n){var r=n(403);t.exports=function(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{},o=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(n).filter(function(t){return Object.getOwnPropertyDescriptor(n,t).enumerable}))),o.forEach(function(e){r(t,e,n[e])})}return t}},24:function(t,e){t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},25:function(t,e){function n(t,e){for(var n=0;n<e.length;n++){var r=e[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}t.exports=function(t,e,r){return e&&n(t.prototype,e),r&&n(t,r),t}},26:function(t,e){function n(e){return t.exports=n=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},n(e)}t.exports=n},27:function(t,e,n){var r=n(404);t.exports=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&r(t,e)}},3:function(t,e){class n{static getFirstMatch(t,e){const n=e.match(t);return n&&n.length>0&&n[1]||""}static getSecondMatch(t,e){const n=e.match(t);return n&&n.length>1&&n[2]||""}static matchAndReturnConst(t,e,n){if(t.test(e))return n}static getWindowsVersionName(t){switch(t){case"NT":return"NT";case"XP":return"XP";case"NT 5.0":return"2000";case"NT 5.1":return"XP";case"NT 5.2":return"2003";case"NT 6.0":return"Vista";case"NT 6.1":return"7";case"NT 6.2":return"8";case"NT 6.3":return"8.1";case"NT 10.0":return"10";default:return}}static getVersionPrecision(t){return t.split(".").length}static compareVersions(t,e,r=!1){const o=n.getVersionPrecision(t),i=n.getVersionPrecision(e);let s=Math.max(o,i),a=0;const c=n.map([t,e],t=>{const e=s-n.getVersionPrecision(t),r=t+new Array(e+1).join(".0");return n.map(r.split("."),t=>new Array(20-t.length).join("0")+t).reverse()});for(r&&(a=s-Math.min(o,i)),s-=1;s>=a;){if(c[0][s]>c[1][s])return 1;if(c[0][s]===c[1][s]){if(s===a)return 0;s-=1}else if(c[0][s]<c[1][s])return-1}}static map(t,e){const n=[];let r;if(Array.prototype.map)return Array.prototype.map.call(t,e);for(r=0;r<t.length;r+=1)n.push(e(t[r]));return n}}t.exports=n},399:function(t,e){t.exports=function(t){if(Array.isArray(t))return t}},400:function(t,e){t.exports=function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var s,a=t[Symbol.iterator]();!(r=(s=a.next()).done)&&(n.push(s.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{r||null==a.return||a.return()}finally{if(o)throw i}}return n}},401:function(t,e){t.exports=function(){throw new TypeError("Invalid attempt to destructure non-iterable instance")}},402:function(t,e){t.exports=function(t,e){if(null==t)return{};var n,r,o={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}},403:function(t,e){t.exports=function(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}},404:function(t,e){function n(e,r){return t.exports=n=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},n(e,r)}t.exports=n},405:function(t,e,n){var r=/(?:<!--[\S\s]*?-->|<(?:"[^"]*"['"]*|'[^']*'['"]*|[^'">])+>)/g,o=n(406),i=Object.create?Object.create(null):{};function s(t,e,n,r,o){var i=e.indexOf("<",r),s=e.slice(r,-1===i?void 0:i);/^\s*$/.test(s)&&(s=" "),(!o&&i>-1&&n+t.length>=0||" "!==s)&&t.push({type:"text",content:s})}t.exports=function(t,e){e||(e={}),e.components||(e.components=i);var n,a=[],c=-1,u=[],l={},p=!1;return t.replace(r,function(r,i){if(p){if(r!=="</"+n.name+">")return;p=!1}var f,h="/"!==r.charAt(1),d=0===r.indexOf("\x3c!--"),g=i+r.length,b=t.charAt(g);h&&!d&&(c++,"tag"===(n=o(r)).type&&e.components[n.name]&&(n.type="component",p=!0),n.voidElement||p||!b||"<"===b||s(n.children,t,c,g,e.ignoreWhitespace),l[n.tagName]=n,0===c&&a.push(n),(f=u[c-1])&&f.children.push(n),u[c]=n),(d||!h||n.voidElement)&&(d||c--,!p&&"<"!==b&&b&&s(f=-1===c?a:u[c].children,t,c,g,e.ignoreWhitespace))}),!a.length&&t.length&&s(a,t,0,0,e.ignoreWhitespace),a}},406:function(t,e,n){var r=/([\w-]+)|=|(['"])([.\s\S]*?)\2/g,o=n(407);t.exports=function(t){var e,n=0,i=!0,s={type:"tag",name:"",voidElement:!1,attrs:{},children:[]};return t.replace(r,function(r){if("="===r)return i=!0,void n++;i?0===n?((o[r]||"/"===t.charAt(t.length-2))&&(s.voidElement=!0),s.name=r):(s.attrs[e]=r.replace(/^['"]|['"]$/g,""),e=void 0):(e&&(s.attrs[e]=e),e=r),n++,i=!1}),s}},408:function(t,e){function n(t,e){switch(e.type){case"text":return t+e.content;case"tag":return t+="<"+e.name+(e.attrs?function(t){var e=[];for(var n in t)e.push(n+'="'+t[n]+'"');return e.length?" "+e.join(" "):""}(e.attrs):"")+(e.voidElement?"/>":">"),e.voidElement?t:t+e.children.reduce(n,"")+"</"+e.name+">"}}t.exports=function(t){return t.reduce(function(t,e){return t+n("",e)},"")}},422:function(t,e,n){"use strict";n.r(e);var r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};var o={type:"logger",log:function(t){this.output("log",t)},warn:function(t){this.output("warn",t)},error:function(t){this.output("error",t)},output:function(t,e){var n;console&&console[t]&&(n=console)[t].apply(n,function(t){if(Array.isArray(t)){for(var e=0,n=Array(t.length);e<t.length;e++)n[e]=t[e];return n}return Array.from(t)}(e))}},i=new(function(){function t(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.init(e,n)}return t.prototype.init=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.prefix=e.prefix||"i18next:",this.logger=t||o,this.options=e,this.debug=e.debug},t.prototype.setDebug=function(t){this.debug=t},t.prototype.log=function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];return this.forward(e,"log","",!0)},t.prototype.warn=function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];return this.forward(e,"warn","",!0)},t.prototype.error=function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];return this.forward(e,"error","")},t.prototype.deprecate=function(){for(var t=arguments.length,e=Array(t),n=0;n<t;n++)e[n]=arguments[n];return this.forward(e,"warn","WARNING DEPRECATED: ",!0)},t.prototype.forward=function(t,e,n,r){return r&&!this.debug?null:("string"==typeof t[0]&&(t[0]=""+n+this.prefix+" "+t[0]),this.logger[e](t))},t.prototype.create=function(e){return new t(this.logger,r({prefix:this.prefix+":"+e+":"},this.options))},t}());var s=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.observers={}}return t.prototype.on=function(t,e){var n=this;return t.split(" ").forEach(function(t){n.observers[t]=n.observers[t]||[],n.observers[t].push(e)}),this},t.prototype.off=function(t,e){var n=this;this.observers[t]&&this.observers[t].forEach(function(){if(e){var r=n.observers[t].indexOf(e);r>-1&&n.observers[t].splice(r,1)}else delete n.observers[t]})},t.prototype.emit=function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];this.observers[t]&&[].concat(this.observers[t]).forEach(function(t){t.apply(void 0,n)});this.observers["*"]&&[].concat(this.observers["*"]).forEach(function(e){e.apply(e,[t].concat(n))})},t}();function a(){var t=void 0,e=void 0,n=new Promise(function(n,r){t=n,e=r});return n.resolve=t,n.reject=e,n}function c(t){return null==t?"":""+t}function u(t,e,n){function r(t){return t&&t.indexOf("###")>-1?t.replace(/###/g,"."):t}function o(){return!t||"string"==typeof t}for(var i="string"!=typeof e?[].concat(e):e.split(".");i.length>1;){if(o())return{};var s=r(i.shift());!t[s]&&n&&(t[s]=new n),t=t[s]}return o()?{}:{obj:t,k:r(i.shift())}}function l(t,e,n){var r=u(t,e,Object);r.obj[r.k]=n}function p(t,e){var n=u(t,e),r=n.obj,o=n.k;if(r)return r[o]}function f(t){return t.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&")}var h={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;"};function d(t){return"string"==typeof t?t.replace(/[&<>"'\/]/g,function(t){return h[t]}):t}var g=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};function b(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):function(t,e){for(var n=Object.getOwnPropertyNames(e),r=0;r<n.length;r++){var o=n[r],i=Object.getOwnPropertyDescriptor(e,o);i&&i.configurable&&void 0===t[o]&&Object.defineProperty(t,o,i)}}(t,e))}var y=function(t){function e(n){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{ns:["translation"],defaultNS:"translation"};!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var o=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,t.call(this));return o.data=n||{},o.options=r,void 0===o.options.keySeparator&&(o.options.keySeparator="."),o}return b(e,t),e.prototype.addNamespaces=function(t){this.options.ns.indexOf(t)<0&&this.options.ns.push(t)},e.prototype.removeNamespaces=function(t){var e=this.options.ns.indexOf(t);e>-1&&this.options.ns.splice(e,1)},e.prototype.getResource=function(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},o=void 0!==r.keySeparator?r.keySeparator:this.options.keySeparator,i=[t,e];return n&&"string"!=typeof n&&(i=i.concat(n)),n&&"string"==typeof n&&(i=i.concat(o?n.split(o):n)),t.indexOf(".")>-1&&(i=t.split(".")),p(this.data,i)},e.prototype.addResource=function(t,e,n,r){var o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{silent:!1},i=this.options.keySeparator;void 0===i&&(i=".");var s=[t,e];n&&(s=s.concat(i?n.split(i):n)),t.indexOf(".")>-1&&(r=e,e=(s=t.split("."))[1]),this.addNamespaces(e),l(this.data,s,r),o.silent||this.emit("added",t,e,n,r)},e.prototype.addResources=function(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{silent:!1};for(var o in n)"string"==typeof n[o]&&this.addResource(t,e,o,n[o],{silent:!0});r.silent||this.emit("added",t,e,n)},e.prototype.addResourceBundle=function(t,e,n,r,o){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{silent:!1},s=[t,e];t.indexOf(".")>-1&&(r=n,n=e,e=(s=t.split("."))[1]),this.addNamespaces(e);var a=p(this.data,s)||{};r?function t(e,n,r){for(var o in n)o in e?"string"==typeof e[o]||e[o]instanceof String||"string"==typeof n[o]||n[o]instanceof String?r&&(e[o]=n[o]):t(e[o],n[o],r):e[o]=n[o];return e}(a,n,o):a=g({},a,n),l(this.data,s,a),i.silent||this.emit("added",t,e,n)},e.prototype.removeResourceBundle=function(t,e){this.hasResourceBundle(t,e)&&delete this.data[t][e],this.removeNamespaces(e),this.emit("removed",t,e)},e.prototype.hasResourceBundle=function(t,e){return void 0!==this.getResource(t,e)},e.prototype.getResourceBundle=function(t,e){return e||(e=this.options.defaultNS),"v1"===this.options.compatibilityAPI?g({},this.getResource(t,e)):this.getResource(t,e)},e.prototype.getDataByLanguage=function(t){return this.data[t]},e.prototype.toJSON=function(){return this.data},e}(s),v={processors:{},addPostProcessor:function(t){this.processors[t.name]=t},handle:function(t,e,n,r,o){var i=this;return t.forEach(function(t){i.processors[t]&&(e=i.processors[t].process(e,n,r,o))}),e}},m=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},w="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};function O(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):function(t,e){for(var n=Object.getOwnPropertyNames(e),r=0;r<n.length;r++){var o=n[r],i=Object.getOwnPropertyDescriptor(e,o);i&&i.configurable&&void 0===t[o]&&Object.defineProperty(t,o,i)}}(t,e))}var x=function(t){function e(n){var r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var o,s,a=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,t.call(this));return o=n,s=a,["resourceStore","languageUtils","pluralResolver","interpolator","backendConnector","i18nFormat"].forEach(function(t){o[t]&&(s[t]=o[t])}),a.options=r,void 0===a.options.keySeparator&&(a.options.keySeparator="."),a.logger=i.create("translator"),a}return O(e,t),e.prototype.changeLanguage=function(t){t&&(this.language=t)},e.prototype.exists=function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{interpolation:{}},n=this.resolve(t,e);return n&&void 0!==n.res},e.prototype.extractFromKey=function(t,e){var n=e.nsSeparator||this.options.nsSeparator;void 0===n&&(n=":");var r=void 0!==e.keySeparator?e.keySeparator:this.options.keySeparator,o=e.ns||this.options.defaultNS;if(n&&t.indexOf(n)>-1){var i=t.split(n);(n!==r||n===r&&this.options.ns.indexOf(i[0])>-1)&&(o=i.shift()),t=i.join(r)}return"string"==typeof o&&(o=[o]),{key:t,namespaces:o}},e.prototype.translate=function(t,e){var n=this;if("object"!==(void 0===e?"undefined":w(e))&&this.options.overloadTranslationOptionHandler&&(e=this.options.overloadTranslationOptionHandler(arguments)),e||(e={}),null==t)return"";Array.isArray(t)||(t=[String(t)]);var r=void 0!==e.keySeparator?e.keySeparator:this.options.keySeparator,o=this.extractFromKey(t[t.length-1],e),i=o.key,s=o.namespaces,a=s[s.length-1],c=e.lng||this.language,u=e.appendNamespaceToCIMode||this.options.appendNamespaceToCIMode;if(c&&"cimode"===c.toLowerCase()){if(u){var l=e.nsSeparator||this.options.nsSeparator;return a+l+i}return i}var p=this.resolve(t,e),f=p&&p.res,h=p&&p.usedKey||i,d=Object.prototype.toString.apply(f),g=void 0!==e.joinArrays?e.joinArrays:this.options.joinArrays,b=!this.i18nFormat||this.i18nFormat.handleAsObject;if(b&&f&&("string"!=typeof f&&"boolean"!=typeof f&&"number"!=typeof f)&&["[object Number]","[object Function]","[object RegExp]"].indexOf(d)<0&&(!g||"[object Array]"!==d)){if(!e.returnObjects&&!this.options.returnObjects)return this.logger.warn("accessing an object - but returnObjects options is not enabled!"),this.options.returnedObjectHandler?this.options.returnedObjectHandler(h,f,e):"key '"+i+" ("+this.language+")' returned an object instead of string.";if(r){var y="[object Array]"===d?[]:{};for(var v in f)if(Object.prototype.hasOwnProperty.call(f,v)){var O=""+h+r+v;y[v]=this.translate(O,m({},e,{joinArrays:!1,ns:s})),y[v]===O&&(y[v]=f[v])}f=y}}else if(b&&g&&"[object Array]"===d)(f=f.join(g))&&(f=this.extendTranslation(f,t,e));else{var x=!1,j=!1;if(!this.isValidLookup(f)&&void 0!==e.defaultValue){if(x=!0,void 0!==e.count){var S=this.pluralResolver.getSuffix(c,e.count);f=e["defaultValue"+S]}f||(f=e.defaultValue)}this.isValidLookup(f)||(j=!0,f=i);var k=e.defaultValue&&e.defaultValue!==f&&this.options.updateMissing;if(j||x||k){this.logger.log(k?"updateKey":"missingKey",c,a,i,k?e.defaultValue:f);var P=[],E=this.languageUtils.getFallbackCodes(this.options.fallbackLng,e.lng||this.language);if("fallback"===this.options.saveMissingTo&&E&&E[0])for(var F=0;F<E.length;F++)P.push(E[F]);else"all"===this.options.saveMissingTo?P=this.languageUtils.toResolveHierarchy(e.lng||this.language):P.push(e.lng||this.language);var M=function(t,r){n.options.missingKeyHandler?n.options.missingKeyHandler(t,a,r,k?e.defaultValue:f,k,e):n.backendConnector&&n.backendConnector.saveMissing&&n.backendConnector.saveMissing(t,a,r,k?e.defaultValue:f,k,e),n.emit("missingKey",t,a,r,f)};if(this.options.saveMissing){var R=void 0!==e.count&&"string"!=typeof e.count;this.options.saveMissingPlurals&&R?P.forEach(function(t){n.pluralResolver.getPluralFormsOfKey(t,i).forEach(function(e){return M([t],e)})}):M(P,i)}}f=this.extendTranslation(f,t,e,p),j&&f===i&&this.options.appendNamespaceToMissingKey&&(f=a+":"+i),j&&this.options.parseMissingKeyHandler&&(f=this.options.parseMissingKeyHandler(f))}return f},e.prototype.extendTranslation=function(t,e,n,r){var o=this;if(this.i18nFormat&&this.i18nFormat.parse)t=this.i18nFormat.parse(t,n,r.usedLng,r.usedNS,r.usedKey,{resolved:r});else if(!n.skipInterpolation){n.interpolation&&this.interpolator.init(m({},n,{interpolation:m({},this.options.interpolation,n.interpolation)}));var i=n.replace&&"string"!=typeof n.replace?n.replace:n;this.options.interpolation.defaultVariables&&(i=m({},this.options.interpolation.defaultVariables,i)),t=this.interpolator.interpolate(t,i,n.lng||this.language,n),!1!==n.nest&&(t=this.interpolator.nest(t,function(){return o.translate.apply(o,arguments)},n)),n.interpolation&&this.interpolator.reset()}var s=n.postProcess||this.options.postProcess,a="string"==typeof s?[s]:s;return null!=t&&a&&a.length&&!1!==n.applyPostProcessor&&(t=v.handle(a,t,e,n,this)),t},e.prototype.resolve=function(t){var e=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=void 0,o=void 0,i=void 0,s=void 0;return"string"==typeof t&&(t=[t]),t.forEach(function(t){if(!e.isValidLookup(r)){var a=e.extractFromKey(t,n),c=a.key;o=c;var u=a.namespaces;e.options.fallbackNS&&(u=u.concat(e.options.fallbackNS));var l=void 0!==n.count&&"string"!=typeof n.count,p=void 0!==n.context&&"string"==typeof n.context&&""!==n.context,f=n.lngs?n.lngs:e.languageUtils.toResolveHierarchy(n.lng||e.language,n.fallbackLng);u.forEach(function(t){e.isValidLookup(r)||(s=t,f.forEach(function(o){if(!e.isValidLookup(r)){i=o;var s=c,a=[s];if(e.i18nFormat&&e.i18nFormat.addLookupKeys)e.i18nFormat.addLookupKeys(a,c,o,t,n);else{var u=void 0;l&&(u=e.pluralResolver.getSuffix(o,n.count)),l&&p&&a.push(s+u),p&&a.push(s+=""+e.options.contextSeparator+n.context),l&&a.push(s+=u)}for(var f=void 0;f=a.pop();)e.isValidLookup(r)||(r=e.getResource(o,t,f,n))}}))})}}),{res:r,usedKey:o,usedLng:i,usedNS:s}},e.prototype.isValidLookup=function(t){return!(void 0===t||!this.options.returnNull&&null===t||!this.options.returnEmptyString&&""===t)},e.prototype.getResource=function(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return this.i18nFormat&&this.i18nFormat.getResource?this.i18nFormat.getResource(t,e,n,r):this.resourceStore.getResource(t,e,n,r)},e}(s);function j(t){return t.charAt(0).toUpperCase()+t.slice(1)}var S=function(){function t(e){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.options=e,this.whitelist=this.options.whitelist||!1,this.logger=i.create("languageUtils")}return t.prototype.getScriptPartFromCode=function(t){if(!t||t.indexOf("-")<0)return null;var e=t.split("-");return 2===e.length?null:(e.pop(),this.formatLanguageCode(e.join("-")))},t.prototype.getLanguagePartFromCode=function(t){if(!t||t.indexOf("-")<0)return t;var e=t.split("-");return this.formatLanguageCode(e[0])},t.prototype.formatLanguageCode=function(t){if("string"==typeof t&&t.indexOf("-")>-1){var e=["hans","hant","latn","cyrl","cans","mong","arab"],n=t.split("-");return this.options.lowerCaseLng?n=n.map(function(t){return t.toLowerCase()}):2===n.length?(n[0]=n[0].toLowerCase(),n[1]=n[1].toUpperCase(),e.indexOf(n[1].toLowerCase())>-1&&(n[1]=j(n[1].toLowerCase()))):3===n.length&&(n[0]=n[0].toLowerCase(),2===n[1].length&&(n[1]=n[1].toUpperCase()),"sgn"!==n[0]&&2===n[2].length&&(n[2]=n[2].toUpperCase()),e.indexOf(n[1].toLowerCase())>-1&&(n[1]=j(n[1].toLowerCase())),e.indexOf(n[2].toLowerCase())>-1&&(n[2]=j(n[2].toLowerCase()))),n.join("-")}return this.options.cleanCode||this.options.lowerCaseLng?t.toLowerCase():t},t.prototype.isWhitelisted=function(t){return("languageOnly"===this.options.load||this.options.nonExplicitWhitelist)&&(t=this.getLanguagePartFromCode(t)),!this.whitelist||!this.whitelist.length||this.whitelist.indexOf(t)>-1},t.prototype.getFallbackCodes=function(t,e){if(!t)return[];if("string"==typeof t&&(t=[t]),"[object Array]"===Object.prototype.toString.apply(t))return t;if(!e)return t.default||[];var n=t[e];return n||(n=t[this.getScriptPartFromCode(e)]),n||(n=t[this.formatLanguageCode(e)]),n||(n=t.default),n||[]},t.prototype.toResolveHierarchy=function(t,e){var n=this,r=this.getFallbackCodes(e||this.options.fallbackLng||[],t),o=[],i=function(t){t&&(n.isWhitelisted(t)?o.push(t):n.logger.warn("rejecting non-whitelisted language code: "+t))};return"string"==typeof t&&t.indexOf("-")>-1?("languageOnly"!==this.options.load&&i(this.formatLanguageCode(t)),"languageOnly"!==this.options.load&&"currentOnly"!==this.options.load&&i(this.getScriptPartFromCode(t)),"currentOnly"!==this.options.load&&i(this.getLanguagePartFromCode(t))):"string"==typeof t&&i(this.formatLanguageCode(t)),r.forEach(function(t){o.indexOf(t)<0&&i(n.formatLanguageCode(t))}),o},t}();var k=[{lngs:["ach","ak","am","arn","br","fil","gun","ln","mfe","mg","mi","oc","pt","pt-BR","tg","ti","tr","uz","wa"],nr:[1,2],fc:1},{lngs:["af","an","ast","az","bg","bn","ca","da","de","dev","el","en","eo","es","et","eu","fi","fo","fur","fy","gl","gu","ha","hi","hu","hy","ia","it","kn","ku","lb","mai","ml","mn","mr","nah","nap","nb","ne","nl","nn","no","nso","pa","pap","pms","ps","pt-PT","rm","sco","se","si","so","son","sq","sv","sw","ta","te","tk","ur","yo"],nr:[1,2],fc:2},{lngs:["ay","bo","cgg","fa","id","ja","jbo","ka","kk","km","ko","ky","lo","ms","sah","su","th","tt","ug","vi","wo","zh"],nr:[1],fc:3},{lngs:["be","bs","dz","hr","ru","sr","uk"],nr:[1,2,5],fc:4},{lngs:["ar"],nr:[0,1,2,3,11,100],fc:5},{lngs:["cs","sk"],nr:[1,2,5],fc:6},{lngs:["csb","pl"],nr:[1,2,5],fc:7},{lngs:["cy"],nr:[1,2,3,8],fc:8},{lngs:["fr"],nr:[1,2],fc:9},{lngs:["ga"],nr:[1,2,3,7,11],fc:10},{lngs:["gd"],nr:[1,2,3,20],fc:11},{lngs:["is"],nr:[1,2],fc:12},{lngs:["jv"],nr:[0,1],fc:13},{lngs:["kw"],nr:[1,2,3,4],fc:14},{lngs:["lt"],nr:[1,2,10],fc:15},{lngs:["lv"],nr:[1,2,0],fc:16},{lngs:["mk"],nr:[1,2],fc:17},{lngs:["mnk"],nr:[0,1,2],fc:18},{lngs:["mt"],nr:[1,2,11,20],fc:19},{lngs:["or"],nr:[2,1],fc:2},{lngs:["ro"],nr:[1,2,20],fc:20},{lngs:["sl"],nr:[5,1,2,3],fc:21},{lngs:["he"],nr:[1,2,20,21],fc:22}],P={1:function(t){return Number(t>1)},2:function(t){return Number(1!=t)},3:function(t){return 0},4:function(t){return Number(t%10==1&&t%100!=11?0:t%10>=2&&t%10<=4&&(t%100<10||t%100>=20)?1:2)},5:function(t){return Number(0===t?0:1==t?1:2==t?2:t%100>=3&&t%100<=10?3:t%100>=11?4:5)},6:function(t){return Number(1==t?0:t>=2&&t<=4?1:2)},7:function(t){return Number(1==t?0:t%10>=2&&t%10<=4&&(t%100<10||t%100>=20)?1:2)},8:function(t){return Number(1==t?0:2==t?1:8!=t&&11!=t?2:3)},9:function(t){return Number(t>=2)},10:function(t){return Number(1==t?0:2==t?1:t<7?2:t<11?3:4)},11:function(t){return Number(1==t||11==t?0:2==t||12==t?1:t>2&&t<20?2:3)},12:function(t){return Number(t%10!=1||t%100==11)},13:function(t){return Number(0!==t)},14:function(t){return Number(1==t?0:2==t?1:3==t?2:3)},15:function(t){return Number(t%10==1&&t%100!=11?0:t%10>=2&&(t%100<10||t%100>=20)?1:2)},16:function(t){return Number(t%10==1&&t%100!=11?0:0!==t?1:2)},17:function(t){return Number(1==t||t%10==1?0:1)},18:function(t){return Number(0==t?0:1==t?1:2)},19:function(t){return Number(1==t?0:0===t||t%100>1&&t%100<11?1:t%100>10&&t%100<20?2:3)},20:function(t){return Number(1==t?0:0===t||t%100>0&&t%100<20?1:2)},21:function(t){return Number(t%100==1?1:t%100==2?2:t%100==3||t%100==4?3:0)},22:function(t){return Number(1===t?0:2===t?1:(t<0||t>10)&&t%10==0?2:3)}};var E=function(){function t(e){var n,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.languageUtils=e,this.options=r,this.logger=i.create("pluralResolver"),this.rules=(n={},k.forEach(function(t){t.lngs.forEach(function(e){n[e]={numbers:t.nr,plurals:P[t.fc]}})}),n)}return t.prototype.addRule=function(t,e){this.rules[t]=e},t.prototype.getRule=function(t){return this.rules[t]||this.rules[this.languageUtils.getLanguagePartFromCode(t)]},t.prototype.needsPlural=function(t){var e=this.getRule(t);return e&&e.numbers.length>1},t.prototype.getPluralFormsOfKey=function(t,e){var n=this,r=[],o=this.getRule(t);return o?(o.numbers.forEach(function(o){var i=n.getSuffix(t,o);r.push(""+e+i)}),r):r},t.prototype.getSuffix=function(t,e){var n=this,r=this.getRule(t);if(r){var o=r.noAbs?r.plurals(e):r.plurals(Math.abs(e)),i=r.numbers[o];this.options.simplifyPluralSuffix&&2===r.numbers.length&&1===r.numbers[0]&&(2===i?i="plural":1===i&&(i=""));var s=function(){return n.options.prepend&&i.toString()?n.options.prepend+i.toString():i.toString()};return"v1"===this.options.compatibilityJSON?1===i?"":"number"==typeof i?"_plural_"+i.toString():s():"v2"===this.options.compatibilityJSON&&2===r.numbers.length&&1===r.numbers[0]?s():this.options.simplifyPluralSuffix&&2===r.numbers.length&&1===r.numbers[0]?s():this.options.prepend&&o.toString()?this.options.prepend+o.toString():o.toString()}return this.logger.warn("no plural rule found for: "+t),""},t}(),F=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};var M=function(){function t(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t),this.logger=i.create("interpolator"),this.init(e,!0)}return t.prototype.init=function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};arguments[1]&&(this.options=t,this.format=t.interpolation&&t.interpolation.format||function(t){return t}),t.interpolation||(t.interpolation={escapeValue:!0});var e=t.interpolation;this.escape=void 0!==e.escape?e.escape:d,this.escapeValue=void 0===e.escapeValue||e.escapeValue,this.useRawValueToEscape=void 0!==e.useRawValueToEscape&&e.useRawValueToEscape,this.prefix=e.prefix?f(e.prefix):e.prefixEscaped||"{{",this.suffix=e.suffix?f(e.suffix):e.suffixEscaped||"}}",this.formatSeparator=e.formatSeparator?e.formatSeparator:e.formatSeparator||",",this.unescapePrefix=e.unescapeSuffix?"":e.unescapePrefix||"-",this.unescapeSuffix=this.unescapePrefix?"":e.unescapeSuffix||"",this.nestingPrefix=e.nestingPrefix?f(e.nestingPrefix):e.nestingPrefixEscaped||f("$t("),this.nestingSuffix=e.nestingSuffix?f(e.nestingSuffix):e.nestingSuffixEscaped||f(")"),this.maxReplaces=e.maxReplaces?e.maxReplaces:1e3,this.resetRegExp()},t.prototype.reset=function(){this.options&&this.init(this.options)},t.prototype.resetRegExp=function(){var t=this.prefix+"(.+?)"+this.suffix;this.regexp=new RegExp(t,"g");var e=""+this.prefix+this.unescapePrefix+"(.+?)"+this.unescapeSuffix+this.suffix;this.regexpUnescape=new RegExp(e,"g");var n=this.nestingPrefix+"(.+?)"+this.nestingSuffix;this.nestingRegexp=new RegExp(n,"g")},t.prototype.interpolate=function(t,e,n,r){var o=this,i=void 0,s=void 0,a=void 0;function u(t){return t.replace(/\$/g,"$$$$")}var l=function(t){if(t.indexOf(o.formatSeparator)<0)return p(e,t);var r=t.split(o.formatSeparator),i=r.shift().trim(),s=r.join(o.formatSeparator).trim();return o.format(p(e,i),s,n)};this.resetRegExp();var f=r&&r.missingInterpolationHandler||this.options.missingInterpolationHandler;for(a=0;(i=this.regexpUnescape.exec(t))&&(s=l(i[1].trim()),t=t.replace(i[0],s),this.regexpUnescape.lastIndex=0,!(++a>=this.maxReplaces)););for(a=0;i=this.regexp.exec(t);){if(void 0===(s=l(i[1].trim())))if("function"==typeof f){var h=f(t,i,r);s="string"==typeof h?h:""}else this.logger.warn("missed to pass in variable "+i[1]+" for interpolating "+t),s="";else"string"==typeof s||this.useRawValueToEscape||(s=c(s));if(s=this.escapeValue?u(this.escape(s)):u(s),t=t.replace(i[0],s),this.regexp.lastIndex=0,++a>=this.maxReplaces)break}return t},t.prototype.nest=function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=void 0,o=void 0,i=F({},n);function s(t,e){if(t.indexOf(",")<0)return t;var n=t.split(",");t=n.shift();var r=n.join(",");r=(r=this.interpolate(r,i)).replace(/'/g,'"');try{i=JSON.parse(r),e&&(i=F({},e,i))}catch(e){this.logger.error("failed parsing options string in nesting for key "+t,e)}return t}for(i.applyPostProcessor=!1;r=this.nestingRegexp.exec(t);){if((o=e(s.call(this,r[1].trim(),i),i))&&r[0]===t&&"string"!=typeof o)return o;"string"!=typeof o&&(o=c(o)),o||(this.logger.warn("missed to resolve "+r[1]+" for nesting "+t),o=""),t=t.replace(r[0],o),this.regexp.lastIndex=0}return t},t}(),R=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t},L=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var n=[],r=!0,o=!1,i=void 0;try{for(var s,a=t[Symbol.iterator]();!(r=(s=a.next()).done)&&(n.push(s.value),!e||n.length!==e);r=!0);}catch(t){o=!0,i=t}finally{try{!r&&a.return&&a.return()}finally{if(o)throw i}}return n}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();function N(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):function(t,e){for(var n=Object.getOwnPropertyNames(e),r=0;r<n.length;r++){var o=n[r],i=Object.getOwnPropertyDescriptor(e,o);i&&i.configurable&&void 0===t[o]&&Object.defineProperty(t,o,i)}}(t,e))}var C=function(t){function e(n,r,o){var s=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var a=function(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}(this,t.call(this));return a.backend=n,a.store=r,a.languageUtils=o.languageUtils,a.options=s,a.logger=i.create("backendConnector"),a.state={},a.queue=[],a.backend&&a.backend.init&&a.backend.init(o,s.backend,s),a}return N(e,t),e.prototype.queueLoad=function(t,e,n,r){var o=this,i=[],s=[],a=[],c=[];return t.forEach(function(t){var r=!0;e.forEach(function(e){var a=t+"|"+e;!n.reload&&o.store.hasResourceBundle(t,e)?o.state[a]=2:o.state[a]<0||(1===o.state[a]?s.indexOf(a)<0&&s.push(a):(o.state[a]=1,r=!1,s.indexOf(a)<0&&s.push(a),i.indexOf(a)<0&&i.push(a),c.indexOf(e)<0&&c.push(e)))}),r||a.push(t)}),(i.length||s.length)&&this.queue.push({pending:s,loaded:{},errors:[],callback:r}),{toLoad:i,pending:s,toLoadLanguages:a,toLoadNamespaces:c}},e.prototype.loaded=function(t,e,n){var r=t.split("|"),o=L(r,2),i=o[0],s=o[1];e&&this.emit("failedLoading",i,s,e),n&&this.store.addResourceBundle(i,s,n),this.state[t]=e?-1:2;var a={};this.queue.forEach(function(n){var r,o,c,l,p,f;r=n.loaded,o=s,l=u(r,[i],Object),p=l.obj,f=l.k,p[f]=p[f]||[],c&&(p[f]=p[f].concat(o)),c||p[f].push(o),function(t,e){for(var n=t.indexOf(e);-1!==n;)t.splice(n,1),n=t.indexOf(e)}(n.pending,t),e&&n.errors.push(e),0!==n.pending.length||n.done||(Object.keys(n.loaded).forEach(function(t){a[t]||(a[t]=[]),n.loaded[t].length&&n.loaded[t].forEach(function(e){a[t].indexOf(e)<0&&a[t].push(e)})}),n.done=!0,n.errors.length?n.callback(n.errors):n.callback())}),this.emit("loaded",a),this.queue=this.queue.filter(function(t){return!t.done})},e.prototype.read=function(t,e,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,o=this,i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:250,s=arguments[5];return t.length?this.backend[n](t,e,function(a,c){a&&c&&r<5?setTimeout(function(){o.read.call(o,t,e,n,r+1,2*i,s)},i):s(a,c)}):s(null,{})},e.prototype.prepareLoading=function(t,e){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},o=arguments[3];if(!this.backend)return this.logger.warn("No backend was added via i18next.use. Will not load resources."),o&&o();"string"==typeof t&&(t=this.languageUtils.toResolveHierarchy(t)),"string"==typeof e&&(e=[e]);var i=this.queueLoad(t,e,r,o);if(!i.toLoad.length)return i.pending.length||o(),null;i.toLoad.forEach(function(t){n.loadOne(t)})},e.prototype.load=function(t,e,n){this.prepareLoading(t,e,{},n)},e.prototype.reload=function(t,e,n){this.prepareLoading(t,e,{reload:!0},n)},e.prototype.loadOne=function(t){var e=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",r=t.split("|"),o=L(r,2),i=o[0],s=o[1];this.read(i,s,"read",null,null,function(r,o){r&&e.logger.warn(n+"loading namespace "+s+" for language "+i+" failed",r),!r&&o&&e.logger.log(n+"loaded namespace "+s+" for language "+i,o),e.loaded(t,r,o)})},e.prototype.saveMissing=function(t,e,n,r,o){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{};this.backend&&this.backend.create&&this.backend.create(t,e,n,r,null,R({},i,{isUpdate:o})),t&&t[0]&&this.store.addResource(t[0],e,n,r)},e}(s),T="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t};function A(t){return"string"==typeof t.ns&&(t.ns=[t.ns]),"string"==typeof t.fallbackLng&&(t.fallbackLng=[t.fallbackLng]),"string"==typeof t.fallbackNS&&(t.fallbackNS=[t.fallbackNS]),t.whitelist&&t.whitelist.indexOf("cimode")<0&&(t.whitelist=t.whitelist.concat(["cimode"])),t}var B="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},_=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t};function U(t,e){if(!t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!e||"object"!=typeof e&&"function"!=typeof e?t:e}function V(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function, not "+typeof e);t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,enumerable:!1,writable:!0,configurable:!0}}),e&&(Object.setPrototypeOf?Object.setPrototypeOf(t,e):function(t,e){for(var n=Object.getOwnPropertyNames(e),r=0;r<n.length;r++){var o=n[r],i=Object.getOwnPropertyDescriptor(e,o);i&&i.configurable&&void 0===t[o]&&Object.defineProperty(t,o,i)}}(t,e))}function H(){}var I=new(function(t){function e(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments[1];!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,e);var o=U(this,t.call(this));if(o.options=A(n),o.services={},o.logger=i,o.modules={external:[]},r&&!o.isInitialized&&!n.isClone){if(!o.options.initImmediate)return o.init(n,r),U(o,o);setTimeout(function(){o.init(n,r)},0)}return o}return V(e,t),e.prototype.init=function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments[1];function r(t){return t?"function"==typeof t?new t:t:null}if("function"==typeof e&&(n=e,e={}),this.options=_({},{debug:!1,initImmediate:!0,ns:["translation"],defaultNS:["translation"],fallbackLng:["dev"],fallbackNS:!1,whitelist:!1,nonExplicitWhitelist:!1,load:"all",preload:!1,simplifyPluralSuffix:!0,keySeparator:".",nsSeparator:":",pluralSeparator:"_",contextSeparator:"_",partialBundledLanguages:!1,saveMissing:!1,updateMissing:!1,saveMissingTo:"fallback",saveMissingPlurals:!0,missingKeyHandler:!1,missingInterpolationHandler:!1,postProcess:!1,returnNull:!0,returnEmptyString:!0,returnObjects:!1,joinArrays:!1,returnedObjectHandler:function(){},parseMissingKeyHandler:!1,appendNamespaceToMissingKey:!1,appendNamespaceToCIMode:!1,overloadTranslationOptionHandler:function(t){var e={};if("object"===T(t[1])&&(e=t[1]),"string"==typeof t[1]&&(e.defaultValue=t[1]),"string"==typeof t[2]&&(e.tDescription=t[2]),"object"===T(t[2])||"object"===T(t[3])){var n=t[3]||t[2];Object.keys(n).forEach(function(t){e[t]=n[t]})}return e},interpolation:{escapeValue:!0,format:function(t,e,n){return t},prefix:"{{",suffix:"}}",formatSeparator:",",unescapePrefix:"-",nestingPrefix:"$t(",nestingSuffix:")",maxReplaces:1e3}},this.options,A(e)),this.format=this.options.interpolation.format,n||(n=H),!this.options.isClone){this.modules.logger?i.init(r(this.modules.logger),this.options):i.init(null,this.options);var o=new S(this.options);this.store=new y(this.options.resources,this.options);var s=this.services;s.logger=i,s.resourceStore=this.store,s.languageUtils=o,s.pluralResolver=new E(o,{prepend:this.options.pluralSeparator,compatibilityJSON:this.options.compatibilityJSON,simplifyPluralSuffix:this.options.simplifyPluralSuffix}),s.interpolator=new M(this.options),s.backendConnector=new C(r(this.modules.backend),s.resourceStore,s,this.options),s.backendConnector.on("*",function(e){for(var n=arguments.length,r=Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];t.emit.apply(t,[e].concat(r))}),this.modules.languageDetector&&(s.languageDetector=r(this.modules.languageDetector),s.languageDetector.init(s,this.options.detection,this.options)),this.modules.i18nFormat&&(s.i18nFormat=r(this.modules.i18nFormat),s.i18nFormat.init&&s.i18nFormat.init(this)),this.translator=new x(this.services,this.options),this.translator.on("*",function(e){for(var n=arguments.length,r=Array(n>1?n-1:0),o=1;o<n;o++)r[o-1]=arguments[o];t.emit.apply(t,[e].concat(r))}),this.modules.external.forEach(function(e){e.init&&e.init(t)})}["getResource","addResource","addResources","addResourceBundle","removeResourceBundle","hasResourceBundle","getResourceBundle","getDataByLanguage"].forEach(function(e){t[e]=function(){var n;return(n=t.store)[e].apply(n,arguments)}});var c=a(),u=function(){t.changeLanguage(t.options.lng,function(e,r){t.isInitialized=!0,t.logger.log("initialized",t.options),t.emit("initialized",t.options),c.resolve(r),n(e,r)})};return this.options.resources||!this.options.initImmediate?u():setTimeout(u,0),c},e.prototype.loadResources=function(){var t=this,e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:H;if(!this.options.resources||this.options.partialBundledLanguages){if(this.language&&"cimode"===this.language.toLowerCase())return e();var n=[],r=function(e){e&&t.services.languageUtils.toResolveHierarchy(e).forEach(function(t){n.indexOf(t)<0&&n.push(t)})};if(this.language)r(this.language);else this.services.languageUtils.getFallbackCodes(this.options.fallbackLng).forEach(function(t){return r(t)});this.options.preload&&this.options.preload.forEach(function(t){return r(t)}),this.services.backendConnector.load(n,this.options.ns,e)}else e(null)},e.prototype.reloadResources=function(t,e,n){var r=a();return t||(t=this.languages),e||(e=this.options.ns),n||(n=H),this.services.backendConnector.reload(t,e,function(){r.resolve(),n(null)}),r},e.prototype.use=function(t){return"backend"===t.type&&(this.modules.backend=t),("logger"===t.type||t.log&&t.warn&&t.error)&&(this.modules.logger=t),"languageDetector"===t.type&&(this.modules.languageDetector=t),"i18nFormat"===t.type&&(this.modules.i18nFormat=t),"postProcessor"===t.type&&v.addPostProcessor(t),"3rdParty"===t.type&&this.modules.external.push(t),this},e.prototype.changeLanguage=function(t,e){var n=this,r=a(),o=function(t){t&&(n.language=t,n.languages=n.services.languageUtils.toResolveHierarchy(t),n.translator.language||n.translator.changeLanguage(t),n.services.languageDetector&&n.services.languageDetector.cacheUserLanguage(t)),n.loadResources(function(o){!function(t,o){n.translator.changeLanguage(o),o&&(n.emit("languageChanged",o),n.logger.log("languageChanged",o)),r.resolve(function(){return n.t.apply(n,arguments)}),e&&e(t,function(){return n.t.apply(n,arguments)})}(o,t)})};return t||!this.services.languageDetector||this.services.languageDetector.async?!t&&this.services.languageDetector&&this.services.languageDetector.async?this.services.languageDetector.detect(o):o(t):o(this.services.languageDetector.detect()),r},e.prototype.getFixedT=function(t,e){var n=this,r=function t(e,r){for(var o=arguments.length,i=Array(o>2?o-2:0),s=2;s<o;s++)i[s-2]=arguments[s];var a=_({},r);return"object"!==(void 0===r?"undefined":B(r))&&(a=n.options.overloadTranslationOptionHandler([e,r].concat(i))),a.lng=a.lng||t.lng,a.lngs=a.lngs||t.lngs,a.ns=a.ns||t.ns,n.t(e,a)};return"string"==typeof t?r.lng=t:r.lngs=t,r.ns=e,r},e.prototype.t=function(){var t;return this.translator&&(t=this.translator).translate.apply(t,arguments)},e.prototype.exists=function(){var t;return this.translator&&(t=this.translator).exists.apply(t,arguments)},e.prototype.setDefaultNamespace=function(t){this.options.defaultNS=t},e.prototype.loadNamespaces=function(t,e){var n=this,r=a();return this.options.ns?("string"==typeof t&&(t=[t]),t.forEach(function(t){n.options.ns.indexOf(t)<0&&n.options.ns.push(t)}),this.loadResources(function(t){r.resolve(),e&&e(t)}),r):(e&&e(),Promise.resolve())},e.prototype.loadLanguages=function(t,e){var n=a();"string"==typeof t&&(t=[t]);var r=this.options.preload||[],o=t.filter(function(t){return r.indexOf(t)<0});return o.length?(this.options.preload=r.concat(o),this.loadResources(function(t){n.resolve(),e&&e(t)}),n):(e&&e(),Promise.resolve())},e.prototype.dir=function(t){if(t||(t=this.languages&&this.languages.length>0?this.languages[0]:this.language),!t)return"rtl";return["ar","shu","sqr","ssh","xaa","yhd","yud","aao","abh","abv","acm","acq","acw","acx","acy","adf","ads","aeb","aec","afb","ajp","apc","apd","arb","arq","ars","ary","arz","auz","avl","ayh","ayl","ayn","ayp","bbz","pga","he","iw","ps","pbt","pbu","pst","prp","prd","ur","ydd","yds","yih","ji","yi","hbo","men","xmn","fa","jpr","peo","pes","prs","dv","sam"].indexOf(this.services.languageUtils.getLanguagePartFromCode(t))>=0?"rtl":"ltr"},e.prototype.createInstance=function(){return new e(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},arguments[1])},e.prototype.cloneInstance=function(){var t=this,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:H,o=_({},this.options,n,{isClone:!0}),i=new e(o);return["store","services","language"].forEach(function(e){i[e]=t[e]}),i.translator=new x(i.services,i.options),i.translator.on("*",function(t){for(var e=arguments.length,n=Array(e>1?e-1:0),r=1;r<e;r++)n[r-1]=arguments[r];i.emit.apply(i,[t].concat(n))}),i.init(o,r),i.translator.options=i.options,i},e}(s));n.d(e,"changeLanguage",function(){return D}),n.d(e,"cloneInstance",function(){return K}),n.d(e,"createInstance",function(){return z}),n.d(e,"dir",function(){return W}),n.d(e,"exists",function(){return q}),n.d(e,"getFixedT",function(){return $}),n.d(e,"init",function(){return J}),n.d(e,"loadLanguages",function(){return Y}),n.d(e,"loadNamespaces",function(){return G}),n.d(e,"loadResources",function(){return X}),n.d(e,"off",function(){return Z}),n.d(e,"on",function(){return Q}),n.d(e,"setDefaultNamespace",function(){return tt}),n.d(e,"t",function(){return et}),n.d(e,"use",function(){return nt});e.default=I;var D=I.changeLanguage.bind(I),K=I.cloneInstance.bind(I),z=I.createInstance.bind(I),W=I.dir.bind(I),q=I.exists.bind(I),$=I.getFixedT.bind(I),J=I.init.bind(I),Y=I.loadLanguages.bind(I),G=I.loadNamespaces.bind(I),X=I.loadResources.bind(I),Z=I.off.bind(I),Q=I.on.bind(I),tt=I.setDefaultNamespace.bind(I),et=I.t.bind(I),nt=I.use.bind(I)},423:function(t,e,n){"use strict";n.r(e);var r=n(3);const o=/version\/(\d+(\.?_?\d+)+)/i;var i=[{test:[/opera/i],describe(t){const e={name:"Opera"},n=Object(r.getFirstMatch)(o,t)||Object(r.getFirstMatch)(/(?:opera)[\s\/](\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/opr\/|opios/i],describe(t){const e={name:"Opera"},n=Object(r.getFirstMatch)(/(?:opr|opios)[\s\/](\S+)/i,t)||Object(r.getFirstMatch)(o,t);return n&&(e.version=n),e}},{test:[/SamsungBrowser/i],describe(t){const e={name:"Samsung Internet for Android"},n=Object(r.getFirstMatch)(o,t)||Object(r.getFirstMatch)(/(?:SamsungBrowser)[\s\/](\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/Whale/i],describe(t){const e={name:"NAVER Whale Browser"},n=Object(r.getFirstMatch)(o,t)||Object(r.getFirstMatch)(/(?:whale)[\s\/](\d+(?:\.\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/MZBrowser/i],describe(t){const e={name:"MZ Browser"},n=Object(r.getFirstMatch)(/(?:MZBrowser)[\s\/](\d+(?:\.\d+)+)/i,t)||Object(r.getFirstMatch)(o,t);return n&&(e.version=n),e}},{test:[/focus/i],describe(t){const e={name:"Focus"},n=Object(r.getFirstMatch)(/(?:focus)[\s\/](\d+(?:\.\d+)+)/i,t)||Object(r.getFirstMatch)(o,t);return n&&(e.version=n),e}},{test:[/swing/i],describe(t){const e={name:"Swing"},n=Object(r.getFirstMatch)(/(?:swing)[\s\/](\d+(?:\.\d+)+)/i,t)||Object(r.getFirstMatch)(o,t);return n&&(e.version=n),e}},{test:[/coast/i],describe(t){const e={name:"Opera Coast"},n=Object(r.getFirstMatch)(o,t)||Object(r.getFirstMatch)(/(?:coast)[\s\/](\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/yabrowser/i],describe(t){const e={name:"Yandex Browser"},n=Object(r.getFirstMatch)(o,t)||Object(r.getFirstMatch)(/(?:yabrowser)[\s\/](\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/ucbrowser/i],describe(t){const e={name:"UC Browser"},n=Object(r.getFirstMatch)(o,t)||Object(r.getFirstMatch)(/(?:ucbrowser)[\s\/](\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/Maxthon|mxios/i],describe(t){const e={name:"Maxthon"},n=Object(r.getFirstMatch)(o,t)||Object(r.getFirstMatch)(/(?:Maxthon|mxios)[\s\/](\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/epiphany/i],describe(t){const e={name:"Epiphany"},n=Object(r.getFirstMatch)(o,t)||Object(r.getFirstMatch)(/(?:epiphany)[\s\/](\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/puffin/i],describe(t){const e={name:"Puffin"},n=Object(r.getFirstMatch)(o,t)||Object(r.getFirstMatch)(/(?:puffin)[\s\/](\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/sleipnir/i],describe(t){const e={name:"Sleipnir"},n=Object(r.getFirstMatch)(o,t)||Object(r.getFirstMatch)(/(?:sleipnir)[\s\/](\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/k-meleon/i],describe(t){const e={name:"K-Meleon"},n=Object(r.getFirstMatch)(o,t)||Object(r.getFirstMatch)(/(?:k-meleon)[\s\/](\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/msie|trident/i],describe(t){const e={name:"Internet Explorer"},n=Object(r.getFirstMatch)(/(?:msie |rv:)(\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/edg([ea]|ios)/i],describe(t){const e={name:"Microsoft Edge"},n=Object(r.getSecondMatch)(/edg([ea]|ios)\/(\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/vivaldi/i],describe(t){const e={name:"Vivaldi"},n=Object(r.getFirstMatch)(/vivaldi\/(\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/seamonkey/i],describe(t){const e={name:"SeaMonkey"},n=Object(r.getFirstMatch)(/seamonkey\/(\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/sailfish/i],describe(t){const e={name:"Sailfish"},n=Object(r.getFirstMatch)(/sailfish\s?browser\/(\d+(\.\d+)?)/i,t);return n&&(e.version=n),e}},{test:[/silk/i],describe(t){const e={name:"Amazon Silk"},n=Object(r.getFirstMatch)(/silk\/(\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/phantom/i],describe(t){const e={name:"PhantomJS"},n=Object(r.getFirstMatch)(/phantomjs\/(\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/slimerjs/i],describe(t){const e={name:"SlimerJS"},n=Object(r.getFirstMatch)(/slimerjs\/(\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe(t){const e={name:"BlackBerry"},n=Object(r.getFirstMatch)(o,t)||Object(r.getFirstMatch)(/blackberry[\d]+\/(\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/(web|hpw)[o0]s/i],describe(t){const e={name:"WebOS Browser"},n=Object(r.getFirstMatch)(o,t)||Object(r.getFirstMatch)(/w(?:eb)?[o0]sbrowser\/(\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/bada/i],describe(t){const e={name:"Bada"},n=Object(r.getFirstMatch)(/dolfin\/(\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/tizen/i],describe(t){const e={name:"Tizen"},n=Object(r.getFirstMatch)(/(?:tizen\s?)?browser\/(\d+(\.?_?\d+)+)/i,t)||Object(r.getFirstMatch)(o,t);return n&&(e.version=n),e}},{test:[/qupzilla/i],describe(t){const e={name:"QupZilla"},n=Object(r.getFirstMatch)(/(?:qupzilla)[\s\/](\d+(\.?_?\d+)+)/i,t)||Object(r.getFirstMatch)(o,t);return n&&(e.version=n),e}},{test:[/firefox|iceweasel|fxios/i],describe(t){const e={name:"Firefox"},n=Object(r.getFirstMatch)(/(?:firefox|iceweasel|fxios)[\s\/](\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/chromium/i],describe(t){const e={name:"Chromium"},n=Object(r.getFirstMatch)(/(?:chromium)[\s\/](\d+(\.?_?\d+)+)/i,t)||Object(r.getFirstMatch)(o,t);return n&&(e.version=n),e}},{test:[/chrome|crios|crmo/i],describe(t){const e={name:"Chrome"},n=Object(r.getFirstMatch)(/(?:chrome|crios|crmo)\/(\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test(t){const e=!t.test(/like android/i),n=t.test(/android/i);return e&&n},describe(t){const e={name:"Android Browser"},n=Object(r.getFirstMatch)(o,t);return n&&(e.version=n),e}},{test:[/safari|applewebkit/i],describe(t){const e={name:"Safari"},n=Object(r.getFirstMatch)(o,t);return n&&(e.version=n),e}},{test:[/googlebot/i],describe(t){const e={name:"Googlebot"},n=Object(r.getFirstMatch)(/googlebot\/(\d+(\.\d+))/i,t)||Object(r.getFirstMatch)(o,t);return n&&(e.version=n),e}},{test:[/.*/i],describe:t=>({name:Object(r.getFirstMatch)(/^(.*)\/(.*) /,t),version:Object(r.getSecondMatch)(/^(.*)\/(.*) /,t)})}],s=[{test:[/windows phone/i],describe:t=>({name:"Windows Phone",version:Object(r.getFirstMatch)(/windows phone (?:os)?\s?(\d+(\.\d+)*)/i,t)})},{test:[/windows/i],describe(t){const e=Object(r.getFirstMatch)(/Windows ((NT|XP)( \d\d?.\d)?)/i,t);return{name:"Windows",version:e,versionName:Object(r.getWindowsVersionName)(e)}}},{test:[/macintosh/i],describe:t=>({name:"macOS",version:Object(r.getFirstMatch)(/mac os x (\d+(\.?_?\d+)+)/i,t).replace(/[_\s]/g,".")})},{test:[/(ipod|iphone|ipad)/i],describe:t=>({name:"iOS",version:Object(r.getFirstMatch)(/os (\d+([_\s]\d+)*) like mac os x/i,t).replace(/[_\s]/g,".")})},{test(t){const e=!t.test(/like android/i),n=t.test(/android/i);return e&&n},describe:t=>({name:"Android",version:Object(r.getFirstMatch)(/android[\s\/-](\d+(\.\d+)*)/i,t)})},{test:[/(web|hpw)[o0]s/i],describe(t){const e=Object(r.getFirstMatch)(/(?:web|hpw)[o0]s\/(\d+(\.\d+)*)/i,t),n={name:"WebOS"};return e&&e.length&&(n.version=e),n}},{test:[/blackberry|\bbb\d+/i,/rim\stablet/i],describe:t=>({name:"BlackBerry",version:Object(r.getFirstMatch)(/rim\stablet\sos\s(\d+(\.\d+)*)/i,t)||Object(r.getFirstMatch)(/blackberry\d+\/(\d+([_\s]\d+)*)/i,t)||Object(r.getFirstMatch)(/\bbb(\d+)/i,t)})},{test:[/bada/i],describe:t=>({name:"Bada",version:Object(r.getFirstMatch)(/bada\/(\d+(\.\d+)*)/i,t)})},{test:[/tizen/i],describe:t=>({name:"Tizen",version:Object(r.getFirstMatch)(/tizen[\/\s](\d+(\.\d+)*)/i,t)})},{test:[/linux/i],describe:()=>({name:"Linux"})}];const a="tablet",c="mobile",u="desktop";var l=[{test:[/nexus\s*(?:7|8|9|10).*/i],describe:()=>({type:a,vendor:"Nexus"})},{test:[/ipad/i],describe:()=>({type:a,vendor:"Apple",model:"iPad"})},{test:[/kftt build/i],describe:()=>({type:a,vendor:"Amazon",model:"Kindle Fire HD 7"})},{test:[/silk/i],describe:()=>({type:a,vendor:"Amazon"})},{test:[/tablet/i],describe:()=>({type:a})},{test(t){const e=t.test(/ipod|iphone/i),n=t.test(/like (ipod|iphone)/i);return e&&!n},describe(t){const e=Object(r.getFirstMatch)(/(ipod|iphone)/i,t);return{type:c,vendor:"Apple",model:e}}},{test:[/nexus\s*[0-6].*/i,/galaxy nexus/i],describe:()=>({type:c,vendor:"Nexus"})},{test:[/[^-]mobi/i],describe:()=>({type:c})},{test:t=>"blackberry"===t.getBrowserName(!0),describe:()=>({type:c,vendor:"BlackBerry"})},{test:t=>"bada"===t.getBrowserName(!0),describe:()=>({type:c})},{test:t=>"windows phone"===t.getBrowserName(),describe:()=>({type:c,vendor:"Microsoft"})},{test(t){const e=Number(String(t.getOSVersion()).split(".")[0]);return"android"===t.getOSName(!0)&&e>=3},describe:()=>({type:a})},{test:t=>"android"===t.getOSName(!0),describe:()=>({type:c})},{test:t=>"macos"===t.getOSName(!0),describe:()=>({type:u,vendor:"Apple"})},{test:t=>"windows"===t.getOSName(!0),describe:()=>({type:u})},{test:t=>"linux"===t.getOSName(!0),describe:()=>({type:u})}],p=[{test:t=>"microsoft edge"===t.getBrowserName(!0),describe:t=>({name:"EdgeHTML",version:Object(r.getFirstMatch)(/edge\/(\d+(\.?_?\d+)+)/i,t)})},{test:[/trident/i],describe(t){const e={name:"Trident"},n=Object(r.getFirstMatch)(/trident\/(\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:t=>t.test(/presto/i),describe(t){const e={name:"Presto"},n=Object(r.getFirstMatch)(/presto\/(\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test(t){const e=t.test(/gecko/i),n=t.test(/like gecko/i);return e&&!n},describe(t){const e={name:"Gecko"},n=Object(r.getFirstMatch)(/gecko\/(\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}},{test:[/(apple)?webkit\/537\.36/i],describe:()=>({name:"Blink"})},{test:[/(apple)?webkit/i],describe(t){const e={name:"WebKit"},n=Object(r.getFirstMatch)(/webkit\/(\d+(\.?_?\d+)+)/i,t);return n&&(e.version=n),e}}];var f=class{constructor(t,e=!1){if(null==t||""===t)throw new Error("UserAgent parameter can't be empty");this._ua=t,this.parsedResult={},!0!==e&&this.parse()}getUA(){return this._ua}test(t){return t.test(this._ua)}parseBrowser(){this.parsedResult.browser={};const t=i.find(t=>{if("function"==typeof t.test)return t.test(this);if(t.test instanceof Array)return t.test.some(t=>this.test(t));throw new Error("Browser's test function is not valid")});return t&&(this.parsedResult.browser=t.describe(this.getUA())),this.parsedResult.browser}getBrowser(){return this.parsedResult.browser?this.parsedResult.browser:this.parseBrowser()}getBrowserName(t){return t?String(this.getBrowser().name).toLowerCase()||"":this.getBrowser().name||""}getBrowserVersion(){return this.getBrowser().version}getOS(){return this.parsedResult.os?this.parsedResult.os:this.parseOS()}parseOS(){this.parsedResult.os={};const t=s.find(t=>{if("function"==typeof t.test)return t.test(this);if(t.test instanceof Array)return t.test.some(t=>this.test(t));throw new Error("Browser's test function is not valid")});return t&&(this.parsedResult.os=t.describe(this.getUA())),this.parsedResult.os}getOSName(t){const{name:e}=this.getOS();return t?String(e).toLowerCase()||"":e||""}getOSVersion(){return this.getOS().version}getPlatform(){return this.parsedResult.platform?this.parsedResult.platform:this.parsePlatform()}getPlatformType(t=!1){const{type:e}=this.getPlatform();return t?String(e).toLowerCase()||"":e||""}parsePlatform(){this.parsedResult.platform={};const t=l.find(t=>{if("function"==typeof t.test)return t.test(this);if(t.test instanceof Array)return t.test.some(t=>this.test(t));throw new Error("Browser's test function is not valid")});return t&&(this.parsedResult.platform=t.describe(this.getUA())),this.parsedResult.platform}getEngine(){return this.parsedResult.engine?this.parsedResult.engine:this.parseEngine()}parseEngine(){this.parsedResult.engine={};const t=p.find(t=>{if("function"==typeof t.test)return t.test(this);if(t.test instanceof Array)return t.test.some(t=>this.test(t));throw new Error("Browser's test function is not valid")});return t&&(this.parsedResult.engine=t.describe(this.getUA())),this.parsedResult.engine}parse(){return this.parseBrowser(),this.parseOS(),this.parsePlatform(),this.parseEngine(),this}getResult(){return this.parsedResult}satisfies(t){const e={};let n=0;const r={};let o=0;if(Object.keys(t).forEach(i=>{const s=t[i];"string"==typeof s?(r[i]=s,o+=1):"object"==typeof s&&(e[i]=s,n+=1)}),n>0){const t=Object.keys(e),n=t.find(t=>this.isOS(t));if(n){const t=this.satisfies(e[n]);if(void 0!==t)return t}const r=t.find(t=>this.isPlatform(t));if(r){const t=this.satisfies(e[r]);if(void 0!==t)return t}}if(o>0){const t=Object.keys(r).find(t=>this.isBrowser(t));if(void 0!==t)return this.compareVersion(r[t])}}isBrowser(t){return this.getBrowserName(!0)===String(t).toLowerCase()}compareVersion(t){let e=0,n=t,o=!1;const i=this.getBrowserVersion();if("string"==typeof i)return">"===t[0]?(e=1,n=t.substr(1)):"<"===t[0]?(e=-1,n=t.substr(1)):"="===t[0]?n=t.substr(1):"~"===t[0]&&(o=!0,n=t.substr(1)),Object(r.compareVersions)(i,n,o)===e}isOS(t){return this.getOSName(!0)===String(t).toLowerCase()}isPlatform(t){return this.getPlatformType(!0)===String(t).toLowerCase()}is(t){return this.isBrowser(t)||this.isOS(t)||this.isPlatform(t)}some(t=[]){return t.some(t=>this.is(t))}};
/*!
 * Bowser - a browser detector
 * https://github.com/lancedikson/bowser
 * MIT License | (c) Dustin Diaz 2012-2015
 * MIT License | (c) Denis Demchenko 2015-2017
 */e.default=class{static getParser(t,e=!1){if("string"!=typeof t)throw new Error("UserAgent should be a string");return new f(t,e)}static parse(t){return new f(t).getResult()}}},43:function(t,e){function n(t){return(n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function r(e){return"function"==typeof Symbol&&"symbol"===n(Symbol.iterator)?t.exports=r=function(t){return n(t)}:t.exports=r=function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":n(t)},r(e)}t.exports=r},47:function(t,e){t.exports=function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}},58:function(t,e,n){"use strict";function r(){return(r=Object.assign||function(t){for(var e=1;e<arguments.length;e++){var n=arguments[e];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(t[r]=n[r])}return t}).apply(this,arguments)}n.d(e,"a",function(){return r})},59:function(t,e,n){var r=n(402);t.exports=function(t,e){if(null==t)return{};var n,o,i=r(t,e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(t);for(o=0;o<s.length;o++)n=s[o],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(i[n]=t[n])}return i}},66:function(t,e,n){"use strict";function r(t,e){if(null==t)return{};var n,r,o={},i=Object.keys(t);for(r=0;r<i.length;r++)n=i[r],e.indexOf(n)>=0||(o[n]=t[n]);return o}n.d(e,"a",function(){return r})},90:function(t,e,n){"use strict";function r(t,e){t.prototype=Object.create(e.prototype),t.prototype.constructor=t,t.__proto__=e}n.d(e,"a",function(){return r})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L25vZGVfbW9kdWxlcy93YXJuaW5nL2Jyb3dzZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvUGF0aFV0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzL0xvY2F0aW9uVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvRE9NVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvY3JlYXRlQnJvd3Nlckhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvY3JlYXRlSGFzaEhpc3RvcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hpc3RvcnkvZXMvY3JlYXRlTWVtb3J5SGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MvZGlzdC9ob2lzdC1ub24tcmVhY3Qtc3RhdGljcy5janMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvc2xpY2VkVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHRtbC1wYXJzZS1zdHJpbmdpZnkyL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvb2JqZWN0U3ByZWFkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NsYXNzQ2FsbENoZWNrLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2dldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2luaGVyaXRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ib3dzZXIvc3JjL3V0aWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2FycmF5V2l0aEhvbGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2l0ZXJhYmxlVG9BcnJheUxpbWl0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL25vbkl0ZXJhYmxlUmVzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2RlZmluZVByb3BlcnR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL3NldFByb3RvdHlwZU9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9odG1sLXBhcnNlLXN0cmluZ2lmeTIvbGliL3BhcnNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9odG1sLXBhcnNlLXN0cmluZ2lmeTIvbGliL3BhcnNlLXRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaHRtbC1wYXJzZS1zdHJpbmdpZnkyL2xpYi9zdHJpbmdpZnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2kxOG5leHQvZGlzdC9lcy9sb2dnZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2kxOG5leHQvZGlzdC9lcy9FdmVudEVtaXR0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2kxOG5leHQvZGlzdC9lcy91dGlscy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaTE4bmV4dC9kaXN0L2VzL1Jlc291cmNlU3RvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2kxOG5leHQvZGlzdC9lcy9wb3N0UHJvY2Vzc29yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9pMThuZXh0L2Rpc3QvZXMvVHJhbnNsYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaTE4bmV4dC9kaXN0L2VzL0xhbmd1YWdlVXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2kxOG5leHQvZGlzdC9lcy9QbHVyYWxSZXNvbHZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaTE4bmV4dC9kaXN0L2VzL0ludGVycG9sYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaTE4bmV4dC9kaXN0L2VzL0JhY2tlbmRDb25uZWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2kxOG5leHQvZGlzdC9lcy9kZWZhdWx0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaTE4bmV4dC9kaXN0L2VzL2kxOG5leHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2kxOG5leHQvZGlzdC9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvYm93c2VyL3NyYy9wYXJzZXItYnJvd3NlcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jvd3Nlci9zcmMvcGFyc2VyLW9zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ib3dzZXIvc3JjL3BhcnNlci1wbGF0Zm9ybXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jvd3Nlci9zcmMvcGFyc2VyLWVuZ2luZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Jvd3Nlci9zcmMvcGFyc2VyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9ib3dzZXIvc3JjL2Jvd3Nlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy90eXBlb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvYXNzZXJ0VGhpc0luaXRpYWxpemVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlLmpzIl0sIm5hbWVzIjpbIl9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJzZWxmIiwiUmVmZXJlbmNlRXJyb3IiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwiZCIsIl9fd2VicGFja19leHBvcnRzX18iLCJtb2R1bGUiLCJhZGRMZWFkaW5nU2xhc2giLCJwYXRoIiwic3RyaXBMZWFkaW5nU2xhc2giLCJoYXNCYXNlbmFtZSIsInByZWZpeCIsIlJlZ0V4cCIsInRlc3QiLCJzdHJpcEJhc2VuYW1lIiwic3RyaXBUcmFpbGluZ1NsYXNoIiwiY3JlYXRlUGF0aCIsImxvY2F0aW9uIiwicGF0aG5hbWUiLCJzZWFyY2giLCJoYXNoIiwiX2V4dGVuZHMiLCJPYmplY3QiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwia2V5IiwiY3JlYXRlTG9jYXRpb24iLCJzdGF0ZSIsImN1cnJlbnRMb2NhdGlvbiIsImhhc2hJbmRleCIsInNlYXJjaEluZGV4IiwicGFyc2VQYXRoIiwidW5kZWZpbmVkIiwiZGVjb2RlVVJJIiwiZSIsIlVSSUVycm9yIiwicmVzb2x2ZVBhdGhuYW1lIiwibG9jYXRpb25zQXJlRXF1YWwiLCJhIiwiYiIsInZhbHVlRXF1YWwiLCJlc19jcmVhdGVUcmFuc2l0aW9uTWFuYWdlciIsInByb21wdCIsImxpc3RlbmVycyIsInNldFByb21wdCIsIm5leHRQcm9tcHQiLCJ3YXJuaW5nIiwiY29uZmlybVRyYW5zaXRpb25UbyIsImFjdGlvbiIsImdldFVzZXJDb25maXJtYXRpb24iLCJjYWxsYmFjayIsInJlc3VsdCIsImFwcGVuZExpc3RlbmVyIiwiZm4iLCJpc0FjdGl2ZSIsImxpc3RlbmVyIiwiZmlsdGVyIiwiaXRlbSIsIm5vdGlmeUxpc3RlbmVycyIsIl9sZW4iLCJhcmdzIiwiQXJyYXkiLCJfa2V5IiwiY2FuVXNlRE9NIiwid2luZG93IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsIm5vZGUiLCJldmVudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJnZXRDb25maXJtYXRpb24iLCJtZXNzYWdlIiwiX3R5cGVvZiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwib2JqIiwiZ2V0SGlzdG9yeVN0YXRlIiwiZXNfY3JlYXRlQnJvd3Nlckhpc3RvcnkiLCJwcm9wcyIsImludmFyaWFudCIsInVhIiwiZ2xvYmFsSGlzdG9yeSIsImhpc3RvcnkiLCJjYW5Vc2VIaXN0b3J5IiwidXNlckFnZW50IiwibmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIiLCJfcHJvcHMkZm9yY2VSZWZyZXNoIiwiZm9yY2VSZWZyZXNoIiwiX3Byb3BzJGdldFVzZXJDb25maXJtIiwiX3Byb3BzJGtleUxlbmd0aCIsImtleUxlbmd0aCIsImJhc2VuYW1lIiwiZ2V0RE9NTG9jYXRpb24iLCJoaXN0b3J5U3RhdGUiLCJfcmVmIiwiX3dpbmRvdyRsb2NhdGlvbiIsImNyZWF0ZUtleSIsIk1hdGgiLCJ0cmFuc2l0aW9uTWFuYWdlciIsImNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIiwic2V0U3RhdGUiLCJuZXh0U3RhdGUiLCJoYW5kbGVQb3BTdGF0ZSIsIm5hdmlnYXRvciIsImlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQiLCJoYW5kbGVQb3AiLCJoYW5kbGVIYXNoQ2hhbmdlIiwiZm9yY2VOZXh0UG9wIiwib2siLCJyZXZlcnRQb3AiLCJmcm9tTG9jYXRpb24iLCJ0b0xvY2F0aW9uIiwidG9JbmRleCIsImFsbEtleXMiLCJmcm9tSW5kZXgiLCJkZWx0YSIsImdvIiwiaW5pdGlhbExvY2F0aW9uIiwiY3JlYXRlSHJlZiIsIm4iLCJsaXN0ZW5lckNvdW50IiwiY2hlY2tET01MaXN0ZW5lcnMiLCJpc0Jsb2NrZWQiLCJwdXNoIiwiaHJlZiIsInByZXZJbmRleCIsIm5leHRLZXlzIiwicmVwbGFjZSIsImdvQmFjayIsImdvRm9yd2FyZCIsImJsb2NrIiwidW5ibG9jayIsImxpc3RlbiIsInVubGlzdGVuIiwiSGFzaFBhdGhDb2RlcnMiLCJoYXNoYmFuZyIsImVuY29kZVBhdGgiLCJkZWNvZGVQYXRoIiwibm9zbGFzaCIsInNsYXNoIiwiZ2V0SGFzaFBhdGgiLCJyZXBsYWNlSGFzaFBhdGgiLCJlc19jcmVhdGVIYXNoSGlzdG9yeSIsImNhbkdvV2l0aG91dFJlbG9hZCIsIl9wcm9wcyRoYXNoVHlwZSIsImhhc2hUeXBlIiwiX0hhc2hQYXRoQ29kZXJzJGhhc2hUIiwiaWdub3JlUGF0aCIsImVuY29kZWRQYXRoIiwicHJldkxvY2F0aW9uIiwiYWxsUGF0aHMiLCJwdXNoSGFzaFBhdGgiLCJuZXh0UGF0aHMiLCJjbGFtcCIsImxvd2VyQm91bmQiLCJ1cHBlckJvdW5kIiwiZXNfY3JlYXRlTWVtb3J5SGlzdG9yeSIsIl9wcm9wcyRpbml0aWFsRW50cmllcyIsImluaXRpYWxFbnRyaWVzIiwiX3Byb3BzJGluaXRpYWxJbmRleCIsImluaXRpYWxJbmRleCIsImluZGV4IiwiZW50cmllcyIsIm1hcCIsImVudHJ5IiwibmV4dEluZGV4IiwibmV4dEVudHJpZXMiLCJjYW5HbyIsIkxvY2F0aW9uVXRpbHNfY3JlYXRlTG9jYXRpb24iLCJMb2NhdGlvblV0aWxzX2xvY2F0aW9uc0FyZUVxdWFsIiwiUkVBQ1RfU1RBVElDUyIsImNoaWxkQ29udGV4dFR5cGVzIiwiY29udGV4dFR5cGVzIiwiZGVmYXVsdFByb3BzIiwiZGlzcGxheU5hbWUiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJwcm9wVHlwZXMiLCJ0eXBlIiwiS05PV05fU1RBVElDUyIsIm5hbWUiLCJwcm90b3R5cGUiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcml0eSIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlOYW1lcyIsImdldE93blByb3BlcnR5U3ltYm9scyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImdldFByb3RvdHlwZU9mIiwib2JqZWN0UHJvdG90eXBlIiwiaG9pc3ROb25SZWFjdFN0YXRpY3MiLCJ0YXJnZXRDb21wb25lbnQiLCJzb3VyY2VDb21wb25lbnQiLCJibGFja2xpc3QiLCJpbmhlcml0ZWRDb21wb25lbnQiLCJrZXlzIiwiZGVzY3JpcHRvciIsImFycmF5V2l0aEhvbGVzIiwicmVxdWlyZSIsIml0ZXJhYmxlVG9BcnJheUxpbWl0Iiwibm9uSXRlcmFibGVSZXN0IiwiYXJyIiwicGFyc2UiLCJzdHJpbmdpZnkiLCJhc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJjYWxsIiwib3duS2V5cyIsImNvbmNhdCIsInN5bSIsImVudW1lcmFibGUiLCJpbnN0YW5jZSIsIkNvbnN0cnVjdG9yIiwiVHlwZUVycm9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfZ2V0UHJvdG90eXBlT2YiLCJvIiwic2V0UHJvdG90eXBlT2YiLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjcmVhdGUiLCJjb25zdHJ1Y3RvciIsInZhbHVlIiwid3JpdGFibGUiLCJjb25maWd1cmFibGUiLCJVdGlscyIsIltvYmplY3QgT2JqZWN0XSIsInJlZ2V4cCIsIm1hdGNoIiwiX2NvbnN0IiwidmVyc2lvbiIsInZlcnNpb25BIiwidmVyc2lvbkIiLCJpc0xvb3NlIiwidmVyc2lvbkFQcmVjaXNpb24iLCJ2ZXJzaW9uQlByZWNpc2lvbiIsInByZWNpc2lvbiIsImxhc3RQcmVjaXNpb24iLCJjaHVua3MiLCJfdmVyc2lvbiIsImpvaW4iLCJjaHVuayIsInJldmVyc2UiLCJfYXJyIiwiX24iLCJfZCIsIl9lIiwiX3MiLCJfaSIsIm5leHQiLCJkb25lIiwiZXJyIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwiX3NldFByb3RvdHlwZU9mIiwicCIsInRhZ1JFIiwicGFyc2VUYWciLCJlbXB0eSIsInB1c2hUZXh0Tm9kZSIsImxpc3QiLCJodG1sIiwibGV2ZWwiLCJzdGFydCIsImlnbm9yZVdoaXRlc3BhY2UiLCJlbmQiLCJjb250ZW50Iiwib3B0aW9ucyIsImN1cnJlbnQiLCJieVRhZyIsImluQ29tcG9uZW50IiwidGFnIiwicGFyZW50IiwiaXNPcGVuIiwiaXNDb21tZW50IiwibmV4dENoYXIiLCJ2b2lkRWxlbWVudCIsImNoaWxkcmVuIiwiYXR0clJFIiwidm9pZEVsZW1lbnRzIiwiZXhwZWN0aW5nVmFsdWVBZnRlckVxdWFscyIsInJlcyIsImF0dHJzIiwiYnVmZiIsImRvYyIsImF0dHJTdHJpbmciLCJyZWR1Y2UiLCJ0b2tlbiIsInJvb3RFbCIsImNvbnNvbGVMb2dnZXIiLCJsb2ciLCJ0aGlzIiwib3V0cHV0Iiwid2FybiIsImVycm9yIiwiX2NvbnNvbGUiLCJjb25zb2xlIiwiYXBwbHkiLCJhcnIyIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwibG9nZ2VyIiwiTG9nZ2VyIiwiY29uY3JldGVMb2dnZXIiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbml0IiwiZGVidWciLCJib29sIiwiZm9yd2FyZCIsIl9sZW4yIiwiX2tleTIiLCJfbGVuMyIsIl9rZXkzIiwiX2xlbjQiLCJfa2V5NCIsImx2bCIsImRlYnVnT25seSIsIm1vZHVsZU5hbWUiLCJlc19FdmVudEVtaXR0ZXIiLCJFdmVudEVtaXR0ZXIiLCJvYnNlcnZlcnMiLCJldmVudHMiLCJfdGhpcyIsIl90aGlzMiIsImZvckVhY2giLCJjbG9uZWQiLCJvYnNlcnZlciIsIl9jbG9uZWQiLCJkZWZlciIsInJlaiIsInByb21pc2UiLCJQcm9taXNlIiwicmVzb2x2ZSIsInJlamVjdCIsIm1ha2VTdHJpbmciLCJvYmplY3QiLCJnZXRMYXN0T2ZQYXRoIiwiRW1wdHkiLCJjbGVhbktleSIsImNhbk5vdFRyYXZlcnNlRGVlcGVyIiwic3RhY2siLCJzaGlmdCIsImsiLCJzZXRQYXRoIiwibmV3VmFsdWUiLCJfZ2V0TGFzdE9mUGF0aCIsImdldFBhdGgiLCJfZ2V0TGFzdE9mUGF0aDMiLCJyZWdleEVzY2FwZSIsInN0ciIsIl9lbnRpdHlNYXAiLCImIiwiPCIsIj4iLCJcIiIsIiciLCIvIiwidXRpbHNfZXNjYXBlIiwiZGF0YSIsInMiLCJfaW5oZXJpdHMiLCJkZWZhdWx0cyIsIl9kZWZhdWx0cyIsImVzX1Jlc291cmNlU3RvcmUiLCJfRXZlbnRFbWl0dGVyIiwiUmVzb3VyY2VTdG9yZSIsIm5zIiwiZGVmYXVsdE5TIiwiX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4iLCJpbmRleE9mIiwic3BsaWNlIiwibG5nIiwia2V5U2VwYXJhdG9yIiwidXRpbHMiLCJzaWxlbnQiLCJhZGROYW1lc3BhY2VzIiwiZW1pdCIsInJlc291cmNlcyIsIm0iLCJhZGRSZXNvdXJjZSIsImRlZXAiLCJvdmVyd3JpdGUiLCJwYWNrIiwiZGVlcEV4dGVuZCIsInByb3AiLCJTdHJpbmciLCJoYXNSZXNvdXJjZUJ1bmRsZSIsInJlbW92ZU5hbWVzcGFjZXMiLCJnZXRSZXNvdXJjZSIsImNvbXBhdGliaWxpdHlBUEkiLCJwb3N0UHJvY2Vzc29yIiwicHJvY2Vzc29ycyIsImFkZFBvc3RQcm9jZXNzb3IiLCJoYW5kbGUiLCJ0cmFuc2xhdG9yIiwicHJvY2Vzc29yIiwiVHJhbnNsYXRvcl9pbmhlcml0cyIsImVzX1RyYW5zbGF0b3IiLCJUcmFuc2xhdG9yIiwic2VydmljZXMiLCJ0IiwiYmFzZUxvZ2dlciIsImxhbmd1YWdlIiwiaW50ZXJwb2xhdGlvbiIsInJlc29sdmVkIiwibnNTZXBhcmF0b3IiLCJuYW1lc3BhY2VzIiwicGFydHMiLCJvdmVybG9hZFRyYW5zbGF0aW9uT3B0aW9uSGFuZGxlciIsIl9leHRyYWN0RnJvbUtleSIsImV4dHJhY3RGcm9tS2V5IiwibmFtZXNwYWNlIiwiYXBwZW5kTmFtZXNwYWNlVG9DSU1vZGUiLCJyZXNVc2VkS2V5IiwicmVzVHlwZSIsImpvaW5BcnJheXMiLCJoYW5kbGVBc09iamVjdEluSTE4bkZvcm1hdCIsImkxOG5Gb3JtYXQiLCJoYW5kbGVBc09iamVjdCIsIm5vT2JqZWN0IiwicmV0dXJuT2JqZWN0cyIsInJldHVybmVkT2JqZWN0SGFuZGxlciIsImNvcHkiLCJkZWVwS2V5IiwidHJhbnNsYXRlIiwiZXh0ZW5kVHJhbnNsYXRpb24iLCJ1c2VkRGVmYXVsdCIsInVzZWRLZXkiLCJpc1ZhbGlkTG9va3VwIiwic3VmZml4IiwicGx1cmFsUmVzb2x2ZXIiLCJnZXRTdWZmaXgiLCJjb3VudCIsInVwZGF0ZU1pc3NpbmciLCJkZWZhdWx0VmFsdWUiLCJsbmdzIiwiZmFsbGJhY2tMbmdzIiwibGFuZ3VhZ2VVdGlscyIsImdldEZhbGxiYWNrQ29kZXMiLCJmYWxsYmFja0xuZyIsInNhdmVNaXNzaW5nVG8iLCJ0b1Jlc29sdmVIaWVyYXJjaHkiLCJzZW5kIiwibCIsIm1pc3NpbmdLZXlIYW5kbGVyIiwic2F2ZU1pc3NpbmciLCJuZWVkc1BsdXJhbEhhbmRsaW5nIiwic2F2ZU1pc3NpbmdQbHVyYWxzIiwicGx1cmFscyIsImFwcGVuZE5hbWVzcGFjZVRvTWlzc2luZ0tleSIsInBhcnNlTWlzc2luZ0tleUhhbmRsZXIiLCJfdGhpczMiLCJ1c2VkTG5nIiwidXNlZE5TIiwic2tpcEludGVycG9sYXRpb24iLCJpbnRlcnBvbGF0b3IiLCJkZWZhdWx0VmFyaWFibGVzIiwiaW50ZXJwb2xhdGUiLCJuZXN0IiwicmVzZXQiLCJwb3N0UHJvY2VzcyIsInBvc3RQcm9jZXNzb3JOYW1lcyIsIl90aGlzNCIsImZvdW5kIiwiZXh0cmFjdGVkIiwiZmFsbGJhY2tOUyIsIm5lZWRzQ29udGV4dEhhbmRsaW5nIiwiY29udGV4dCIsImNvZGVzIiwiY29kZSIsImZpbmFsS2V5IiwiZmluYWxLZXlzIiwiYWRkTG9va3VwS2V5cyIsInBsdXJhbFN1ZmZpeCIsImNvbnRleHRTZXBhcmF0b3IiLCJwb3NzaWJsZUtleSIsInBvcCIsInJldHVybk51bGwiLCJyZXR1cm5FbXB0eVN0cmluZyIsInJlc291cmNlU3RvcmUiLCJjYXBpdGFsaXplIiwic3RyaW5nIiwiTGFuZ3VhZ2VVdGlscyIsIkxhbmd1YWdlVXRpbCIsIndoaXRlbGlzdCIsImZvcm1hdExhbmd1YWdlQ29kZSIsInNwZWNpYWxDYXNlcyIsImxvd2VyQ2FzZUxuZyIsInBhcnQiLCJ0b0xvd2VyQ2FzZSIsImNsZWFuQ29kZSIsImxvYWQiLCJub25FeHBsaWNpdFdoaXRlbGlzdCIsImdldExhbmd1YWdlUGFydEZyb21Db2RlIiwiZmFsbGJhY2tzIiwiZ2V0U2NyaXB0UGFydEZyb21Db2RlIiwiZmFsbGJhY2tDb2RlIiwiZmFsbGJhY2tDb2RlcyIsImFkZENvZGUiLCJjIiwiZmMiLCJzZXRzIiwibnIiLCJfcnVsZXNQbHVyYWxzVHlwZXMiLCIxIiwiTnVtYmVyIiwiMiIsIjMiLCI0IiwiNSIsIjYiLCI3IiwiOCIsIjkiLCIxMCIsIjExIiwiMTIiLCIxMyIsIjE0IiwiMTUiLCIxNiIsIjE3IiwiMTgiLCIxOSIsIjIwIiwiMjEiLCIyMiIsImVzX1BsdXJhbFJlc29sdmVyIiwiUGx1cmFsUmVzb2x2ZXIiLCJydWxlcyIsInNldCIsIm51bWJlcnMiLCJydWxlIiwiZ2V0UnVsZSIsInJldCIsImlkeCIsInNpbXBsaWZ5UGx1cmFsU3VmZml4IiwicmV0dXJuU3VmZml4IiwidG9TdHJpbmciLCJjb21wYXRpYmlsaXR5SlNPTiIsInByZXBlbmQiLCJlc19JbnRlcnBvbGF0b3IiLCJJbnRlcnBvbGF0b3IiLCJmb3JtYXQiLCJlc2NhcGVWYWx1ZSIsImlPcHRzIiwiZXNjYXBlIiwidXNlUmF3VmFsdWVUb0VzY2FwZSIsImZvcm1hdFNlcGFyYXRvciIsInVuZXNjYXBlUHJlZml4IiwidW5lc2NhcGVTdWZmaXgiLCJuZXN0aW5nUHJlZml4IiwibmVzdGluZ1N1ZmZpeCIsIm1heFJlcGxhY2VzIiwicmVzZXRSZWdFeHAiLCJyZWdleHBTdHIiLCJyZWdleHBVbmVzY2FwZVN0ciIsInJlZ2V4cFVuZXNjYXBlIiwibmVzdGluZ1JlZ2V4cFN0ciIsIm5lc3RpbmdSZWdleHAiLCJyZXBsYWNlcyIsInJlZ2V4U2FmZSIsInZhbCIsImhhbmRsZUZvcm1hdCIsInRyaW0iLCJmIiwibWlzc2luZ0ludGVycG9sYXRpb25IYW5kbGVyIiwiZXhlYyIsImxhc3RJbmRleCIsInRlbXAiLCJjbG9uZWRPcHRpb25zIiwiaGFuZGxlSGFzT3B0aW9ucyIsImluaGVyaXRlZE9wdGlvbnMiLCJvcHRpb25zU3RyaW5nIiwiSlNPTiIsIl9zbGljZWRUb0FycmF5Iiwic2xpY2VJdGVyYXRvciIsIkJhY2tlbmRDb25uZWN0b3JfaW5oZXJpdHMiLCJCYWNrZW5kQ29ubmVjdG9yIiwiQ29ubmVjdG9yIiwiYmFja2VuZCIsInN0b3JlIiwibGFuZ3VhZ2VzIiwidG9Mb2FkIiwicGVuZGluZyIsInRvTG9hZExhbmd1YWdlcyIsInRvTG9hZE5hbWVzcGFjZXMiLCJoYXNBbGxOYW1lc3BhY2VzIiwicmVsb2FkIiwicXVldWUiLCJsb2FkZWQiLCJlcnJvcnMiLCJfbmFtZSRzcGxpdCIsIl9uYW1lJHNwbGl0MiIsImFkZFJlc291cmNlQnVuZGxlIiwicSIsIl9nZXRMYXN0T2ZQYXRoMiIsIndoYXQiLCJyZW1vdmUiLCJmY05hbWUiLCJ0cmllZCIsIndhaXQiLCJzZXRUaW1lb3V0IiwicXVldWVMb2FkIiwicHJlcGFyZUxvYWRpbmciLCJfdGhpczUiLCJfbmFtZSRzcGxpdDMiLCJfbmFtZSRzcGxpdDQiLCJyZWFkIiwiZmFsbGJhY2tWYWx1ZSIsImlzVXBkYXRlIiwidHJhbnNmb3JtT3B0aW9ucyIsImkxOG5leHRfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybiIsImkxOG5leHRfaW5oZXJpdHMiLCJub29wIiwiaTE4bmV4dCIsIkkxOG4iLCJleHRlcm5hbCIsImlzQ2xvbmUiLCJpbml0SW1tZWRpYXRlIiwiX3JldCIsImNyZWF0ZUNsYXNzT25EZW1hbmQiLCJDbGFzc09yT2JqZWN0IiwicHJlbG9hZCIsInBsdXJhbFNlcGFyYXRvciIsInBhcnRpYWxCdW5kbGVkTGFuZ3VhZ2VzIiwiX2Zvcm1hdCIsIm1vZHVsZXMiLCJsdSIsImxhbmd1YWdlRGV0ZWN0b3IiLCJvbiIsInN0b3JlQXBpIiwiX3N0b3JlIiwiZGVmZXJyZWQiLCJhcHBlbmQiLCJiYWNrZW5kQ29ubmVjdG9yIiwic2V0TG5nIiwiYXN5bmMiLCJkZXRlY3QiLCJmaXhlZFQiLCJvcHRzIiwicmVzdCIsIl90cmFuc2xhdG9yIiwiX3RyYW5zbGF0b3IyIiwiZXhpc3RzIiwiX3RoaXM2IiwibG9hZFJlc291cmNlcyIsInByZWxvYWRlZCIsIm5ld0xuZ3MiLCJydGxMbmdzIiwiX3RoaXM3IiwibWVyZ2VkT3B0aW9ucyIsImNsb25lIiwibWVtYmVyc1RvQ29weSIsImVzX2NoYW5nZUxhbmd1YWdlIiwiZXNfY2xvbmVJbnN0YW5jZSIsImNyZWF0ZUluc3RhbmNlIiwiZGlyIiwiZ2V0Rml4ZWRUIiwiZXNfaW5pdCIsImVzX2xvYWRMYW5ndWFnZXMiLCJlc19sb2FkTmFtZXNwYWNlcyIsIm9mZiIsInNldERlZmF1bHROYW1lc3BhY2UiLCJlc191c2UiLCJjaGFuZ2VMYW5ndWFnZSIsImNsb25lSW5zdGFuY2UiLCJsb2FkTGFuZ3VhZ2VzIiwibG9hZE5hbWVzcGFjZXMiLCJ1c2UiLCJjb21tb25WZXJzaW9uSWRlbnRpZmllciIsInBhcnNlcl9icm93c2VycyIsImRlc2NyaWJlIiwiYnJvd3NlciIsImdldEZpcnN0TWF0Y2giLCJnZXRTZWNvbmRNYXRjaCIsInBhcnNlciIsIm5vdExpa2VBbmRyb2lkIiwiYnV0QW5kcm9pZCIsInBhcnNlcl9vcyIsInZlcnNpb25OYW1lIiwiZ2V0V2luZG93c1ZlcnNpb25OYW1lIiwib3MiLCJUWVBFU19MQUJFTFMiLCJwYXJzZXJfcGxhdGZvcm1zIiwidmVuZG9yIiwibW9kZWwiLCJpRGV2aWNlIiwibGlrZUlEZXZpY2UiLCJvc01ham9yVmVyc2lvbiIsInBhcnNlcl9lbmdpbmVzIiwiZW5naW5lIiwiaXNHZWNrbyIsImxpa2VHZWNrbyIsIlVBIiwic2tpcFBhcnNpbmciLCJFcnJvciIsIl91YSIsInBhcnNlZFJlc3VsdCIsImdldFVBIiwicmVnZXgiLCJwYXJzZUJyb3dzZXIiLCJicm93c2VyRGVzY3JpcHRvciIsImZpbmQiLCJfYnJvd3NlciIsImNvbmRpdGlvbiIsImdldEJyb3dzZXIiLCJnZXRCcm93c2VyTmFtZSIsImdldEJyb3dzZXJWZXJzaW9uIiwiZ2V0T1MiLCJwYXJzZU9TIiwiX29zIiwiZ2V0T1NOYW1lIiwiZ2V0T1NWZXJzaW9uIiwiZ2V0UGxhdGZvcm0iLCJwbGF0Zm9ybSIsInBhcnNlUGxhdGZvcm0iLCJnZXRQbGF0Zm9ybVR5cGUiLCJfcGxhdGZvcm0iLCJnZXRFbmdpbmUiLCJwYXJzZUVuZ2luZSIsIl9lbmdpbmUiLCJnZXRSZXN1bHQiLCJzYXRpc2ZpZXMiLCJjaGVja1RyZWUiLCJwbGF0Zm9ybXNBbmRPU2VzIiwicGxhdGZvcm1zQW5kT1NDb3VudGVyIiwiYnJvd3NlcnMiLCJicm93c2Vyc0NvdW50ZXIiLCJhbGxEZWZpbml0aW9ucyIsImN1cnJlbnREZWZpbml0aW9uIiwicGxhdGZvcm1zQW5kT1NOYW1lcyIsIk9TTWF0Y2hpbmdEZWZpbml0aW9uIiwiaXNPUyIsIm9zUmVzdWx0IiwicGxhdGZvcm1NYXRjaGluZ0RlZmluaXRpb24iLCJpc1BsYXRmb3JtIiwicGxhdGZvcm1SZXN1bHQiLCJtYXRjaGluZ0RlZmluaXRpb24iLCJicm93c2VyTmFtZXMiLCJpc0Jyb3dzZXIiLCJjb21wYXJlVmVyc2lvbiIsImJyb3dzZXJOYW1lIiwiZXhwZWN0ZWRSZXN1bHQiLCJjb21wYXJhYmxlVmVyc2lvbiIsImN1cnJlbnRCcm93c2VyVmVyc2lvbiIsImNvbXBhcmVWZXJzaW9ucyIsIm9zTmFtZSIsInBsYXRmb3JtVHlwZSIsImlzIiwiYW55dGhpbmciLCJzb21lIiwiYW55dGhpbmdzIiwiX3R5cGVvZjIiLCJvYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwic291cmNlU3ltYm9sS2V5cyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiX2luaGVyaXRzTG9vc2UiXSwibWFwcGluZ3MiOiIwRkFBZSxTQUFBQSxFQUFBQyxHQUNiLFFBQWEsSUFBVEEsRUFDRixNQUFNLElBQUFDLGVBQU4sNkRBR0YsT0FBQUQsRUFMRkUsRUFBQUMsRUFBQUMsRUFBQSxzQkFBQUwscUNDMkRBTSxVQXpDYyxxR0NsQkhDLEVBQWtCLFNBQUFDLEdBQzNCLE1BQU9BLG9CQUFnQyxJQUF2Q0EsR0FHU0MsRUFBb0IsU0FBQUQsR0FDN0IsTUFBT0Esa0JBQXlCQSxTQUF6QkEsR0FBUEEsR0FHU0UsRUFBYyxTQUFBRixFQUFBRyxHQUN2QixPQUFPLElBQUFDLE9BQVcsSUFBQUQsRUFBWCxxQkFBQUUsS0FBUEwsSUFHU00sRUFBZ0IsU0FBQU4sRUFBQUcsR0FDekIsT0FBT0QsRUFBV0YsRUFBWEUsR0FBNEJGLFNBQVlHLEVBQXhDRCxR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QUFMTSxLQUNBTCxLQUFjSSxFQUFkSixJQUlKLE9BQUFBLG9DQ2xCYSxTQUFBbXVCLEVBQUEvdEIsRUFBQXdPLEdBQ2IsU0FBSXhPLEVBQWdCLFNBQ3BCLElBRUFDLEVBQUFKLEVBRklELEVBQUosR0FDSTZPLEVBQWE5TyxZQUFqQkssR0FHQSxJQUFLSCxFQUFMLEVBQVlBLEVBQUk0TyxFQUFoQjFPLE9BQW1DRixJQUNqQ0ksRUFBTXdPLEVBQU54TyxHQUNJdU8sY0FBSixJQUNBNU8sS0FBY0ksRUFBZEosSUFHRixPQUFBQSxFQVpGcEIsRUFBQUMsRUFBQUMsRUFBQSxzQkFBQXF2QixxQ0NBZSxTQUFBQyxFQUFBMWhCLEVBQUFDLEdBQ2JELFlBQXFCM00sY0FBYzRNLEVBQW5DRCxXQUNBQSwwQkFDQUEsY0FIRjlOLEVBQUFDLEVBQUFDLEVBQUEsc0JBQUFzdkIiLCJmaWxlIjoiYXBwfjI1M2FlMjEwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn0iLCIvKipcbiAqIENvcHlyaWdodCAyMDE0LTIwMTUsIEZhY2Vib29rLCBJbmMuXG4gKiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIEJTRC1zdHlsZSBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLiBBbiBhZGRpdGlvbmFsIGdyYW50XG4gKiBvZiBwYXRlbnQgcmlnaHRzIGNhbiBiZSBmb3VuZCBpbiB0aGUgUEFURU5UUyBmaWxlIGluIHRoZSBzYW1lIGRpcmVjdG9yeS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbi8qKlxuICogU2ltaWxhciB0byBpbnZhcmlhbnQgYnV0IG9ubHkgbG9ncyBhIHdhcm5pbmcgaWYgdGhlIGNvbmRpdGlvbiBpcyBub3QgbWV0LlxuICogVGhpcyBjYW4gYmUgdXNlZCB0byBsb2cgaXNzdWVzIGluIGRldmVsb3BtZW50IGVudmlyb25tZW50cyBpbiBjcml0aWNhbFxuICogcGF0aHMuIFJlbW92aW5nIHRoZSBsb2dnaW5nIGNvZGUgZm9yIHByb2R1Y3Rpb24gZW52aXJvbm1lbnRzIHdpbGwga2VlcCB0aGVcbiAqIHNhbWUgbG9naWMgYW5kIGZvbGxvdyB0aGUgc2FtZSBjb2RlIHBhdGhzLlxuICovXG5cbnZhciB3YXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgd2FybmluZyA9IGZ1bmN0aW9uKGNvbmRpdGlvbiwgZm9ybWF0LCBhcmdzKSB7XG4gICAgdmFyIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgYXJncyA9IG5ldyBBcnJheShsZW4gPiAyID8gbGVuIC0gMiA6IDApO1xuICAgIGZvciAodmFyIGtleSA9IDI7IGtleSA8IGxlbjsga2V5KyspIHtcbiAgICAgIGFyZ3Nba2V5IC0gMl0gPSBhcmd1bWVudHNba2V5XTtcbiAgICB9XG4gICAgaWYgKGZvcm1hdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICdgd2FybmluZyhjb25kaXRpb24sIGZvcm1hdCwgLi4uYXJncylgIHJlcXVpcmVzIGEgd2FybmluZyAnICtcbiAgICAgICAgJ21lc3NhZ2UgYXJndW1lbnQnXG4gICAgICApO1xuICAgIH1cblxuICAgIGlmIChmb3JtYXQubGVuZ3RoIDwgMTAgfHwgKC9eW3NcXFddKiQvKS50ZXN0KGZvcm1hdCkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ1RoZSB3YXJuaW5nIGZvcm1hdCBzaG91bGQgYmUgYWJsZSB0byB1bmlxdWVseSBpZGVudGlmeSB0aGlzICcgK1xuICAgICAgICAnd2FybmluZy4gUGxlYXNlLCB1c2UgYSBtb3JlIGRlc2NyaXB0aXZlIGZvcm1hdCB0aGFuOiAnICsgZm9ybWF0XG4gICAgICApO1xuICAgIH1cblxuICAgIGlmICghY29uZGl0aW9uKSB7XG4gICAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgICAgdmFyIG1lc3NhZ2UgPSAnV2FybmluZzogJyArXG4gICAgICAgIGZvcm1hdC5yZXBsYWNlKC8lcy9nLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgICAgfSk7XG4gICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgICB9XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgICAgLy8gdG8gZmluZCB0aGUgY2FsbHNpdGUgdGhhdCBjYXVzZWQgdGhpcyB3YXJuaW5nIHRvIGZpcmUuXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgIH0gY2F0Y2goeCkge31cbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gd2FybmluZztcbiIsImV4cG9ydCB2YXIgYWRkTGVhZGluZ1NsYXNoID0gZnVuY3Rpb24gYWRkTGVhZGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnLycgPyBwYXRoIDogJy8nICsgcGF0aDtcbn07XG5cbmV4cG9ydCB2YXIgc3RyaXBMZWFkaW5nU2xhc2ggPSBmdW5jdGlvbiBzdHJpcExlYWRpbmdTbGFzaChwYXRoKSB7XG4gIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJy8nID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xufTtcblxuZXhwb3J0IHZhciBoYXNCYXNlbmFtZSA9IGZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gbmV3IFJlZ0V4cCgnXicgKyBwcmVmaXggKyAnKFxcXFwvfFxcXFw/fCN8JCknLCAnaScpLnRlc3QocGF0aCk7XG59O1xuXG5leHBvcnQgdmFyIHN0cmlwQmFzZW5hbWUgPSBmdW5jdGlvbiBzdHJpcEJhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gaGFzQmFzZW5hbWUocGF0aCwgcHJlZml4KSA/IHBhdGguc3Vic3RyKHByZWZpeC5sZW5ndGgpIDogcGF0aDtcbn07XG5cbmV4cG9ydCB2YXIgc3RyaXBUcmFpbGluZ1NsYXNoID0gZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn07XG5cbmV4cG9ydCB2YXIgcGFyc2VQYXRoID0gZnVuY3Rpb24gcGFyc2VQYXRoKHBhdGgpIHtcbiAgdmFyIHBhdGhuYW1lID0gcGF0aCB8fCAnLyc7XG4gIHZhciBzZWFyY2ggPSAnJztcbiAgdmFyIGhhc2ggPSAnJztcblxuICB2YXIgaGFzaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignIycpO1xuICBpZiAoaGFzaEluZGV4ICE9PSAtMSkge1xuICAgIGhhc2ggPSBwYXRobmFtZS5zdWJzdHIoaGFzaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBoYXNoSW5kZXgpO1xuICB9XG5cbiAgdmFyIHNlYXJjaEluZGV4ID0gcGF0aG5hbWUuaW5kZXhPZignPycpO1xuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59O1xuXG5leHBvcnQgdmFyIGNyZWF0ZVBhdGggPSBmdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG5cblxuICB2YXIgcGF0aCA9IHBhdGhuYW1lIHx8ICcvJztcblxuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6ICc/JyArIHNlYXJjaDtcblxuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiAnIycgKyBoYXNoO1xuXG4gIHJldHVybiBwYXRoO1xufTsiLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgcmVzb2x2ZVBhdGhuYW1lIGZyb20gJ3Jlc29sdmUtcGF0aG5hbWUnO1xuaW1wb3J0IHZhbHVlRXF1YWwgZnJvbSAndmFsdWUtZXF1YWwnO1xuaW1wb3J0IHsgcGFyc2VQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnO1xuXG5leHBvcnQgdmFyIGNyZWF0ZUxvY2F0aW9uID0gZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSwgY3VycmVudExvY2F0aW9uKSB7XG4gIHZhciBsb2NhdGlvbiA9IHZvaWQgMDtcbiAgaWYgKHR5cGVvZiBwYXRoID09PSAnc3RyaW5nJykge1xuICAgIC8vIFR3by1hcmcgZm9ybTogcHVzaChwYXRoLCBzdGF0ZSlcbiAgICBsb2NhdGlvbiA9IHBhcnNlUGF0aChwYXRoKTtcbiAgICBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9IGVsc2Uge1xuICAgIC8vIE9uZS1hcmcgZm9ybTogcHVzaChsb2NhdGlvbilcbiAgICBsb2NhdGlvbiA9IF9leHRlbmRzKHt9LCBwYXRoKTtcblxuICAgIGlmIChsb2NhdGlvbi5wYXRobmFtZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5wYXRobmFtZSA9ICcnO1xuXG4gICAgaWYgKGxvY2F0aW9uLnNlYXJjaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLnNlYXJjaC5jaGFyQXQoMCkgIT09ICc/JykgbG9jYXRpb24uc2VhcmNoID0gJz8nICsgbG9jYXRpb24uc2VhcmNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5zZWFyY2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAobG9jYXRpb24uaGFzaCkge1xuICAgICAgaWYgKGxvY2F0aW9uLmhhc2guY2hhckF0KDApICE9PSAnIycpIGxvY2F0aW9uLmhhc2ggPSAnIycgKyBsb2NhdGlvbi5oYXNoO1xuICAgIH0gZWxzZSB7XG4gICAgICBsb2NhdGlvbi5oYXNoID0gJyc7XG4gICAgfVxuXG4gICAgaWYgKHN0YXRlICE9PSB1bmRlZmluZWQgJiYgbG9jYXRpb24uc3RhdGUgPT09IHVuZGVmaW5lZCkgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfVxuXG4gIHRyeSB7XG4gICAgbG9jYXRpb24ucGF0aG5hbWUgPSBkZWNvZGVVUkkobG9jYXRpb24ucGF0aG5hbWUpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgaWYgKGUgaW5zdGFuY2VvZiBVUklFcnJvcikge1xuICAgICAgdGhyb3cgbmV3IFVSSUVycm9yKCdQYXRobmFtZSBcIicgKyBsb2NhdGlvbi5wYXRobmFtZSArICdcIiBjb3VsZCBub3QgYmUgZGVjb2RlZC4gJyArICdUaGlzIGlzIGxpa2VseSBjYXVzZWQgYnkgYW4gaW52YWxpZCBwZXJjZW50LWVuY29kaW5nLicpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlO1xuICAgIH1cbiAgfVxuXG4gIGlmIChrZXkpIGxvY2F0aW9uLmtleSA9IGtleTtcblxuICBpZiAoY3VycmVudExvY2F0aW9uKSB7XG4gICAgLy8gUmVzb2x2ZSBpbmNvbXBsZXRlL3JlbGF0aXZlIHBhdGhuYW1lIHJlbGF0aXZlIHRvIGN1cnJlbnQgbG9jYXRpb24uXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSBjdXJyZW50TG9jYXRpb24ucGF0aG5hbWU7XG4gICAgfSBlbHNlIGlmIChsb2NhdGlvbi5wYXRobmFtZS5jaGFyQXQoMCkgIT09ICcvJykge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSByZXNvbHZlUGF0aG5hbWUobG9jYXRpb24ucGF0aG5hbWUsIGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZSk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIC8vIFdoZW4gdGhlcmUgaXMgbm8gcHJpb3IgbG9jYXRpb24gYW5kIHBhdGhuYW1lIGlzIGVtcHR5LCBzZXQgaXQgdG8gL1xuICAgIGlmICghbG9jYXRpb24ucGF0aG5hbWUpIHtcbiAgICAgIGxvY2F0aW9uLnBhdGhuYW1lID0gJy8nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBsb2NhdGlvbjtcbn07XG5cbmV4cG9ydCB2YXIgbG9jYXRpb25zQXJlRXF1YWwgPSBmdW5jdGlvbiBsb2NhdGlvbnNBcmVFcXVhbChhLCBiKSB7XG4gIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaCAmJiBhLmtleSA9PT0gYi5rZXkgJiYgdmFsdWVFcXVhbChhLnN0YXRlLCBiLnN0YXRlKTtcbn07IiwiaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5cbnZhciBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciA9IGZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCkge1xuICB2YXIgcHJvbXB0ID0gbnVsbDtcblxuICB2YXIgc2V0UHJvbXB0ID0gZnVuY3Rpb24gc2V0UHJvbXB0KG5leHRQcm9tcHQpIHtcbiAgICB3YXJuaW5nKHByb21wdCA9PSBudWxsLCAnQSBoaXN0b3J5IHN1cHBvcnRzIG9ubHkgb25lIHByb21wdCBhdCBhIHRpbWUnKTtcblxuICAgIHByb21wdCA9IG5leHRQcm9tcHQ7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHByb21wdCA9PT0gbmV4dFByb21wdCkgcHJvbXB0ID0gbnVsbDtcbiAgICB9O1xuICB9O1xuXG4gIHZhciBjb25maXJtVHJhbnNpdGlvblRvID0gZnVuY3Rpb24gY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBjYWxsYmFjaykge1xuICAgIC8vIFRPRE86IElmIGFub3RoZXIgdHJhbnNpdGlvbiBzdGFydHMgd2hpbGUgd2UncmUgc3RpbGwgY29uZmlybWluZ1xuICAgIC8vIHRoZSBwcmV2aW91cyBvbmUsIHdlIG1heSBlbmQgdXAgaW4gYSB3ZWlyZCBzdGF0ZS4gRmlndXJlIG91dCB0aGVcbiAgICAvLyBiZXN0IHdheSB0byBoYW5kbGUgdGhpcy5cbiAgICBpZiAocHJvbXB0ICE9IG51bGwpIHtcbiAgICAgIHZhciByZXN1bHQgPSB0eXBlb2YgcHJvbXB0ID09PSAnZnVuY3Rpb24nID8gcHJvbXB0KGxvY2F0aW9uLCBhY3Rpb24pIDogcHJvbXB0O1xuXG4gICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgaWYgKHR5cGVvZiBnZXRVc2VyQ29uZmlybWF0aW9uID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbihyZXN1bHQsIGNhbGxiYWNrKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3YXJuaW5nKGZhbHNlLCAnQSBoaXN0b3J5IG5lZWRzIGEgZ2V0VXNlckNvbmZpcm1hdGlvbiBmdW5jdGlvbiBpbiBvcmRlciB0byB1c2UgYSBwcm9tcHQgbWVzc2FnZScpO1xuXG4gICAgICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFJldHVybiBmYWxzZSBmcm9tIGEgdHJhbnNpdGlvbiBob29rIHRvIGNhbmNlbCB0aGUgdHJhbnNpdGlvbi5cbiAgICAgICAgY2FsbGJhY2socmVzdWx0ICE9PSBmYWxzZSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGNhbGxiYWNrKHRydWUpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgbGlzdGVuZXJzID0gW107XG5cbiAgdmFyIGFwcGVuZExpc3RlbmVyID0gZnVuY3Rpb24gYXBwZW5kTGlzdGVuZXIoZm4pIHtcbiAgICB2YXIgaXNBY3RpdmUgPSB0cnVlO1xuXG4gICAgdmFyIGxpc3RlbmVyID0gZnVuY3Rpb24gbGlzdGVuZXIoKSB7XG4gICAgICBpZiAoaXNBY3RpdmUpIGZuLmFwcGx5KHVuZGVmaW5lZCwgYXJndW1lbnRzKTtcbiAgICB9O1xuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlzQWN0aXZlID0gZmFsc2U7XG4gICAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMuZmlsdGVyKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICAgIHJldHVybiBpdGVtICE9PSBsaXN0ZW5lcjtcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIG5vdGlmeUxpc3RlbmVycyA9IGZ1bmN0aW9uIG5vdGlmeUxpc3RlbmVycygpIHtcbiAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh1bmRlZmluZWQsIGFyZ3MpO1xuICAgIH0pO1xuICB9O1xuXG4gIHJldHVybiB7XG4gICAgc2V0UHJvbXB0OiBzZXRQcm9tcHQsXG4gICAgY29uZmlybVRyYW5zaXRpb25UbzogY29uZmlybVRyYW5zaXRpb25UbyxcbiAgICBhcHBlbmRMaXN0ZW5lcjogYXBwZW5kTGlzdGVuZXIsXG4gICAgbm90aWZ5TGlzdGVuZXJzOiBub3RpZnlMaXN0ZW5lcnNcbiAgfTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyOyIsImV4cG9ydCB2YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcblxuZXhwb3J0IHZhciBhZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24gYWRkRXZlbnRMaXN0ZW5lcihub2RlLCBldmVudCwgbGlzdGVuZXIpIHtcbiAgcmV0dXJuIG5vZGUuYWRkRXZlbnRMaXN0ZW5lciA/IG5vZGUuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgbGlzdGVuZXIsIGZhbHNlKSA6IG5vZGUuYXR0YWNoRXZlbnQoJ29uJyArIGV2ZW50LCBsaXN0ZW5lcik7XG59O1xuXG5leHBvcnQgdmFyIHJlbW92ZUV2ZW50TGlzdGVuZXIgPSBmdW5jdGlvbiByZW1vdmVFdmVudExpc3RlbmVyKG5vZGUsIGV2ZW50LCBsaXN0ZW5lcikge1xuICByZXR1cm4gbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyID8gbm9kZS5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCBsaXN0ZW5lciwgZmFsc2UpIDogbm9kZS5kZXRhY2hFdmVudCgnb24nICsgZXZlbnQsIGxpc3RlbmVyKTtcbn07XG5cbmV4cG9ydCB2YXIgZ2V0Q29uZmlybWF0aW9uID0gZnVuY3Rpb24gZ2V0Q29uZmlybWF0aW9uKG1lc3NhZ2UsIGNhbGxiYWNrKSB7XG4gIHJldHVybiBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7XG59OyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWFsZXJ0XG5cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cbmV4cG9ydCB2YXIgc3VwcG9ydHNIaXN0b3J5ID0gZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcblxuICBpZiAoKHVhLmluZGV4T2YoJ0FuZHJvaWQgMi4nKSAhPT0gLTEgfHwgdWEuaW5kZXhPZignQW5kcm9pZCA0LjAnKSAhPT0gLTEpICYmIHVhLmluZGV4T2YoJ01vYmlsZSBTYWZhcmknKSAhPT0gLTEgJiYgdWEuaW5kZXhPZignQ2hyb21lJykgPT09IC0xICYmIHVhLmluZGV4T2YoJ1dpbmRvd3MgUGhvbmUnKSA9PT0gLTEpIHJldHVybiBmYWxzZTtcblxuICByZXR1cm4gd2luZG93Lmhpc3RvcnkgJiYgJ3B1c2hTdGF0ZScgaW4gd2luZG93Lmhpc3Rvcnk7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBicm93c2VyIGZpcmVzIHBvcHN0YXRlIG9uIGhhc2ggY2hhbmdlLlxuICogSUUxMCBhbmQgSUUxMSBkbyBub3QuXG4gKi9cbmV4cG9ydCB2YXIgc3VwcG9ydHNQb3BTdGF0ZU9uSGFzaENoYW5nZSA9IGZ1bmN0aW9uIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UoKSB7XG4gIHJldHVybiB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdUcmlkZW50JykgPT09IC0xO1xufTtcblxuLyoqXG4gKiBSZXR1cm5zIGZhbHNlIGlmIHVzaW5nIGdvKG4pIHdpdGggaGFzaCBoaXN0b3J5IGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQuXG4gKi9cbmV4cG9ydCB2YXIgc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2ggPSBmdW5jdGlvbiBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCgpIHtcbiAgcmV0dXJuIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJ0ZpcmVmb3gnKSA9PT0gLTE7XG59O1xuXG4vKipcbiAqIFJldHVybnMgdHJ1ZSBpZiBhIGdpdmVuIHBvcHN0YXRlIGV2ZW50IGlzIGFuIGV4dHJhbmVvdXMgV2ViS2l0IGV2ZW50LlxuICogQWNjb3VudHMgZm9yIHRoZSBmYWN0IHRoYXQgQ2hyb21lIG9uIGlPUyBmaXJlcyByZWFsIHBvcHN0YXRlIGV2ZW50c1xuICogY29udGFpbmluZyB1bmRlZmluZWQgc3RhdGUgd2hlbiBwcmVzc2luZyB0aGUgYmFjayBidXR0b24uXG4gKi9cbmV4cG9ydCB2YXIgaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCA9IGZ1bmN0aW9uIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQoZXZlbnQpIHtcbiAgcmV0dXJuIGV2ZW50LnN0YXRlID09PSB1bmRlZmluZWQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC5pbmRleE9mKCdDcmlPUycpID09PSAtMTtcbn07IiwidmFyIF90eXBlb2YgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PT0gXCJzeW1ib2xcIiA/IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH0gOiBmdW5jdGlvbiAob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9O1xuXG52YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5pbXBvcnQgd2FybmluZyBmcm9tICd3YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAnaW52YXJpYW50JztcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSAnLi9Mb2NhdGlvblV0aWxzJztcbmltcG9ydCB7IGFkZExlYWRpbmdTbGFzaCwgc3RyaXBUcmFpbGluZ1NsYXNoLCBoYXNCYXNlbmFtZSwgc3RyaXBCYXNlbmFtZSwgY3JlYXRlUGF0aCB9IGZyb20gJy4vUGF0aFV0aWxzJztcbmltcG9ydCBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciBmcm9tICcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJztcbmltcG9ydCB7IGNhblVzZURPTSwgYWRkRXZlbnRMaXN0ZW5lciwgcmVtb3ZlRXZlbnRMaXN0ZW5lciwgZ2V0Q29uZmlybWF0aW9uLCBzdXBwb3J0c0hpc3RvcnksIHN1cHBvcnRzUG9wU3RhdGVPbkhhc2hDaGFuZ2UsIGlzRXh0cmFuZW91c1BvcHN0YXRlRXZlbnQgfSBmcm9tICcuL0RPTVV0aWxzJztcblxudmFyIFBvcFN0YXRlRXZlbnQgPSAncG9wc3RhdGUnO1xudmFyIEhhc2hDaGFuZ2VFdmVudCA9ICdoYXNoY2hhbmdlJztcblxudmFyIGdldEhpc3RvcnlTdGF0ZSA9IGZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn07XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xudmFyIGNyZWF0ZUJyb3dzZXJIaXN0b3J5ID0gZnVuY3Rpb24gY3JlYXRlQnJvd3Nlckhpc3RvcnkoKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgaW52YXJpYW50KGNhblVzZURPTSwgJ0Jyb3dzZXIgaGlzdG9yeSBuZWVkcyBhIERPTScpO1xuXG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Vc2VIaXN0b3J5ID0gc3VwcG9ydHNIaXN0b3J5KCk7XG4gIHZhciBuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciA9ICFzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCk7XG5cbiAgdmFyIF9wcm9wcyRmb3JjZVJlZnJlc2ggPSBwcm9wcy5mb3JjZVJlZnJlc2gsXG4gICAgICBmb3JjZVJlZnJlc2ggPSBfcHJvcHMkZm9yY2VSZWZyZXNoID09PSB1bmRlZmluZWQgPyBmYWxzZSA6IF9wcm9wcyRmb3JjZVJlZnJlc2gsXG4gICAgICBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPSBwcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdW5kZWZpbmVkID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IHByb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHVuZGVmaW5lZCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuXG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG5cbiAgdmFyIGdldERPTUxvY2F0aW9uID0gZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oaGlzdG9yeVN0YXRlKSB7XG4gICAgdmFyIF9yZWYgPSBoaXN0b3J5U3RhdGUgfHwge30sXG4gICAgICAgIGtleSA9IF9yZWYua2V5LFxuICAgICAgICBzdGF0ZSA9IF9yZWYuc3RhdGU7XG5cbiAgICB2YXIgX3dpbmRvdyRsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbixcbiAgICAgICAgcGF0aG5hbWUgPSBfd2luZG93JGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgICBzZWFyY2ggPSBfd2luZG93JGxvY2F0aW9uLnNlYXJjaCxcbiAgICAgICAgaGFzaCA9IF93aW5kb3ckbG9jYXRpb24uaGFzaDtcblxuXG4gICAgdmFyIHBhdGggPSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG5cbiAgICB3YXJuaW5nKCFiYXNlbmFtZSB8fCBoYXNCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSksICdZb3UgYXJlIGF0dGVtcHRpbmcgdG8gdXNlIGEgYmFzZW5hbWUgb24gYSBwYWdlIHdob3NlIFVSTCBwYXRoIGRvZXMgbm90IGJlZ2luICcgKyAnd2l0aCB0aGUgYmFzZW5hbWUuIEV4cGVjdGVkIHBhdGggXCInICsgcGF0aCArICdcIiB0byBiZWdpbiB3aXRoIFwiJyArIGJhc2VuYW1lICsgJ1wiLicpO1xuXG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG5cbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSk7XG4gIH07XG5cbiAgdmFyIGNyZWF0ZUtleSA9IGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICB2YXIgc2V0U3RhdGUgPSBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGhhbmRsZVBvcFN0YXRlID0gZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXh0cmFuZW91cyBwb3BzdGF0ZSBldmVudHMgaW4gV2ViS2l0LlxuICAgIGlmIChpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSkgcmV0dXJuO1xuXG4gICAgaGFuZGxlUG9wKGdldERPTUxvY2F0aW9uKGV2ZW50LnN0YXRlKSk7XG4gIH07XG5cbiAgdmFyIGhhbmRsZUhhc2hDaGFuZ2UgPSBmdW5jdGlvbiBoYW5kbGVIYXNoQ2hhbmdlKCkge1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSkpO1xuICB9O1xuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcblxuICB2YXIgaGFuZGxlUG9wID0gZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG5cbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXZlcnRQb3AobG9jYXRpb24pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG5cbiAgdmFyIHJldmVydFBvcCA9IGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247XG5cbiAgICAvLyBUT0RPOiBXZSBjb3VsZCBwcm9iYWJseSBtYWtlIHRoaXMgbW9yZSByZWxpYWJsZSBieVxuICAgIC8vIGtlZXBpbmcgYSBsaXN0IG9mIGtleXMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3Iga2V5cyB3ZSBkb24ndCBrbm93LlxuXG4gICAgdmFyIHRvSW5kZXggPSBhbGxLZXlzLmluZGV4T2YodG9Mb2NhdGlvbi5rZXkpO1xuXG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcblxuICAgIHZhciBmcm9tSW5kZXggPSBhbGxLZXlzLmluZGV4T2YoZnJvbUxvY2F0aW9uLmtleSk7XG5cbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcblxuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbihnZXRIaXN0b3J5U3RhdGUoKSk7XG4gIHZhciBhbGxLZXlzID0gW2luaXRpYWxMb2NhdGlvbi5rZXldO1xuXG4gIC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICB2YXIgY3JlYXRlSHJlZiA9IGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgfTtcblxuICB2YXIgcHVzaCA9IGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKCEoKHR5cGVvZiBwYXRoID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihwYXRoKSkgPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuXG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucHVzaFN0YXRlKHsga2V5OiBrZXksIHN0YXRlOiBzdGF0ZSB9LCBudWxsLCBocmVmKTtcblxuICAgICAgICBpZiAoZm9yY2VSZWZyZXNoKSB7XG4gICAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIHZhciBuZXh0S2V5cyA9IGFsbEtleXMuc2xpY2UoMCwgcHJldkluZGV4ID09PSAtMSA/IDAgOiBwcmV2SW5kZXggKyAxKTtcblxuICAgICAgICAgIG5leHRLZXlzLnB1c2gobG9jYXRpb24ua2V5KTtcbiAgICAgICAgICBhbGxLZXlzID0gbmV4dEtleXM7XG5cbiAgICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKTtcblxuICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICB9XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIGhyZWYgPSBjcmVhdGVIcmVmKGxvY2F0aW9uKTtcbiAgICAgIHZhciBrZXkgPSBsb2NhdGlvbi5rZXksXG4gICAgICAgICAgc3RhdGUgPSBsb2NhdGlvbi5zdGF0ZTtcblxuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnJlcGxhY2VTdGF0ZSh7IGtleToga2V5LCBzdGF0ZTogc3RhdGUgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuXG4gICAgICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbEtleXNbcHJldkluZGV4XSA9IGxvY2F0aW9uLmtleTtcblxuICAgICAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpO1xuXG4gICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnbyA9IGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9O1xuXG4gIHZhciBnb0JhY2sgPSBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgcmV0dXJuIGdvKC0xKTtcbiAgfTtcblxuICB2YXIgZ29Gb3J3YXJkID0gZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIHJldHVybiBnbygxKTtcbiAgfTtcblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgdmFyIGNoZWNrRE9NTGlzdGVuZXJzID0gZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEpIHtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIod2luZG93LCBQb3BTdGF0ZUV2ZW50LCBoYW5kbGVQb3BTdGF0ZSk7XG5cbiAgICAgIGlmIChuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lcikgYWRkRXZlbnRMaXN0ZW5lcih3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICByZW1vdmVFdmVudExpc3RlbmVyKHdpbmRvdywgUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuXG4gICAgICBpZiAobmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIpIHJlbW92ZUV2ZW50TGlzdGVuZXIod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfTtcblxuICB2YXIgaXNCbG9ja2VkID0gZmFsc2U7XG5cbiAgdmFyIGJsb2NrID0gZnVuY3Rpb24gYmxvY2soKSB7XG4gICAgdmFyIHByb21wdCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZmFsc2U7XG5cbiAgICB2YXIgdW5ibG9jayA9IHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuXG4gICAgaWYgKCFpc0Jsb2NrZWQpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgICAgaXNCbG9ja2VkID0gdHJ1ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGlzQmxvY2tlZCkge1xuICAgICAgICBpc0Jsb2NrZWQgPSBmYWxzZTtcbiAgICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdW5ibG9jaygpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGxpc3RlbiA9IGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH07XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuXG4gIHJldHVybiBoaXN0b3J5O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQnJvd3Nlckhpc3Rvcnk7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuaW1wb3J0IHdhcm5pbmcgZnJvbSAnd2FybmluZyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ2ludmFyaWFudCc7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwgfSBmcm9tICcuL0xvY2F0aW9uVXRpbHMnO1xuaW1wb3J0IHsgYWRkTGVhZGluZ1NsYXNoLCBzdHJpcExlYWRpbmdTbGFzaCwgc3RyaXBUcmFpbGluZ1NsYXNoLCBoYXNCYXNlbmFtZSwgc3RyaXBCYXNlbmFtZSwgY3JlYXRlUGF0aCB9IGZyb20gJy4vUGF0aFV0aWxzJztcbmltcG9ydCBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciBmcm9tICcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJztcbmltcG9ydCB7IGNhblVzZURPTSwgYWRkRXZlbnRMaXN0ZW5lciwgcmVtb3ZlRXZlbnRMaXN0ZW5lciwgZ2V0Q29uZmlybWF0aW9uLCBzdXBwb3J0c0dvV2l0aG91dFJlbG9hZFVzaW5nSGFzaCB9IGZyb20gJy4vRE9NVXRpbHMnO1xuXG52YXIgSGFzaENoYW5nZUV2ZW50ID0gJ2hhc2hjaGFuZ2UnO1xuXG52YXIgSGFzaFBhdGhDb2RlcnMgPSB7XG4gIGhhc2hiYW5nOiB7XG4gICAgZW5jb2RlUGF0aDogZnVuY3Rpb24gZW5jb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGggOiAnIS8nICsgc3RyaXBMZWFkaW5nU2xhc2gocGF0aCk7XG4gICAgfSxcbiAgICBkZWNvZGVQYXRoOiBmdW5jdGlvbiBkZWNvZGVQYXRoKHBhdGgpIHtcbiAgICAgIHJldHVybiBwYXRoLmNoYXJBdCgwKSA9PT0gJyEnID8gcGF0aC5zdWJzdHIoMSkgOiBwYXRoO1xuICAgIH1cbiAgfSxcbiAgbm9zbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IHN0cmlwTGVhZGluZ1NsYXNoLFxuICAgIGRlY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaFxuICB9LFxuICBzbGFzaDoge1xuICAgIGVuY29kZVBhdGg6IGFkZExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfVxufTtcblxudmFyIGdldEhhc2hQYXRoID0gZnVuY3Rpb24gZ2V0SGFzaFBhdGgoKSB7XG4gIC8vIFdlIGNhbid0IHVzZSB3aW5kb3cubG9jYXRpb24uaGFzaCBoZXJlIGJlY2F1c2UgaXQncyBub3RcbiAgLy8gY29uc2lzdGVudCBhY3Jvc3MgYnJvd3NlcnMgLSBGaXJlZm94IHdpbGwgcHJlLWRlY29kZSBpdCFcbiAgdmFyIGhyZWYgPSB3aW5kb3cubG9jYXRpb24uaHJlZjtcbiAgdmFyIGhhc2hJbmRleCA9IGhyZWYuaW5kZXhPZignIycpO1xuICByZXR1cm4gaGFzaEluZGV4ID09PSAtMSA/ICcnIDogaHJlZi5zdWJzdHJpbmcoaGFzaEluZGV4ICsgMSk7XG59O1xuXG52YXIgcHVzaEhhc2hQYXRoID0gZnVuY3Rpb24gcHVzaEhhc2hQYXRoKHBhdGgpIHtcbiAgcmV0dXJuIHdpbmRvdy5sb2NhdGlvbi5oYXNoID0gcGF0aDtcbn07XG5cbnZhciByZXBsYWNlSGFzaFBhdGggPSBmdW5jdGlvbiByZXBsYWNlSGFzaFBhdGgocGF0aCkge1xuICB2YXIgaGFzaEluZGV4ID0gd2luZG93LmxvY2F0aW9uLmhyZWYuaW5kZXhPZignIycpO1xuXG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHdpbmRvdy5sb2NhdGlvbi5ocmVmLnNsaWNlKDAsIGhhc2hJbmRleCA+PSAwID8gaGFzaEluZGV4IDogMCkgKyAnIycgKyBwYXRoKTtcbn07XG5cbnZhciBjcmVhdGVIYXNoSGlzdG9yeSA9IGZ1bmN0aW9uIGNyZWF0ZUhhc2hIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuXG4gIGludmFyaWFudChjYW5Vc2VET00sICdIYXNoIGhpc3RvcnkgbmVlZHMgYSBET00nKTtcblxuICB2YXIgZ2xvYmFsSGlzdG9yeSA9IHdpbmRvdy5oaXN0b3J5O1xuICB2YXIgY2FuR29XaXRob3V0UmVsb2FkID0gc3VwcG9ydHNHb1dpdGhvdXRSZWxvYWRVc2luZ0hhc2goKTtcblxuICB2YXIgX3Byb3BzJGdldFVzZXJDb25maXJtID0gcHJvcHMuZ2V0VXNlckNvbmZpcm1hdGlvbixcbiAgICAgIGdldFVzZXJDb25maXJtYXRpb24gPSBfcHJvcHMkZ2V0VXNlckNvbmZpcm0gPT09IHVuZGVmaW5lZCA/IGdldENvbmZpcm1hdGlvbiA6IF9wcm9wcyRnZXRVc2VyQ29uZmlybSxcbiAgICAgIF9wcm9wcyRoYXNoVHlwZSA9IHByb3BzLmhhc2hUeXBlLFxuICAgICAgaGFzaFR5cGUgPSBfcHJvcHMkaGFzaFR5cGUgPT09IHVuZGVmaW5lZCA/ICdzbGFzaCcgOiBfcHJvcHMkaGFzaFR5cGU7XG5cbiAgdmFyIGJhc2VuYW1lID0gcHJvcHMuYmFzZW5hbWUgPyBzdHJpcFRyYWlsaW5nU2xhc2goYWRkTGVhZGluZ1NsYXNoKHByb3BzLmJhc2VuYW1lKSkgOiAnJztcblxuICB2YXIgX0hhc2hQYXRoQ29kZXJzJGhhc2hUID0gSGFzaFBhdGhDb2RlcnNbaGFzaFR5cGVdLFxuICAgICAgZW5jb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5lbmNvZGVQYXRoLFxuICAgICAgZGVjb2RlUGF0aCA9IF9IYXNoUGF0aENvZGVycyRoYXNoVC5kZWNvZGVQYXRoO1xuXG5cbiAgdmFyIGdldERPTUxvY2F0aW9uID0gZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuXG4gICAgd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKTtcblxuICAgIGlmIChiYXNlbmFtZSkgcGF0aCA9IHN0cmlwQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpO1xuXG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgpO1xuICB9O1xuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gZ2xvYmFsSGlzdG9yeS5sZW5ndGg7XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9O1xuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgdmFyIGlnbm9yZVBhdGggPSBudWxsO1xuXG4gIHZhciBoYW5kbGVIYXNoQ2hhbmdlID0gZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcblxuICAgIGlmIChwYXRoICE9PSBlbmNvZGVkUGF0aCkge1xuICAgICAgLy8gRW5zdXJlIHdlIGFsd2F5cyBoYXZlIGEgcHJvcGVybHktZW5jb2RlZCBoYXNoLlxuICAgICAgcmVwbGFjZUhhc2hQYXRoKGVuY29kZWRQYXRoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGxvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgICAgIHZhciBwcmV2TG9jYXRpb24gPSBoaXN0b3J5LmxvY2F0aW9uO1xuXG4gICAgICBpZiAoIWZvcmNlTmV4dFBvcCAmJiBsb2NhdGlvbnNBcmVFcXVhbChwcmV2TG9jYXRpb24sIGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBBIGhhc2hjaGFuZ2UgZG9lc24ndCBhbHdheXMgPT0gbG9jYXRpb24gY2hhbmdlLlxuXG4gICAgICBpZiAoaWdub3JlUGF0aCA9PT0gY3JlYXRlUGF0aChsb2NhdGlvbikpIHJldHVybjsgLy8gSWdub3JlIHRoaXMgY2hhbmdlOyB3ZSBhbHJlYWR5IHNldFN0YXRlIGluIHB1c2gvcmVwbGFjZS5cblxuICAgICAgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgICAgIGhhbmRsZVBvcChsb2NhdGlvbik7XG4gICAgfVxuICB9O1xuXG4gIHZhciBoYW5kbGVQb3AgPSBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcblxuICAgICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgICAgaWYgKG9rKSB7XG4gICAgICAgICAgc2V0U3RhdGUoeyBhY3Rpb246IGFjdGlvbiwgbG9jYXRpb246IGxvY2F0aW9uIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB2YXIgcmV2ZXJ0UG9wID0gZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcblxuICAgIC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2YgcGF0aHMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3IgcGF0aHMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aCh0b0xvY2F0aW9uKSk7XG5cbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuXG4gICAgdmFyIGZyb21JbmRleCA9IGFsbFBhdGhzLmxhc3RJbmRleE9mKGNyZWF0ZVBhdGgoZnJvbUxvY2F0aW9uKSk7XG5cbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcblxuICAgIHZhciBkZWx0YSA9IHRvSW5kZXggLSBmcm9tSW5kZXg7XG5cbiAgICBpZiAoZGVsdGEpIHtcbiAgICAgIGZvcmNlTmV4dFBvcCA9IHRydWU7XG4gICAgICBnbyhkZWx0YSk7XG4gICAgfVxuICB9O1xuXG4gIC8vIEVuc3VyZSB0aGUgaGFzaCBpcyBlbmNvZGVkIHByb3Blcmx5IGJlZm9yZSBkb2luZyBhbnl0aGluZyBlbHNlLlxuICB2YXIgcGF0aCA9IGdldEhhc2hQYXRoKCk7XG4gIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuXG4gIHZhciBpbml0aWFsTG9jYXRpb24gPSBnZXRET01Mb2NhdGlvbigpO1xuICB2YXIgYWxsUGF0aHMgPSBbY3JlYXRlUGF0aChpbml0aWFsTG9jYXRpb24pXTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgcmV0dXJuICcjJyArIGVuY29kZVBhdGgoYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKSk7XG4gIH07XG5cbiAgdmFyIHB1c2ggPSBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBwdXNoIHN0YXRlOyBpdCBpcyBpZ25vcmVkJyk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBwYXRoID0gY3JlYXRlUGF0aChsb2NhdGlvbik7XG4gICAgICB2YXIgZW5jb2RlZFBhdGggPSBlbmNvZGVQYXRoKGJhc2VuYW1lICsgcGF0aCk7XG4gICAgICB2YXIgaGFzaENoYW5nZWQgPSBnZXRIYXNoUGF0aCgpICE9PSBlbmNvZGVkUGF0aDtcblxuICAgICAgaWYgKGhhc2hDaGFuZ2VkKSB7XG4gICAgICAgIC8vIFdlIGNhbm5vdCB0ZWxsIGlmIGEgaGFzaGNoYW5nZSB3YXMgY2F1c2VkIGJ5IGEgUFVTSCwgc28gd2UnZFxuICAgICAgICAvLyByYXRoZXIgc2V0U3RhdGUgaGVyZSBhbmQgaWdub3JlIHRoZSBoYXNoY2hhbmdlLiBUaGUgY2F2ZWF0IGhlcmVcbiAgICAgICAgLy8gaXMgdGhhdCBvdGhlciBoYXNoIGhpc3RvcmllcyBpbiB0aGUgcGFnZSB3aWxsIGNvbnNpZGVyIGl0IGEgUE9QLlxuICAgICAgICBpZ25vcmVQYXRoID0gcGF0aDtcbiAgICAgICAgcHVzaEhhc2hQYXRoKGVuY29kZWRQYXRoKTtcblxuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggPT09IC0xID8gMCA6IHByZXZJbmRleCArIDEpO1xuXG4gICAgICAgIG5leHRQYXRocy5wdXNoKHBhdGgpO1xuICAgICAgICBhbGxQYXRocyA9IG5leHRQYXRocztcblxuICAgICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuaW5nKGZhbHNlLCAnSGFzaCBoaXN0b3J5IGNhbm5vdCBQVVNIIHRoZSBzYW1lIHBhdGg7IGEgbmV3IGVudHJ5IHdpbGwgbm90IGJlIGFkZGVkIHRvIHRoZSBoaXN0b3J5IHN0YWNrJyk7XG5cbiAgICAgICAgc2V0U3RhdGUoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICB2YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHJlcGxhY2Ugc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBSRVBMQUNFLCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgfVxuXG4gICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMuaW5kZXhPZihjcmVhdGVQYXRoKGhpc3RvcnkubG9jYXRpb24pKTtcblxuICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbFBhdGhzW3ByZXZJbmRleF0gPSBwYXRoO1xuXG4gICAgICBzZXRTdGF0ZSh7IGFjdGlvbjogYWN0aW9uLCBsb2NhdGlvbjogbG9jYXRpb24gfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIGdvID0gZnVuY3Rpb24gZ28obikge1xuICAgIHdhcm5pbmcoY2FuR29XaXRob3V0UmVsb2FkLCAnSGFzaCBoaXN0b3J5IGdvKG4pIGNhdXNlcyBhIGZ1bGwgcGFnZSByZWxvYWQgaW4gdGhpcyBicm93c2VyJyk7XG5cbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9O1xuXG4gIHZhciBnb0JhY2sgPSBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgcmV0dXJuIGdvKC0xKTtcbiAgfTtcblxuICB2YXIgZ29Gb3J3YXJkID0gZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIHJldHVybiBnbygxKTtcbiAgfTtcblxuICB2YXIgbGlzdGVuZXJDb3VudCA9IDA7XG5cbiAgdmFyIGNoZWNrRE9NTGlzdGVuZXJzID0gZnVuY3Rpb24gY2hlY2tET01MaXN0ZW5lcnMoZGVsdGEpIHtcbiAgICBsaXN0ZW5lckNvdW50ICs9IGRlbHRhO1xuXG4gICAgaWYgKGxpc3RlbmVyQ291bnQgPT09IDEpIHtcbiAgICAgIGFkZEV2ZW50TGlzdGVuZXIod2luZG93LCBIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcih3aW5kb3csIEhhc2hDaGFuZ2VFdmVudCwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICB2YXIgYmxvY2sgPSBmdW5jdGlvbiBibG9jaygpIHtcbiAgICB2YXIgcHJvbXB0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBmYWxzZTtcblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIHVubGlzdGVuKCk7XG4gICAgfTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVIYXNoSGlzdG9yeTsiLCJ2YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbnZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmltcG9ydCB3YXJuaW5nIGZyb20gJ3dhcm5pbmcnO1xuaW1wb3J0IHsgY3JlYXRlUGF0aCB9IGZyb20gJy4vUGF0aFV0aWxzJztcbmltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSAnLi9Mb2NhdGlvblV0aWxzJztcbmltcG9ydCBjcmVhdGVUcmFuc2l0aW9uTWFuYWdlciBmcm9tICcuL2NyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyJztcblxudmFyIGNsYW1wID0gZnVuY3Rpb24gY2xhbXAobiwgbG93ZXJCb3VuZCwgdXBwZXJCb3VuZCkge1xuICByZXR1cm4gTWF0aC5taW4oTWF0aC5tYXgobiwgbG93ZXJCb3VuZCksIHVwcGVyQm91bmQpO1xufTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgaGlzdG9yeSBvYmplY3QgdGhhdCBzdG9yZXMgbG9jYXRpb25zIGluIG1lbW9yeS5cbiAqL1xudmFyIGNyZWF0ZU1lbW9yeUhpc3RvcnkgPSBmdW5jdGlvbiBjcmVhdGVNZW1vcnlIaXN0b3J5KCkge1xuICB2YXIgcHJvcHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IHByb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBwcm9wcy5pbml0aWFsRW50cmllcyxcbiAgICAgIGluaXRpYWxFbnRyaWVzID0gX3Byb3BzJGluaXRpYWxFbnRyaWVzID09PSB1bmRlZmluZWQgPyBbJy8nXSA6IF9wcm9wcyRpbml0aWFsRW50cmllcyxcbiAgICAgIF9wcm9wcyRpbml0aWFsSW5kZXggPSBwcm9wcy5pbml0aWFsSW5kZXgsXG4gICAgICBpbml0aWFsSW5kZXggPSBfcHJvcHMkaW5pdGlhbEluZGV4ID09PSB1bmRlZmluZWQgPyAwIDogX3Byb3BzJGluaXRpYWxJbmRleCxcbiAgICAgIF9wcm9wcyRrZXlMZW5ndGggPSBwcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB1bmRlZmluZWQgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcblxuXG4gIHZhciB0cmFuc2l0aW9uTWFuYWdlciA9IGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCk7XG5cbiAgdmFyIHNldFN0YXRlID0gZnVuY3Rpb24gc2V0U3RhdGUobmV4dFN0YXRlKSB7XG4gICAgX2V4dGVuZHMoaGlzdG9yeSwgbmV4dFN0YXRlKTtcblxuICAgIGhpc3RvcnkubGVuZ3RoID0gaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH07XG5cbiAgdmFyIGNyZWF0ZUtleSA9IGZ1bmN0aW9uIGNyZWF0ZUtleSgpIHtcbiAgICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyKDIsIGtleUxlbmd0aCk7XG4gIH07XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTtcblxuICAvLyBQdWJsaWMgaW50ZXJmYWNlXG5cbiAgdmFyIGNyZWF0ZUhyZWYgPSBjcmVhdGVQYXRoO1xuXG4gIHZhciBwdXNoID0gZnVuY3Rpb24gcHVzaChwYXRoLCBzdGF0ZSkge1xuICAgIHdhcm5pbmcoISgodHlwZW9mIHBhdGggPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKHBhdGgpKSA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcHVzaCB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKTtcblxuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcblxuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBoaXN0b3J5LmluZGV4O1xuICAgICAgdmFyIG5leHRJbmRleCA9IHByZXZJbmRleCArIDE7XG5cbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcbiAgICAgIGlmIChuZXh0RW50cmllcy5sZW5ndGggPiBuZXh0SW5kZXgpIHtcbiAgICAgICAgbmV4dEVudHJpZXMuc3BsaWNlKG5leHRJbmRleCwgbmV4dEVudHJpZXMubGVuZ3RoIC0gbmV4dEluZGV4LCBsb2NhdGlvbik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBuZXh0RW50cmllcy5wdXNoKGxvY2F0aW9uKTtcbiAgICAgIH1cblxuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uLFxuICAgICAgICBpbmRleDogbmV4dEluZGV4LFxuICAgICAgICBlbnRyaWVzOiBuZXh0RW50cmllc1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdmFyIHJlcGxhY2UgPSBmdW5jdGlvbiByZXBsYWNlKHBhdGgsIHN0YXRlKSB7XG4gICAgd2FybmluZyghKCh0eXBlb2YgcGF0aCA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YocGF0aCkpID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byByZXBsYWNlIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpO1xuXG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuXG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcblxuICAgICAgaGlzdG9yeS5lbnRyaWVzW2hpc3RvcnkuaW5kZXhdID0gbG9jYXRpb247XG5cbiAgICAgIHNldFN0YXRlKHsgYWN0aW9uOiBhY3Rpb24sIGxvY2F0aW9uOiBsb2NhdGlvbiB9KTtcbiAgICB9KTtcbiAgfTtcblxuICB2YXIgZ28gPSBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG5cbiAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgdmFyIGxvY2F0aW9uID0gaGlzdG9yeS5lbnRyaWVzW25leHRJbmRleF07XG5cbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKG9rKSB7XG4gICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgICAgaW5kZXg6IG5leHRJbmRleFxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIE1pbWljIHRoZSBiZWhhdmlvciBvZiBET00gaGlzdG9yaWVzIGJ5XG4gICAgICAgIC8vIGNhdXNpbmcgYSByZW5kZXIgYWZ0ZXIgYSBjYW5jZWxsZWQgUE9QLlxuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZhciBnb0JhY2sgPSBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgcmV0dXJuIGdvKC0xKTtcbiAgfTtcblxuICB2YXIgZ29Gb3J3YXJkID0gZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIHJldHVybiBnbygxKTtcbiAgfTtcblxuICB2YXIgY2FuR28gPSBmdW5jdGlvbiBjYW5HbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGhpc3RvcnkuaW5kZXggKyBuO1xuICAgIHJldHVybiBuZXh0SW5kZXggPj0gMCAmJiBuZXh0SW5kZXggPCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICB9O1xuXG4gIHZhciBibG9jayA9IGZ1bmN0aW9uIGJsb2NrKCkge1xuICAgIHZhciBwcm9tcHQgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IGZhbHNlO1xuICAgIHJldHVybiB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcbiAgfTtcblxuICB2YXIgbGlzdGVuID0gZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfTtcblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGVudHJpZXMubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGVudHJpZXNbaW5kZXhdLFxuICAgIGluZGV4OiBpbmRleCxcbiAgICBlbnRyaWVzOiBlbnRyaWVzLFxuICAgIGNyZWF0ZUhyZWY6IGNyZWF0ZUhyZWYsXG4gICAgcHVzaDogcHVzaCxcbiAgICByZXBsYWNlOiByZXBsYWNlLFxuICAgIGdvOiBnbyxcbiAgICBnb0JhY2s6IGdvQmFjayxcbiAgICBnb0ZvcndhcmQ6IGdvRm9yd2FyZCxcbiAgICBjYW5HbzogY2FuR28sXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG5cbiAgcmV0dXJuIGhpc3Rvcnk7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVNZW1vcnlIaXN0b3J5OyIsImltcG9ydCBfY3JlYXRlQnJvd3Nlckhpc3RvcnkgZnJvbSAnLi9jcmVhdGVCcm93c2VySGlzdG9yeSc7XG5leHBvcnQgeyBfY3JlYXRlQnJvd3Nlckhpc3RvcnkgYXMgY3JlYXRlQnJvd3Nlckhpc3RvcnkgfTtcbmltcG9ydCBfY3JlYXRlSGFzaEhpc3RvcnkgZnJvbSAnLi9jcmVhdGVIYXNoSGlzdG9yeSc7XG5leHBvcnQgeyBfY3JlYXRlSGFzaEhpc3RvcnkgYXMgY3JlYXRlSGFzaEhpc3RvcnkgfTtcbmltcG9ydCBfY3JlYXRlTWVtb3J5SGlzdG9yeSBmcm9tICcuL2NyZWF0ZU1lbW9yeUhpc3RvcnknO1xuZXhwb3J0IHsgX2NyZWF0ZU1lbW9yeUhpc3RvcnkgYXMgY3JlYXRlTWVtb3J5SGlzdG9yeSB9O1xuXG5leHBvcnQgeyBjcmVhdGVMb2NhdGlvbiwgbG9jYXRpb25zQXJlRXF1YWwgfSBmcm9tICcuL0xvY2F0aW9uVXRpbHMnO1xuZXhwb3J0IHsgcGFyc2VQYXRoLCBjcmVhdGVQYXRoIH0gZnJvbSAnLi9QYXRoVXRpbHMnOyIsIid1c2Ugc3RyaWN0JztcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gICAgY2hpbGRDb250ZXh0VHlwZXM6IHRydWUsXG4gICAgY29udGV4dFR5cGVzOiB0cnVlLFxuICAgIGRlZmF1bHRQcm9wczogdHJ1ZSxcbiAgICBkaXNwbGF5TmFtZTogdHJ1ZSxcbiAgICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gICAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICAgIG1peGluczogdHJ1ZSxcbiAgICBwcm9wVHlwZXM6IHRydWUsXG4gICAgdHlwZTogdHJ1ZVxufTtcblxudmFyIEtOT1dOX1NUQVRJQ1MgPSB7XG4gICAgbmFtZTogdHJ1ZSxcbiAgICBsZW5ndGg6IHRydWUsXG4gICAgcHJvdG90eXBlOiB0cnVlLFxuICAgIGNhbGxlcjogdHJ1ZSxcbiAgICBjYWxsZWU6IHRydWUsXG4gICAgYXJndW1lbnRzOiB0cnVlLFxuICAgIGFyaXR5OiB0cnVlXG59O1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG52YXIgZ2V0T3duUHJvcGVydHlOYW1lcyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzO1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcbnZhciBnZXRQcm90b3R5cGVPZiA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcbnZhciBvYmplY3RQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZiAmJiBnZXRQcm90b3R5cGVPZihPYmplY3QpO1xuXG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gICAgaWYgKHR5cGVvZiBzb3VyY2VDb21wb25lbnQgIT09ICdzdHJpbmcnKSB7IC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG5cbiAgICAgICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG4gICAgICAgICAgICBpZiAoaW5oZXJpdGVkQ29tcG9uZW50ICYmIGluaGVyaXRlZENvbXBvbmVudCAhPT0gb2JqZWN0UHJvdG90eXBlKSB7XG4gICAgICAgICAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIga2V5cyA9IGdldE93blByb3BlcnR5TmFtZXMoc291cmNlQ29tcG9uZW50KTtcblxuICAgICAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICAgICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgICAgIGlmICghUkVBQ1RfU1RBVElDU1trZXldICYmICFLTk9XTl9TVEFUSUNTW2tleV0gJiYgKCFibGFja2xpc3QgfHwgIWJsYWNrbGlzdFtrZXldKSkge1xuICAgICAgICAgICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcbiAgICAgICAgICAgICAgICB0cnkgeyAvLyBBdm9pZCBmYWlsdXJlcyBmcm9tIHJlYWQtb25seSBwcm9wZXJ0aWVzXG4gICAgICAgICAgICAgICAgICAgIGRlZmluZVByb3BlcnR5KHRhcmdldENvbXBvbmVudCwga2V5LCBkZXNjcmlwdG9yKTtcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGFyZ2V0Q29tcG9uZW50O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGhvaXN0Tm9uUmVhY3RTdGF0aWNzO1xuIiwidmFyIGFycmF5V2l0aEhvbGVzID0gcmVxdWlyZShcIi4vYXJyYXlXaXRoSG9sZXNcIik7XG5cbnZhciBpdGVyYWJsZVRvQXJyYXlMaW1pdCA9IHJlcXVpcmUoXCIuL2l0ZXJhYmxlVG9BcnJheUxpbWl0XCIpO1xuXG52YXIgbm9uSXRlcmFibGVSZXN0ID0gcmVxdWlyZShcIi4vbm9uSXRlcmFibGVSZXN0XCIpO1xuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHtcbiAgcmV0dXJuIGFycmF5V2l0aEhvbGVzKGFycikgfHwgaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBub25JdGVyYWJsZVJlc3QoKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfc2xpY2VkVG9BcnJheTsiLCJtb2R1bGUuZXhwb3J0cyA9IHtcbiAgICBwYXJzZTogcmVxdWlyZSgnLi9saWIvcGFyc2UnKSxcbiAgICBzdHJpbmdpZnk6IHJlcXVpcmUoJy4vbGliL3N0cmluZ2lmeScpXG59O1xuIiwidmFyIF90eXBlb2YgPSByZXF1aXJlKFwiLi4vaGVscGVycy90eXBlb2ZcIik7XG5cbnZhciBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQgPSByZXF1aXJlKFwiLi9hc3NlcnRUaGlzSW5pdGlhbGl6ZWRcIik7XG5cbmZ1bmN0aW9uIF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHNlbGYsIGNhbGwpIHtcbiAgaWYgKGNhbGwgJiYgKF90eXBlb2YoY2FsbCkgPT09IFwib2JqZWN0XCIgfHwgdHlwZW9mIGNhbGwgPT09IFwiZnVuY3Rpb25cIikpIHtcbiAgICByZXR1cm4gY2FsbDtcbiAgfVxuXG4gIHJldHVybiBhc3NlcnRUaGlzSW5pdGlhbGl6ZWQoc2VsZik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm47IiwidmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZShcIi4vZGVmaW5lUHJvcGVydHlcIik7XG5cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG4gICAgdmFyIG93bktleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuXG4gICAgaWYgKHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBvd25LZXlzID0gb3duS2V5cy5jb25jYXQoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgICAgIHJldHVybiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwgc3ltKS5lbnVtZXJhYmxlO1xuICAgICAgfSkpO1xuICAgIH1cblxuICAgIG93bktleXMuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgc291cmNlW2tleV0pO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfb2JqZWN0U3ByZWFkOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2NsYXNzQ2FsbENoZWNrOyIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY3JlYXRlQ2xhc3M7IiwiZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSBfZ2V0UHJvdG90eXBlT2YgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiBfZ2V0UHJvdG90eXBlT2Yobykge1xuICAgIHJldHVybiBvLl9fcHJvdG9fXyB8fCBPYmplY3QuZ2V0UHJvdG90eXBlT2Yobyk7XG4gIH07XG4gIHJldHVybiBfZ2V0UHJvdG90eXBlT2Yobyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2dldFByb3RvdHlwZU9mOyIsInZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoXCIuL3NldFByb3RvdHlwZU9mXCIpO1xuXG5mdW5jdGlvbiBfaW5oZXJpdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgaWYgKHR5cGVvZiBzdXBlckNsYXNzICE9PSBcImZ1bmN0aW9uXCIgJiYgc3VwZXJDbGFzcyAhPT0gbnVsbCkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvblwiKTtcbiAgfVxuXG4gIHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogc3ViQ2xhc3MsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG4gIGlmIChzdXBlckNsYXNzKSBzZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcyk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2luaGVyaXRzOyIsImNsYXNzIFV0aWxzIHtcbiAgLyoqXG4gICAqIEdldCBmaXJzdCBtYXRjaGVkIGl0ZW0gZm9yIGEgc3RyaW5nXG4gICAqIEBwYXJhbSB7UmVnRXhwfSByZWdleHBcbiAgICogQHBhcmFtIHtTdHJpbmd9IHVhXG4gICAqIEByZXR1cm4ge0FycmF5fHtpbmRleDogbnVtYmVyLCBpbnB1dDogc3RyaW5nfXwqfGJvb2xlYW58c3RyaW5nfVxuICAgKi9cbiAgc3RhdGljIGdldEZpcnN0TWF0Y2gocmVnZXhwLCB1YSkge1xuICAgIGNvbnN0IG1hdGNoID0gdWEubWF0Y2gocmVnZXhwKTtcbiAgICByZXR1cm4gKG1hdGNoICYmIG1hdGNoLmxlbmd0aCA+IDAgJiYgbWF0Y2hbMV0pIHx8ICcnO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBzZWNvbmQgbWF0Y2hlZCBpdGVtIGZvciBhIHN0cmluZ1xuICAgKiBAcGFyYW0gcmVnZXhwXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB1YVxuICAgKiBAcmV0dXJuIHtBcnJheXx7aW5kZXg6IG51bWJlciwgaW5wdXQ6IHN0cmluZ318Knxib29sZWFufHN0cmluZ31cbiAgICovXG4gIHN0YXRpYyBnZXRTZWNvbmRNYXRjaChyZWdleHAsIHVhKSB7XG4gICAgY29uc3QgbWF0Y2ggPSB1YS5tYXRjaChyZWdleHApO1xuICAgIHJldHVybiAobWF0Y2ggJiYgbWF0Y2gubGVuZ3RoID4gMSAmJiBtYXRjaFsyXSkgfHwgJyc7XG4gIH1cblxuICAvKipcbiAgICogTWF0Y2ggYSByZWdleHAgYW5kIHJldHVybiBhIGNvbnN0YW50IG9yIHVuZGVmaW5lZFxuICAgKiBAcGFyYW0ge1JlZ0V4cH0gcmVnZXhwXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB1YVxuICAgKiBAcGFyYW0geyp9IF9jb25zdCBBbnkgY29uc3QgdGhhdCB3aWxsIGJlIHJldHVybmVkIGlmIHJlZ2V4cCBtYXRjaGVzIHRoZSBzdHJpbmdcbiAgICogQHJldHVybiB7Kn1cbiAgICovXG4gIHN0YXRpYyBtYXRjaEFuZFJldHVybkNvbnN0KHJlZ2V4cCwgdWEsIF9jb25zdCkge1xuICAgIGlmIChyZWdleHAudGVzdCh1YSkpIHtcbiAgICAgIHJldHVybiBfY29uc3Q7XG4gICAgfVxuICAgIHJldHVybiB2b2lkICgwKTtcbiAgfVxuXG4gIHN0YXRpYyBnZXRXaW5kb3dzVmVyc2lvbk5hbWUodmVyc2lvbikge1xuICAgIHN3aXRjaCAodmVyc2lvbikge1xuICAgICAgY2FzZSAnTlQnOiByZXR1cm4gJ05UJztcbiAgICAgIGNhc2UgJ1hQJzogcmV0dXJuICdYUCc7XG4gICAgICBjYXNlICdOVCA1LjAnOiByZXR1cm4gJzIwMDAnO1xuICAgICAgY2FzZSAnTlQgNS4xJzogcmV0dXJuICdYUCc7XG4gICAgICBjYXNlICdOVCA1LjInOiByZXR1cm4gJzIwMDMnO1xuICAgICAgY2FzZSAnTlQgNi4wJzogcmV0dXJuICdWaXN0YSc7XG4gICAgICBjYXNlICdOVCA2LjEnOiByZXR1cm4gJzcnO1xuICAgICAgY2FzZSAnTlQgNi4yJzogcmV0dXJuICc4JztcbiAgICAgIGNhc2UgJ05UIDYuMyc6IHJldHVybiAnOC4xJztcbiAgICAgIGNhc2UgJ05UIDEwLjAnOiByZXR1cm4gJzEwJztcbiAgICAgIGRlZmF1bHQ6IHJldHVybiB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB2ZXJzaW9uIHByZWNpc2lvbnMgY291bnRcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogICBnZXRWZXJzaW9uUHJlY2lzaW9uKFwiMS4xMC4zXCIpIC8vIDNcbiAgICpcbiAgICogQHBhcmFtICB7c3RyaW5nfSB2ZXJzaW9uXG4gICAqIEByZXR1cm4ge251bWJlcn1cbiAgICovXG4gIHN0YXRpYyBnZXRWZXJzaW9uUHJlY2lzaW9uKHZlcnNpb24pIHtcbiAgICByZXR1cm4gdmVyc2lvbi5zcGxpdCgnLicpLmxlbmd0aDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxjdWxhdGUgYnJvd3NlciB2ZXJzaW9uIHdlaWdodFxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiAgIGNvbXBhcmVWZXJzaW9ucygnMS4xMC4yLjEnLCAgJzEuOC4yLjEuOTAnKSAgICAvLyAxXG4gICAqICAgY29tcGFyZVZlcnNpb25zKCcxLjAxMC4yLjEnLCAnMS4wOS4yLjEuOTAnKTsgIC8vIDFcbiAgICogICBjb21wYXJlVmVyc2lvbnMoJzEuMTAuMi4xJywgICcxLjEwLjIuMScpOyAgICAgLy8gMFxuICAgKiAgIGNvbXBhcmVWZXJzaW9ucygnMS4xMC4yLjEnLCAgJzEuMDgwMC4yJyk7ICAgICAvLyAtMVxuICAgKiAgIGNvbXBhcmVWZXJzaW9ucygnMS4xMC4yLjEnLCAgJzEuMTAnLCAgdHJ1ZSk7ICAvLyAwXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB2ZXJzaW9uQSB2ZXJzaW9ucyB2ZXJzaW9ucyB0byBjb21wYXJlXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB2ZXJzaW9uQiB2ZXJzaW9ucyB2ZXJzaW9ucyB0byBjb21wYXJlXG4gICAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzTG9vc2VdIGVuYWJsZSBsb29zZSBjb21wYXJpc29uXG4gICAqIEByZXR1cm4ge051bWJlcn0gY29tcGFyaXNvbiByZXN1bHQ6IC0xIHdoZW4gdmVyc2lvbkEgaXMgbG93ZXIsXG4gICAqIDEgd2hlbiB2ZXJzaW9uQSBpcyBiaWdnZXIsIDAgd2hlbiBib3RoIGVxdWFsXG4gICAqL1xuICAvKiBlc2xpbnQgY29uc2lzdGVudC1yZXR1cm46IDEgKi9cbiAgc3RhdGljIGNvbXBhcmVWZXJzaW9ucyh2ZXJzaW9uQSwgdmVyc2lvbkIsIGlzTG9vc2UgPSBmYWxzZSkge1xuICAgIC8vIDEpIGdldCBjb21tb24gcHJlY2lzaW9uIGZvciBib3RoIHZlcnNpb25zLCBmb3IgZXhhbXBsZSBmb3IgXCIxMC4wXCIgYW5kIFwiOVwiIGl0IHNob3VsZCBiZSAyXG4gICAgY29uc3QgdmVyc2lvbkFQcmVjaXNpb24gPSBVdGlscy5nZXRWZXJzaW9uUHJlY2lzaW9uKHZlcnNpb25BKTtcbiAgICBjb25zdCB2ZXJzaW9uQlByZWNpc2lvbiA9IFV0aWxzLmdldFZlcnNpb25QcmVjaXNpb24odmVyc2lvbkIpO1xuXG4gICAgbGV0IHByZWNpc2lvbiA9IE1hdGgubWF4KHZlcnNpb25BUHJlY2lzaW9uLCB2ZXJzaW9uQlByZWNpc2lvbik7XG4gICAgbGV0IGxhc3RQcmVjaXNpb24gPSAwO1xuXG4gICAgY29uc3QgY2h1bmtzID0gVXRpbHMubWFwKFt2ZXJzaW9uQSwgdmVyc2lvbkJdLCAodmVyc2lvbikgPT4ge1xuICAgICAgY29uc3QgZGVsdGEgPSBwcmVjaXNpb24gLSBVdGlscy5nZXRWZXJzaW9uUHJlY2lzaW9uKHZlcnNpb24pO1xuXG4gICAgICAvLyAyKSBcIjlcIiAtPiBcIjkuMFwiIChmb3IgcHJlY2lzaW9uID0gMilcbiAgICAgIGNvbnN0IF92ZXJzaW9uID0gdmVyc2lvbiArIG5ldyBBcnJheShkZWx0YSArIDEpLmpvaW4oJy4wJyk7XG5cbiAgICAgIC8vIDMpIFwiOS4wXCIgLT4gW1wiMDAwMDAwMDAwXCJcIiwgXCIwMDAwMDAwMDlcIl1cbiAgICAgIHJldHVybiBVdGlscy5tYXAoX3ZlcnNpb24uc3BsaXQoJy4nKSwgY2h1bmsgPT4gbmV3IEFycmF5KDIwIC0gY2h1bmsubGVuZ3RoKS5qb2luKCcwJykgKyBjaHVuaykucmV2ZXJzZSgpO1xuICAgIH0pO1xuXG4gICAgLy8gYWRqdXN0IHByZWNpc2lvbiBmb3IgbG9vc2UgY29tcGFyaXNvblxuICAgIGlmIChpc0xvb3NlKSB7XG4gICAgICBsYXN0UHJlY2lzaW9uID0gcHJlY2lzaW9uIC0gTWF0aC5taW4odmVyc2lvbkFQcmVjaXNpb24sIHZlcnNpb25CUHJlY2lzaW9uKTtcbiAgICB9XG5cbiAgICAvLyBpdGVyYXRlIGluIHJldmVyc2Ugb3JkZXIgYnkgcmV2ZXJzZWQgY2h1bmtzIGFycmF5XG4gICAgcHJlY2lzaW9uIC09IDE7XG4gICAgd2hpbGUgKHByZWNpc2lvbiA+PSBsYXN0UHJlY2lzaW9uKSB7XG4gICAgICAvLyA0KSBjb21wYXJlOiBcIjAwMDAwMDAwOVwiID4gXCIwMDAwMDAwMTBcIiA9IGZhbHNlIChidXQgXCI5XCIgPiBcIjEwXCIgPSB0cnVlKVxuICAgICAgaWYgKGNodW5rc1swXVtwcmVjaXNpb25dID4gY2h1bmtzWzFdW3ByZWNpc2lvbl0pIHtcbiAgICAgICAgcmV0dXJuIDE7XG4gICAgICB9XG5cbiAgICAgIGlmIChjaHVua3NbMF1bcHJlY2lzaW9uXSA9PT0gY2h1bmtzWzFdW3ByZWNpc2lvbl0pIHtcbiAgICAgICAgaWYgKHByZWNpc2lvbiA9PT0gbGFzdFByZWNpc2lvbikge1xuICAgICAgICAgIC8vIGFsbCB2ZXJzaW9uIGNodW5rcyBhcmUgc2FtZVxuICAgICAgICAgIHJldHVybiAwO1xuICAgICAgICB9XG5cbiAgICAgICAgcHJlY2lzaW9uIC09IDE7XG4gICAgICB9IGVsc2UgaWYgKGNodW5rc1swXVtwcmVjaXNpb25dIDwgY2h1bmtzWzFdW3ByZWNpc2lvbl0pIHtcbiAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBBcnJheTo6bWFwIHBvbHlmaWxsXG4gICAqXG4gICAqIEBwYXJhbSAge0FycmF5fSBhcnJcbiAgICogQHBhcmFtICB7RnVuY3Rpb259IGl0ZXJhdG9yXG4gICAqIEByZXR1cm4ge0FycmF5fVxuICAgKi9cbiAgc3RhdGljIG1hcChhcnIsIGl0ZXJhdG9yKSB7XG4gICAgY29uc3QgcmVzdWx0ID0gW107XG4gICAgbGV0IGk7XG4gICAgaWYgKEFycmF5LnByb3RvdHlwZS5tYXApIHtcbiAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUubWFwLmNhbGwoYXJyLCBpdGVyYXRvcik7XG4gICAgfVxuICAgIGZvciAoaSA9IDA7IGkgPCBhcnIubGVuZ3RoOyBpICs9IDEpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGl0ZXJhdG9yKGFycltpXSkpO1xuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gVXRpbHM7XG4iLCJmdW5jdGlvbiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGFycikpIHJldHVybiBhcnI7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2FycmF5V2l0aEhvbGVzOyIsImZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHtcbiAgdmFyIF9hcnIgPSBbXTtcbiAgdmFyIF9uID0gdHJ1ZTtcbiAgdmFyIF9kID0gZmFsc2U7XG4gIHZhciBfZSA9IHVuZGVmaW5lZDtcblxuICB0cnkge1xuICAgIGZvciAodmFyIF9pID0gYXJyW1N5bWJvbC5pdGVyYXRvcl0oKSwgX3M7ICEoX24gPSAoX3MgPSBfaS5uZXh0KCkpLmRvbmUpOyBfbiA9IHRydWUpIHtcbiAgICAgIF9hcnIucHVzaChfcy52YWx1ZSk7XG5cbiAgICAgIGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhaztcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIF9kID0gdHJ1ZTtcbiAgICBfZSA9IGVycjtcbiAgfSBmaW5hbGx5IHtcbiAgICB0cnkge1xuICAgICAgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBpZiAoX2QpIHRocm93IF9lO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBfYXJyO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pdGVyYWJsZVRvQXJyYXlMaW1pdDsiLCJmdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkge1xuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZVwiKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfbm9uSXRlcmFibGVSZXN0OyIsImZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHtcbiAgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307XG4gIHZhciB0YXJnZXQgPSB7fTtcbiAgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpO1xuICB2YXIga2V5LCBpO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAga2V5ID0gc291cmNlS2V5c1tpXTtcbiAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlOyIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9kZWZpbmVQcm9wZXJ0eTsiLCJmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICBtb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZiA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCBmdW5jdGlvbiBfc2V0UHJvdG90eXBlT2YobywgcCkge1xuICAgIG8uX19wcm90b19fID0gcDtcbiAgICByZXR1cm4gbztcbiAgfTtcblxuICByZXR1cm4gX3NldFByb3RvdHlwZU9mKG8sIHApO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9zZXRQcm90b3R5cGVPZjsiLCIvKmpzaGludCAtVzAzMCAqL1xudmFyIHRhZ1JFID0gLyg/OjwhLS1bXFxTXFxzXSo/LS0+fDwoPzpcIlteXCJdKlwiWydcIl0qfCdbXiddKidbJ1wiXSp8W14nXCI+XSkrPikvZztcbnZhciBwYXJzZVRhZyA9IHJlcXVpcmUoJy4vcGFyc2UtdGFnJyk7XG4vLyByZS11c2VkIG9iaiBmb3IgcXVpY2sgbG9va3VwcyBvZiBjb21wb25lbnRzXG52YXIgZW1wdHkgPSBPYmplY3QuY3JlYXRlID8gT2JqZWN0LmNyZWF0ZShudWxsKSA6IHt9O1xuLy8gY29tbW9uIGxvZ2ljIGZvciBwdXNoaW5nIGEgY2hpbGQgbm9kZSBvbnRvIGEgbGlzdFxuZnVuY3Rpb24gcHVzaFRleHROb2RlKGxpc3QsIGh0bWwsIGxldmVsLCBzdGFydCwgaWdub3JlV2hpdGVzcGFjZSkge1xuICAgIC8vIGNhbGN1bGF0ZSBjb3JyZWN0IGVuZCBvZiB0aGUgY29udGVudCBzbGljZSBpbiBjYXNlIHRoZXJlJ3NcbiAgICAvLyBubyB0YWcgYWZ0ZXIgdGhlIHRleHQgbm9kZS5cbiAgICB2YXIgZW5kID0gaHRtbC5pbmRleE9mKCc8Jywgc3RhcnQpO1xuICAgIHZhciBjb250ZW50ID0gaHRtbC5zbGljZShzdGFydCwgZW5kID09PSAtMSA/IHVuZGVmaW5lZCA6IGVuZCk7XG4gICAgLy8gaWYgYSBub2RlIGlzIG5vdGhpbmcgYnV0IHdoaXRlc3BhY2UsIGNvbGxhcHNlIGl0IGFzIHRoZSBzcGVjIHN0YXRlczpcbiAgICAvLyBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDQvc3RydWN0L3RleHQuaHRtbCNoLTkuMVxuICAgIGlmICgvXlxccyokLy50ZXN0KGNvbnRlbnQpKSB7XG4gICAgICAgIGNvbnRlbnQgPSAnICc7XG4gICAgfVxuICAgIC8vIGRvbid0IGFkZCB3aGl0ZXNwYWNlLW9ubHkgdGV4dCBub2RlcyBpZiB0aGV5IHdvdWxkIGJlIHRyYWlsaW5nIHRleHQgbm9kZXNcbiAgICAvLyBvciBpZiB0aGV5IHdvdWxkIGJlIGxlYWRpbmcgd2hpdGVzcGFjZS1vbmx5IHRleHQgbm9kZXM6XG4gICAgLy8gICogZW5kID4gLTEgaW5kaWNhdGVzIHRoaXMgaXMgbm90IGEgdHJhaWxpbmcgdGV4dCBub2RlXG4gICAgLy8gICogbGVhZGluZyBub2RlIGlzIHdoZW4gbGV2ZWwgaXMgLTEgYW5kIGxpc3QgaGFzIGxlbmd0aCAwXG4gICAgaWYgKCghaWdub3JlV2hpdGVzcGFjZSAmJiBlbmQgPiAtMSAmJiBsZXZlbCArIGxpc3QubGVuZ3RoID49IDApIHx8IGNvbnRlbnQgIT09ICcgJykge1xuICAgICAgICBsaXN0LnB1c2goe1xuICAgICAgICAgICAgdHlwZTogJ3RleHQnLFxuICAgICAgICAgICAgY29udGVudDogY29udGVudFxuICAgICAgICB9KTtcbiAgICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gcGFyc2UoaHRtbCwgb3B0aW9ucykge1xuICAgIG9wdGlvbnMgfHwgKG9wdGlvbnMgPSB7fSk7XG4gICAgb3B0aW9ucy5jb21wb25lbnRzIHx8IChvcHRpb25zLmNvbXBvbmVudHMgPSBlbXB0eSk7XG4gICAgdmFyIHJlc3VsdCA9IFtdO1xuICAgIHZhciBjdXJyZW50O1xuICAgIHZhciBsZXZlbCA9IC0xO1xuICAgIHZhciBhcnIgPSBbXTtcbiAgICB2YXIgYnlUYWcgPSB7fTtcbiAgICB2YXIgaW5Db21wb25lbnQgPSBmYWxzZTtcblxuICAgIGh0bWwucmVwbGFjZSh0YWdSRSwgZnVuY3Rpb24gKHRhZywgaW5kZXgpIHtcbiAgICAgICAgaWYgKGluQ29tcG9uZW50KSB7XG4gICAgICAgICAgICBpZiAodGFnICE9PSAoJzwvJyArIGN1cnJlbnQubmFtZSArICc+JykpIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIGluQ29tcG9uZW50ID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgaXNPcGVuID0gdGFnLmNoYXJBdCgxKSAhPT0gJy8nO1xuICAgICAgICB2YXIgaXNDb21tZW50ID0gdGFnLmluZGV4T2YoJzwhLS0nKSA9PT0gMDtcbiAgICAgICAgdmFyIHN0YXJ0ID0gaW5kZXggKyB0YWcubGVuZ3RoO1xuICAgICAgICB2YXIgbmV4dENoYXIgPSBodG1sLmNoYXJBdChzdGFydCk7XG4gICAgICAgIHZhciBwYXJlbnQ7XG5cbiAgICAgICAgaWYgKGlzT3BlbiAmJiAhaXNDb21tZW50KSB7XG4gICAgICAgICAgICBsZXZlbCsrO1xuXG4gICAgICAgICAgICBjdXJyZW50ID0gcGFyc2VUYWcodGFnKTtcbiAgICAgICAgICAgIGlmIChjdXJyZW50LnR5cGUgPT09ICd0YWcnICYmIG9wdGlvbnMuY29tcG9uZW50c1tjdXJyZW50Lm5hbWVdKSB7XG4gICAgICAgICAgICAgICAgY3VycmVudC50eXBlID0gJ2NvbXBvbmVudCc7XG4gICAgICAgICAgICAgICAgaW5Db21wb25lbnQgPSB0cnVlO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpZiAoIWN1cnJlbnQudm9pZEVsZW1lbnQgJiYgIWluQ29tcG9uZW50ICYmIG5leHRDaGFyICYmIG5leHRDaGFyICE9PSAnPCcpIHtcbiAgICAgICAgICAgICAgICBwdXNoVGV4dE5vZGUoY3VycmVudC5jaGlsZHJlbiwgaHRtbCwgbGV2ZWwsIHN0YXJ0LCBvcHRpb25zLmlnbm9yZVdoaXRlc3BhY2UpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBieVRhZ1tjdXJyZW50LnRhZ05hbWVdID0gY3VycmVudDtcblxuICAgICAgICAgICAgLy8gaWYgd2UncmUgYXQgcm9vdCwgcHVzaCBuZXcgYmFzZSBub2RlXG4gICAgICAgICAgICBpZiAobGV2ZWwgPT09IDApIHtcbiAgICAgICAgICAgICAgICByZXN1bHQucHVzaChjdXJyZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcGFyZW50ID0gYXJyW2xldmVsIC0gMV07XG5cbiAgICAgICAgICAgIGlmIChwYXJlbnQpIHtcbiAgICAgICAgICAgICAgICBwYXJlbnQuY2hpbGRyZW4ucHVzaChjdXJyZW50KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgYXJyW2xldmVsXSA9IGN1cnJlbnQ7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoaXNDb21tZW50IHx8ICFpc09wZW4gfHwgY3VycmVudC52b2lkRWxlbWVudCkge1xuICAgICAgICAgICAgaWYgKCFpc0NvbW1lbnQpIHtcbiAgICAgICAgICAgICAgICBsZXZlbC0tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFpbkNvbXBvbmVudCAmJiBuZXh0Q2hhciAhPT0gJzwnICYmIG5leHRDaGFyKSB7XG4gICAgICAgICAgICAgICAgLy8gdHJhaWxpbmcgdGV4dCBub2RlXG4gICAgICAgICAgICAgICAgLy8gaWYgd2UncmUgYXQgdGhlIHJvb3QsIHB1c2ggYSBiYXNlIHRleHQgbm9kZS4gb3RoZXJ3aXNlIGFkZCBhc1xuICAgICAgICAgICAgICAgIC8vIGEgY2hpbGQgdG8gdGhlIGN1cnJlbnQgbm9kZS5cbiAgICAgICAgICAgICAgICBwYXJlbnQgPSBsZXZlbCA9PT0gLTEgPyByZXN1bHQgOiBhcnJbbGV2ZWxdLmNoaWxkcmVuO1xuICAgICAgICAgICAgICAgIHB1c2hUZXh0Tm9kZShwYXJlbnQsIGh0bWwsIGxldmVsLCBzdGFydCwgb3B0aW9ucy5pZ25vcmVXaGl0ZXNwYWNlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gSWYgdGhlIFwiaHRtbFwiIHBhc3NlZCBpc24ndCBhY3R1YWxseSBodG1sLCBhZGQgaXQgYXMgYSB0ZXh0IG5vZGUuXG4gICAgaWYgKCFyZXN1bHQubGVuZ3RoICYmIGh0bWwubGVuZ3RoKSB7XG4gICAgICAgIHB1c2hUZXh0Tm9kZShyZXN1bHQsIGh0bWwsIDAsIDAsIG9wdGlvbnMuaWdub3JlV2hpdGVzcGFjZSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbn07XG4iLCJ2YXIgYXR0clJFID0gLyhbXFx3LV0rKXw9fChbJ1wiXSkoWy5cXHNcXFNdKj8pXFwyL2c7XG52YXIgdm9pZEVsZW1lbnRzID0gcmVxdWlyZSgndm9pZC1lbGVtZW50cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgICB2YXIgaSA9IDA7XG4gICAgdmFyIGtleTtcbiAgICB2YXIgZXhwZWN0aW5nVmFsdWVBZnRlckVxdWFscyA9IHRydWU7XG4gICAgdmFyIHJlcyA9IHtcbiAgICAgICAgdHlwZTogJ3RhZycsXG4gICAgICAgIG5hbWU6ICcnLFxuICAgICAgICB2b2lkRWxlbWVudDogZmFsc2UsXG4gICAgICAgIGF0dHJzOiB7fSxcbiAgICAgICAgY2hpbGRyZW46IFtdXG4gICAgfTtcblxuICAgIHRhZy5yZXBsYWNlKGF0dHJSRSwgZnVuY3Rpb24gKG1hdGNoKSB7XG4gICAgICAgIGlmIChtYXRjaCA9PT0gJz0nKSB7XG4gICAgICAgICAgICBleHBlY3RpbmdWYWx1ZUFmdGVyRXF1YWxzID0gdHJ1ZTtcbiAgICAgICAgICAgIGkrKztcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghZXhwZWN0aW5nVmFsdWVBZnRlckVxdWFscykge1xuICAgICAgICAgICAgaWYgKGtleSkge1xuICAgICAgICAgICAgICAgIHJlcy5hdHRyc1trZXldID0ga2V5OyAvLyBib29sZWFuIGF0dHJpYnV0ZVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAga2V5PW1hdGNoO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgaWYgKGkgPT09IDApIHtcbiAgICAgICAgICAgICAgICBpZiAodm9pZEVsZW1lbnRzW21hdGNoXSB8fCB0YWcuY2hhckF0KHRhZy5sZW5ndGggLSAyKSA9PT0gJy8nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcy52b2lkRWxlbWVudCA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJlcy5uYW1lID0gbWF0Y2g7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHJlcy5hdHRyc1trZXldID0gbWF0Y2gucmVwbGFjZSgvXlsnXCJdfFsnXCJdJC9nLCAnJyk7XG4gICAgICAgICAgICAgICAga2V5PXVuZGVmaW5lZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpKys7XG4gICAgICAgIGV4cGVjdGluZ1ZhbHVlQWZ0ZXJFcXVhbHMgPSBmYWxzZTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXM7XG59O1xuIiwiZnVuY3Rpb24gYXR0clN0cmluZyhhdHRycykge1xuICAgIHZhciBidWZmID0gW107XG4gICAgZm9yICh2YXIga2V5IGluIGF0dHJzKSB7XG4gICAgICAgIGJ1ZmYucHVzaChrZXkgKyAnPVwiJyArIGF0dHJzW2tleV0gKyAnXCInKTtcbiAgICB9XG4gICAgaWYgKCFidWZmLmxlbmd0aCkge1xuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxuICAgIHJldHVybiAnICcgKyBidWZmLmpvaW4oJyAnKTtcbn1cblxuZnVuY3Rpb24gc3RyaW5naWZ5KGJ1ZmYsIGRvYykge1xuICAgIHN3aXRjaCAoZG9jLnR5cGUpIHtcbiAgICBjYXNlICd0ZXh0JzpcbiAgICAgICAgcmV0dXJuIGJ1ZmYgKyBkb2MuY29udGVudDtcbiAgICBjYXNlICd0YWcnOlxuICAgICAgICBidWZmICs9ICc8JyArIGRvYy5uYW1lICsgKGRvYy5hdHRycyA/IGF0dHJTdHJpbmcoZG9jLmF0dHJzKSA6ICcnKSArIChkb2Mudm9pZEVsZW1lbnQgPyAnLz4nIDogJz4nKTtcbiAgICAgICAgaWYgKGRvYy52b2lkRWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuIGJ1ZmY7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGJ1ZmYgKyBkb2MuY2hpbGRyZW4ucmVkdWNlKHN0cmluZ2lmeSwgJycpICsgJzwvJyArIGRvYy5uYW1lICsgJz4nO1xuICAgIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZG9jKSB7XG4gICAgcmV0dXJuIGRvYy5yZWR1Y2UoZnVuY3Rpb24gKHRva2VuLCByb290RWwpIHtcbiAgICAgICAgcmV0dXJuIHRva2VuICsgc3RyaW5naWZ5KCcnLCByb290RWwpO1xuICAgIH0sICcnKTtcbn07XG4iLCJ2YXIgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9O1xuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfdG9Db25zdW1hYmxlQXJyYXkoYXJyKSB7IGlmIChBcnJheS5pc0FycmF5KGFycikpIHsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBBcnJheShhcnIubGVuZ3RoKTsgaSA8IGFyci5sZW5ndGg7IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9IGVsc2UgeyByZXR1cm4gQXJyYXkuZnJvbShhcnIpOyB9IH1cblxudmFyIGNvbnNvbGVMb2dnZXIgPSB7XG4gIHR5cGU6ICdsb2dnZXInLFxuXG4gIGxvZzogZnVuY3Rpb24gbG9nKGFyZ3MpIHtcbiAgICB0aGlzLm91dHB1dCgnbG9nJywgYXJncyk7XG4gIH0sXG4gIHdhcm46IGZ1bmN0aW9uIHdhcm4oYXJncykge1xuICAgIHRoaXMub3V0cHV0KCd3YXJuJywgYXJncyk7XG4gIH0sXG4gIGVycm9yOiBmdW5jdGlvbiBlcnJvcihhcmdzKSB7XG4gICAgdGhpcy5vdXRwdXQoJ2Vycm9yJywgYXJncyk7XG4gIH0sXG4gIG91dHB1dDogZnVuY3Rpb24gb3V0cHV0KHR5cGUsIGFyZ3MpIHtcbiAgICB2YXIgX2NvbnNvbGU7XG5cbiAgICAvKiBlc2xpbnQgbm8tY29uc29sZTogMCAqL1xuICAgIGlmIChjb25zb2xlICYmIGNvbnNvbGVbdHlwZV0pIChfY29uc29sZSA9IGNvbnNvbGUpW3R5cGVdLmFwcGx5KF9jb25zb2xlLCBfdG9Db25zdW1hYmxlQXJyYXkoYXJncykpO1xuICB9XG59O1xuXG52YXIgTG9nZ2VyID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBMb2dnZXIoY29uY3JldGVMb2dnZXIpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTG9nZ2VyKTtcblxuICAgIHRoaXMuaW5pdChjb25jcmV0ZUxvZ2dlciwgb3B0aW9ucyk7XG4gIH1cblxuICBMb2dnZXIucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiBpbml0KGNvbmNyZXRlTG9nZ2VyKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgdGhpcy5wcmVmaXggPSBvcHRpb25zLnByZWZpeCB8fCAnaTE4bmV4dDonO1xuICAgIHRoaXMubG9nZ2VyID0gY29uY3JldGVMb2dnZXIgfHwgY29uc29sZUxvZ2dlcjtcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIHRoaXMuZGVidWcgPSBvcHRpb25zLmRlYnVnO1xuICB9O1xuXG4gIExvZ2dlci5wcm90b3R5cGUuc2V0RGVidWcgPSBmdW5jdGlvbiBzZXREZWJ1Zyhib29sKSB7XG4gICAgdGhpcy5kZWJ1ZyA9IGJvb2w7XG4gIH07XG5cbiAgTG9nZ2VyLnByb3RvdHlwZS5sb2cgPSBmdW5jdGlvbiBsb2coKSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuKSwgX2tleSA9IDA7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICAgIGFyZ3NbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZm9yd2FyZChhcmdzLCAnbG9nJywgJycsIHRydWUpO1xuICB9O1xuXG4gIExvZ2dlci5wcm90b3R5cGUud2FybiA9IGZ1bmN0aW9uIHdhcm4oKSB7XG4gICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbjIpLCBfa2V5MiA9IDA7IF9rZXkyIDwgX2xlbjI7IF9rZXkyKyspIHtcbiAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5mb3J3YXJkKGFyZ3MsICd3YXJuJywgJycsIHRydWUpO1xuICB9O1xuXG4gIExvZ2dlci5wcm90b3R5cGUuZXJyb3IgPSBmdW5jdGlvbiBlcnJvcigpIHtcbiAgICBmb3IgKHZhciBfbGVuMyA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMyksIF9rZXkzID0gMDsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgICAgYXJnc1tfa2V5M10gPSBhcmd1bWVudHNbX2tleTNdO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmZvcndhcmQoYXJncywgJ2Vycm9yJywgJycpO1xuICB9O1xuXG4gIExvZ2dlci5wcm90b3R5cGUuZGVwcmVjYXRlID0gZnVuY3Rpb24gZGVwcmVjYXRlKCkge1xuICAgIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW40KSwgX2tleTQgPSAwOyBfa2V5NCA8IF9sZW40OyBfa2V5NCsrKSB7XG4gICAgICBhcmdzW19rZXk0XSA9IGFyZ3VtZW50c1tfa2V5NF07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuZm9yd2FyZChhcmdzLCAnd2FybicsICdXQVJOSU5HIERFUFJFQ0FURUQ6ICcsIHRydWUpO1xuICB9O1xuXG4gIExvZ2dlci5wcm90b3R5cGUuZm9yd2FyZCA9IGZ1bmN0aW9uIGZvcndhcmQoYXJncywgbHZsLCBwcmVmaXgsIGRlYnVnT25seSkge1xuICAgIGlmIChkZWJ1Z09ubHkgJiYgIXRoaXMuZGVidWcpIHJldHVybiBudWxsO1xuICAgIGlmICh0eXBlb2YgYXJnc1swXSA9PT0gJ3N0cmluZycpIGFyZ3NbMF0gPSAnJyArIHByZWZpeCArIHRoaXMucHJlZml4ICsgJyAnICsgYXJnc1swXTtcbiAgICByZXR1cm4gdGhpcy5sb2dnZXJbbHZsXShhcmdzKTtcbiAgfTtcblxuICBMb2dnZXIucHJvdG90eXBlLmNyZWF0ZSA9IGZ1bmN0aW9uIGNyZWF0ZShtb2R1bGVOYW1lKSB7XG4gICAgcmV0dXJuIG5ldyBMb2dnZXIodGhpcy5sb2dnZXIsIF9leHRlbmRzKHsgcHJlZml4OiB0aGlzLnByZWZpeCArICc6JyArIG1vZHVsZU5hbWUgKyAnOicgfSwgdGhpcy5vcHRpb25zKSk7XG4gIH07XG5cbiAgcmV0dXJuIExvZ2dlcjtcbn0oKTtcblxuZXhwb3J0IGRlZmF1bHQgbmV3IExvZ2dlcigpOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbnZhciBFdmVudEVtaXR0ZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEV2ZW50RW1pdHRlcigpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgRXZlbnRFbWl0dGVyKTtcblxuICAgIHRoaXMub2JzZXJ2ZXJzID0ge307XG4gIH1cblxuICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLm9uID0gZnVuY3Rpb24gb24oZXZlbnRzLCBsaXN0ZW5lcikge1xuICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICBldmVudHMuc3BsaXQoJyAnKS5mb3JFYWNoKGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgX3RoaXMub2JzZXJ2ZXJzW2V2ZW50XSA9IF90aGlzLm9ic2VydmVyc1tldmVudF0gfHwgW107XG4gICAgICBfdGhpcy5vYnNlcnZlcnNbZXZlbnRdLnB1c2gobGlzdGVuZXIpO1xuICAgIH0pO1xuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEV2ZW50RW1pdHRlci5wcm90b3R5cGUub2ZmID0gZnVuY3Rpb24gb2ZmKGV2ZW50LCBsaXN0ZW5lcikge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgaWYgKCF0aGlzLm9ic2VydmVyc1tldmVudF0pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0aGlzLm9ic2VydmVyc1tldmVudF0uZm9yRWFjaChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIWxpc3RlbmVyKSB7XG4gICAgICAgIGRlbGV0ZSBfdGhpczIub2JzZXJ2ZXJzW2V2ZW50XTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZhciBpbmRleCA9IF90aGlzMi5vYnNlcnZlcnNbZXZlbnRdLmluZGV4T2YobGlzdGVuZXIpO1xuICAgICAgICBpZiAoaW5kZXggPiAtMSkge1xuICAgICAgICAgIF90aGlzMi5vYnNlcnZlcnNbZXZlbnRdLnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICBFdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0KGV2ZW50KSB7XG4gICAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuID4gMSA/IF9sZW4gLSAxIDogMCksIF9rZXkgPSAxOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICBhcmdzW19rZXkgLSAxXSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5vYnNlcnZlcnNbZXZlbnRdKSB7XG4gICAgICB2YXIgY2xvbmVkID0gW10uY29uY2F0KHRoaXMub2JzZXJ2ZXJzW2V2ZW50XSk7XG4gICAgICBjbG9uZWQuZm9yRWFjaChmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgb2JzZXJ2ZXIuYXBwbHkodW5kZWZpbmVkLCBhcmdzKTtcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLm9ic2VydmVyc1snKiddKSB7XG4gICAgICB2YXIgX2Nsb25lZCA9IFtdLmNvbmNhdCh0aGlzLm9ic2VydmVyc1snKiddKTtcbiAgICAgIF9jbG9uZWQuZm9yRWFjaChmdW5jdGlvbiAob2JzZXJ2ZXIpIHtcbiAgICAgICAgb2JzZXJ2ZXIuYXBwbHkob2JzZXJ2ZXIsIFtldmVudF0uY29uY2F0KGFyZ3MpKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gRXZlbnRFbWl0dGVyO1xufSgpO1xuXG5leHBvcnQgZGVmYXVsdCBFdmVudEVtaXR0ZXI7IiwiLy8gaHR0cDovL2xlYS52ZXJvdS5tZS8yMDE2LzEyL3Jlc29sdmUtcHJvbWlzZXMtZXh0ZXJuYWxseS13aXRoLXRoaXMtb25lLXdlaXJkLXRyaWNrL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmVyKCkge1xuICB2YXIgcmVzID0gdm9pZCAwO1xuICB2YXIgcmVqID0gdm9pZCAwO1xuXG4gIHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xuICAgIHJlcyA9IHJlc29sdmU7XG4gICAgcmVqID0gcmVqZWN0O1xuICB9KTtcblxuICBwcm9taXNlLnJlc29sdmUgPSByZXM7XG4gIHByb21pc2UucmVqZWN0ID0gcmVqO1xuXG4gIHJldHVybiBwcm9taXNlO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gbWFrZVN0cmluZyhvYmplY3QpIHtcbiAgaWYgKG9iamVjdCA9PSBudWxsKSByZXR1cm4gJyc7XG4gIC8qIGVzbGludCBwcmVmZXItdGVtcGxhdGU6IDAgKi9cbiAgcmV0dXJuICcnICsgb2JqZWN0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY29weShhLCBzLCB0KSB7XG4gIGEuZm9yRWFjaChmdW5jdGlvbiAobSkge1xuICAgIGlmIChzW21dKSB0W21dID0gc1ttXTtcbiAgfSk7XG59XG5cbmZ1bmN0aW9uIGdldExhc3RPZlBhdGgob2JqZWN0LCBwYXRoLCBFbXB0eSkge1xuICBmdW5jdGlvbiBjbGVhbktleShrZXkpIHtcbiAgICByZXR1cm4ga2V5ICYmIGtleS5pbmRleE9mKCcjIyMnKSA+IC0xID8ga2V5LnJlcGxhY2UoLyMjIy9nLCAnLicpIDoga2V5O1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuTm90VHJhdmVyc2VEZWVwZXIoKSB7XG4gICAgcmV0dXJuICFvYmplY3QgfHwgdHlwZW9mIG9iamVjdCA9PT0gJ3N0cmluZyc7XG4gIH1cblxuICB2YXIgc3RhY2sgPSB0eXBlb2YgcGF0aCAhPT0gJ3N0cmluZycgPyBbXS5jb25jYXQocGF0aCkgOiBwYXRoLnNwbGl0KCcuJyk7XG4gIHdoaWxlIChzdGFjay5sZW5ndGggPiAxKSB7XG4gICAgaWYgKGNhbk5vdFRyYXZlcnNlRGVlcGVyKCkpIHJldHVybiB7fTtcblxuICAgIHZhciBrZXkgPSBjbGVhbktleShzdGFjay5zaGlmdCgpKTtcbiAgICBpZiAoIW9iamVjdFtrZXldICYmIEVtcHR5KSBvYmplY3Rba2V5XSA9IG5ldyBFbXB0eSgpO1xuICAgIG9iamVjdCA9IG9iamVjdFtrZXldO1xuICB9XG5cbiAgaWYgKGNhbk5vdFRyYXZlcnNlRGVlcGVyKCkpIHJldHVybiB7fTtcbiAgcmV0dXJuIHtcbiAgICBvYmo6IG9iamVjdCxcbiAgICBrOiBjbGVhbktleShzdGFjay5zaGlmdCgpKVxuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0UGF0aChvYmplY3QsIHBhdGgsIG5ld1ZhbHVlKSB7XG4gIHZhciBfZ2V0TGFzdE9mUGF0aCA9IGdldExhc3RPZlBhdGgob2JqZWN0LCBwYXRoLCBPYmplY3QpLFxuICAgICAgb2JqID0gX2dldExhc3RPZlBhdGgub2JqLFxuICAgICAgayA9IF9nZXRMYXN0T2ZQYXRoLms7XG5cbiAgb2JqW2tdID0gbmV3VmFsdWU7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwdXNoUGF0aChvYmplY3QsIHBhdGgsIG5ld1ZhbHVlLCBjb25jYXQpIHtcbiAgdmFyIF9nZXRMYXN0T2ZQYXRoMiA9IGdldExhc3RPZlBhdGgob2JqZWN0LCBwYXRoLCBPYmplY3QpLFxuICAgICAgb2JqID0gX2dldExhc3RPZlBhdGgyLm9iaixcbiAgICAgIGsgPSBfZ2V0TGFzdE9mUGF0aDIuaztcblxuICBvYmpba10gPSBvYmpba10gfHwgW107XG4gIGlmIChjb25jYXQpIG9ialtrXSA9IG9ialtrXS5jb25jYXQobmV3VmFsdWUpO1xuICBpZiAoIWNvbmNhdCkgb2JqW2tdLnB1c2gobmV3VmFsdWUpO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0UGF0aChvYmplY3QsIHBhdGgpIHtcbiAgdmFyIF9nZXRMYXN0T2ZQYXRoMyA9IGdldExhc3RPZlBhdGgob2JqZWN0LCBwYXRoKSxcbiAgICAgIG9iaiA9IF9nZXRMYXN0T2ZQYXRoMy5vYmosXG4gICAgICBrID0gX2dldExhc3RPZlBhdGgzLms7XG5cbiAgaWYgKCFvYmopIHJldHVybiB1bmRlZmluZWQ7XG4gIHJldHVybiBvYmpba107XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkZWVwRXh0ZW5kKHRhcmdldCwgc291cmNlLCBvdmVyd3JpdGUpIHtcbiAgLyogZXNsaW50IG5vLXJlc3RyaWN0ZWQtc3ludGF4OiAwICovXG4gIGZvciAodmFyIHByb3AgaW4gc291cmNlKSB7XG4gICAgaWYgKHByb3AgaW4gdGFyZ2V0KSB7XG4gICAgICAvLyBJZiB3ZSByZWFjaGVkIGEgbGVhZiBzdHJpbmcgaW4gdGFyZ2V0IG9yIHNvdXJjZSB0aGVuIHJlcGxhY2Ugd2l0aCBzb3VyY2Ugb3Igc2tpcCBkZXBlbmRpbmcgb24gdGhlICdvdmVyd3JpdGUnIHN3aXRjaFxuICAgICAgaWYgKHR5cGVvZiB0YXJnZXRbcHJvcF0gPT09ICdzdHJpbmcnIHx8IHRhcmdldFtwcm9wXSBpbnN0YW5jZW9mIFN0cmluZyB8fCB0eXBlb2Ygc291cmNlW3Byb3BdID09PSAnc3RyaW5nJyB8fCBzb3VyY2VbcHJvcF0gaW5zdGFuY2VvZiBTdHJpbmcpIHtcbiAgICAgICAgaWYgKG92ZXJ3cml0ZSkgdGFyZ2V0W3Byb3BdID0gc291cmNlW3Byb3BdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVlcEV4dGVuZCh0YXJnZXRbcHJvcF0sIHNvdXJjZVtwcm9wXSwgb3ZlcndyaXRlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdGFyZ2V0W3Byb3BdID0gc291cmNlW3Byb3BdO1xuICAgIH1cbiAgfVxuICByZXR1cm4gdGFyZ2V0O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gcmVnZXhFc2NhcGUoc3RyKSB7XG4gIC8qIGVzbGludCBuby11c2VsZXNzLWVzY2FwZTogMCAqL1xuICByZXR1cm4gc3RyLnJlcGxhY2UoL1tcXC1cXFtcXF1cXC9cXHtcXH1cXChcXClcXCpcXCtcXD9cXC5cXFxcXFxeXFwkXFx8XS9nLCAnXFxcXCQmJyk7XG59XG5cbi8qIGVzbGludC1kaXNhYmxlICovXG52YXIgX2VudGl0eU1hcCA9IHtcbiAgXCImXCI6IFwiJmFtcDtcIixcbiAgXCI8XCI6IFwiJmx0O1wiLFxuICBcIj5cIjogXCImZ3Q7XCIsXG4gICdcIic6ICcmcXVvdDsnLFxuICBcIidcIjogJyYjMzk7JyxcbiAgXCIvXCI6ICcmI3gyRjsnXG59O1xuLyogZXNsaW50LWVuYWJsZSAqL1xuXG5leHBvcnQgZnVuY3Rpb24gZXNjYXBlKGRhdGEpIHtcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnc3RyaW5nJykge1xuICAgIHJldHVybiBkYXRhLnJlcGxhY2UoL1smPD5cIidcXC9dL2csIGZ1bmN0aW9uIChzKSB7XG4gICAgICByZXR1cm4gX2VudGl0eU1hcFtzXTtcbiAgICB9KTtcbiAgfVxuXG4gIHJldHVybiBkYXRhO1xufSIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbmZ1bmN0aW9uIF9kZWZhdWx0cyhvYmosIGRlZmF1bHRzKSB7IHZhciBrZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMoZGVmYXVsdHMpOyBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHsgdmFyIGtleSA9IGtleXNbaV07IHZhciB2YWx1ZSA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoZGVmYXVsdHMsIGtleSk7IGlmICh2YWx1ZSAmJiB2YWx1ZS5jb25maWd1cmFibGUgJiYgb2JqW2tleV0gPT09IHVuZGVmaW5lZCkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKTsgfSB9IHJldHVybiBvYmo7IH1cblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuZnVuY3Rpb24gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oc2VsZiwgY2FsbCkgeyBpZiAoIXNlbGYpIHsgdGhyb3cgbmV3IFJlZmVyZW5jZUVycm9yKFwidGhpcyBoYXNuJ3QgYmVlbiBpbml0aWFsaXNlZCAtIHN1cGVyKCkgaGFzbid0IGJlZW4gY2FsbGVkXCIpOyB9IHJldHVybiBjYWxsICYmICh0eXBlb2YgY2FsbCA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2YgY2FsbCA9PT0gXCJmdW5jdGlvblwiKSA/IGNhbGwgOiBzZWxmOyB9XG5cbmZ1bmN0aW9uIF9pbmhlcml0cyhzdWJDbGFzcywgc3VwZXJDbGFzcykgeyBpZiAodHlwZW9mIHN1cGVyQ2xhc3MgIT09IFwiZnVuY3Rpb25cIiAmJiBzdXBlckNsYXNzICE9PSBudWxsKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJTdXBlciBleHByZXNzaW9uIG11c3QgZWl0aGVyIGJlIG51bGwgb3IgYSBmdW5jdGlvbiwgbm90IFwiICsgdHlwZW9mIHN1cGVyQ2xhc3MpOyB9IHN1YkNsYXNzLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDbGFzcyAmJiBzdXBlckNsYXNzLnByb3RvdHlwZSwgeyBjb25zdHJ1Y3RvcjogeyB2YWx1ZTogc3ViQ2xhc3MsIGVudW1lcmFibGU6IGZhbHNlLCB3cml0YWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlIH0gfSk7IGlmIChzdXBlckNsYXNzKSBPYmplY3Quc2V0UHJvdG90eXBlT2YgPyBPYmplY3Quc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIDogX2RlZmF1bHRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKTsgfVxuXG5pbXBvcnQgRXZlbnRFbWl0dGVyIGZyb20gJy4vRXZlbnRFbWl0dGVyLmpzJztcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4vdXRpbHMuanMnO1xuXG52YXIgUmVzb3VyY2VTdG9yZSA9IGZ1bmN0aW9uIChfRXZlbnRFbWl0dGVyKSB7XG4gIF9pbmhlcml0cyhSZXNvdXJjZVN0b3JlLCBfRXZlbnRFbWl0dGVyKTtcblxuICBmdW5jdGlvbiBSZXNvdXJjZVN0b3JlKGRhdGEpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogeyBuczogWyd0cmFuc2xhdGlvbiddLCBkZWZhdWx0TlM6ICd0cmFuc2xhdGlvbicgfTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBSZXNvdXJjZVN0b3JlKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9FdmVudEVtaXR0ZXIuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpcy5kYXRhID0gZGF0YSB8fCB7fTtcbiAgICBfdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICBpZiAoX3RoaXMub3B0aW9ucy5rZXlTZXBhcmF0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgX3RoaXMub3B0aW9ucy5rZXlTZXBhcmF0b3IgPSAnLic7XG4gICAgfVxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIFJlc291cmNlU3RvcmUucHJvdG90eXBlLmFkZE5hbWVzcGFjZXMgPSBmdW5jdGlvbiBhZGROYW1lc3BhY2VzKG5zKSB7XG4gICAgaWYgKHRoaXMub3B0aW9ucy5ucy5pbmRleE9mKG5zKSA8IDApIHtcbiAgICAgIHRoaXMub3B0aW9ucy5ucy5wdXNoKG5zKTtcbiAgICB9XG4gIH07XG5cbiAgUmVzb3VyY2VTdG9yZS5wcm90b3R5cGUucmVtb3ZlTmFtZXNwYWNlcyA9IGZ1bmN0aW9uIHJlbW92ZU5hbWVzcGFjZXMobnMpIHtcbiAgICB2YXIgaW5kZXggPSB0aGlzLm9wdGlvbnMubnMuaW5kZXhPZihucyk7XG4gICAgaWYgKGluZGV4ID4gLTEpIHtcbiAgICAgIHRoaXMub3B0aW9ucy5ucy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgIH1cbiAgfTtcblxuICBSZXNvdXJjZVN0b3JlLnByb3RvdHlwZS5nZXRSZXNvdXJjZSA9IGZ1bmN0aW9uIGdldFJlc291cmNlKGxuZywgbnMsIGtleSkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB7fTtcblxuICAgIHZhciBrZXlTZXBhcmF0b3IgPSBvcHRpb25zLmtleVNlcGFyYXRvciAhPT0gdW5kZWZpbmVkID8gb3B0aW9ucy5rZXlTZXBhcmF0b3IgOiB0aGlzLm9wdGlvbnMua2V5U2VwYXJhdG9yO1xuXG4gICAgdmFyIHBhdGggPSBbbG5nLCBuc107XG4gICAgaWYgKGtleSAmJiB0eXBlb2Yga2V5ICE9PSAnc3RyaW5nJykgcGF0aCA9IHBhdGguY29uY2F0KGtleSk7XG4gICAgaWYgKGtleSAmJiB0eXBlb2Yga2V5ID09PSAnc3RyaW5nJykgcGF0aCA9IHBhdGguY29uY2F0KGtleVNlcGFyYXRvciA/IGtleS5zcGxpdChrZXlTZXBhcmF0b3IpIDoga2V5KTtcblxuICAgIGlmIChsbmcuaW5kZXhPZignLicpID4gLTEpIHtcbiAgICAgIHBhdGggPSBsbmcuc3BsaXQoJy4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdXRpbHMuZ2V0UGF0aCh0aGlzLmRhdGEsIHBhdGgpO1xuICB9O1xuXG4gIFJlc291cmNlU3RvcmUucHJvdG90eXBlLmFkZFJlc291cmNlID0gZnVuY3Rpb24gYWRkUmVzb3VyY2UobG5nLCBucywga2V5LCB2YWx1ZSkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiB7IHNpbGVudDogZmFsc2UgfTtcblxuICAgIHZhciBrZXlTZXBhcmF0b3IgPSB0aGlzLm9wdGlvbnMua2V5U2VwYXJhdG9yO1xuICAgIGlmIChrZXlTZXBhcmF0b3IgPT09IHVuZGVmaW5lZCkga2V5U2VwYXJhdG9yID0gJy4nO1xuXG4gICAgdmFyIHBhdGggPSBbbG5nLCBuc107XG4gICAgaWYgKGtleSkgcGF0aCA9IHBhdGguY29uY2F0KGtleVNlcGFyYXRvciA/IGtleS5zcGxpdChrZXlTZXBhcmF0b3IpIDoga2V5KTtcblxuICAgIGlmIChsbmcuaW5kZXhPZignLicpID4gLTEpIHtcbiAgICAgIHBhdGggPSBsbmcuc3BsaXQoJy4nKTtcbiAgICAgIHZhbHVlID0gbnM7XG4gICAgICBucyA9IHBhdGhbMV07XG4gICAgfVxuXG4gICAgdGhpcy5hZGROYW1lc3BhY2VzKG5zKTtcblxuICAgIHV0aWxzLnNldFBhdGgodGhpcy5kYXRhLCBwYXRoLCB2YWx1ZSk7XG5cbiAgICBpZiAoIW9wdGlvbnMuc2lsZW50KSB0aGlzLmVtaXQoJ2FkZGVkJywgbG5nLCBucywga2V5LCB2YWx1ZSk7XG4gIH07XG5cbiAgUmVzb3VyY2VTdG9yZS5wcm90b3R5cGUuYWRkUmVzb3VyY2VzID0gZnVuY3Rpb24gYWRkUmVzb3VyY2VzKGxuZywgbnMsIHJlc291cmNlcykge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDMgJiYgYXJndW1lbnRzWzNdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbM10gOiB7IHNpbGVudDogZmFsc2UgfTtcblxuICAgIC8qIGVzbGludCBuby1yZXN0cmljdGVkLXN5bnRheDogMCAqL1xuICAgIGZvciAodmFyIG0gaW4gcmVzb3VyY2VzKSB7XG4gICAgICBpZiAodHlwZW9mIHJlc291cmNlc1ttXSA9PT0gJ3N0cmluZycpIHRoaXMuYWRkUmVzb3VyY2UobG5nLCBucywgbSwgcmVzb3VyY2VzW21dLCB7IHNpbGVudDogdHJ1ZSB9KTtcbiAgICB9XG4gICAgaWYgKCFvcHRpb25zLnNpbGVudCkgdGhpcy5lbWl0KCdhZGRlZCcsIGxuZywgbnMsIHJlc291cmNlcyk7XG4gIH07XG5cbiAgUmVzb3VyY2VTdG9yZS5wcm90b3R5cGUuYWRkUmVzb3VyY2VCdW5kbGUgPSBmdW5jdGlvbiBhZGRSZXNvdXJjZUJ1bmRsZShsbmcsIG5zLCByZXNvdXJjZXMsIGRlZXAsIG92ZXJ3cml0ZSkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDUgJiYgYXJndW1lbnRzWzVdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNV0gOiB7IHNpbGVudDogZmFsc2UgfTtcblxuICAgIHZhciBwYXRoID0gW2xuZywgbnNdO1xuICAgIGlmIChsbmcuaW5kZXhPZignLicpID4gLTEpIHtcbiAgICAgIHBhdGggPSBsbmcuc3BsaXQoJy4nKTtcbiAgICAgIGRlZXAgPSByZXNvdXJjZXM7XG4gICAgICByZXNvdXJjZXMgPSBucztcbiAgICAgIG5zID0gcGF0aFsxXTtcbiAgICB9XG5cbiAgICB0aGlzLmFkZE5hbWVzcGFjZXMobnMpO1xuXG4gICAgdmFyIHBhY2sgPSB1dGlscy5nZXRQYXRoKHRoaXMuZGF0YSwgcGF0aCkgfHwge307XG5cbiAgICBpZiAoZGVlcCkge1xuICAgICAgdXRpbHMuZGVlcEV4dGVuZChwYWNrLCByZXNvdXJjZXMsIG92ZXJ3cml0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHBhY2sgPSBfZXh0ZW5kcyh7fSwgcGFjaywgcmVzb3VyY2VzKTtcbiAgICB9XG5cbiAgICB1dGlscy5zZXRQYXRoKHRoaXMuZGF0YSwgcGF0aCwgcGFjayk7XG5cbiAgICBpZiAoIW9wdGlvbnMuc2lsZW50KSB0aGlzLmVtaXQoJ2FkZGVkJywgbG5nLCBucywgcmVzb3VyY2VzKTtcbiAgfTtcblxuICBSZXNvdXJjZVN0b3JlLnByb3RvdHlwZS5yZW1vdmVSZXNvdXJjZUJ1bmRsZSA9IGZ1bmN0aW9uIHJlbW92ZVJlc291cmNlQnVuZGxlKGxuZywgbnMpIHtcbiAgICBpZiAodGhpcy5oYXNSZXNvdXJjZUJ1bmRsZShsbmcsIG5zKSkge1xuICAgICAgZGVsZXRlIHRoaXMuZGF0YVtsbmddW25zXTtcbiAgICB9XG4gICAgdGhpcy5yZW1vdmVOYW1lc3BhY2VzKG5zKTtcblxuICAgIHRoaXMuZW1pdCgncmVtb3ZlZCcsIGxuZywgbnMpO1xuICB9O1xuXG4gIFJlc291cmNlU3RvcmUucHJvdG90eXBlLmhhc1Jlc291cmNlQnVuZGxlID0gZnVuY3Rpb24gaGFzUmVzb3VyY2VCdW5kbGUobG5nLCBucykge1xuICAgIHJldHVybiB0aGlzLmdldFJlc291cmNlKGxuZywgbnMpICE9PSB1bmRlZmluZWQ7XG4gIH07XG5cbiAgUmVzb3VyY2VTdG9yZS5wcm90b3R5cGUuZ2V0UmVzb3VyY2VCdW5kbGUgPSBmdW5jdGlvbiBnZXRSZXNvdXJjZUJ1bmRsZShsbmcsIG5zKSB7XG4gICAgaWYgKCFucykgbnMgPSB0aGlzLm9wdGlvbnMuZGVmYXVsdE5TO1xuXG4gICAgLy8gQ09NUEFUSUJJTElUWTogcmVtb3ZlIGV4dGVuZCBpbiB2Mi4xLjBcbiAgICBpZiAodGhpcy5vcHRpb25zLmNvbXBhdGliaWxpdHlBUEkgPT09ICd2MScpIHJldHVybiBfZXh0ZW5kcyh7fSwgdGhpcy5nZXRSZXNvdXJjZShsbmcsIG5zKSk7XG5cbiAgICByZXR1cm4gdGhpcy5nZXRSZXNvdXJjZShsbmcsIG5zKTtcbiAgfTtcblxuICBSZXNvdXJjZVN0b3JlLnByb3RvdHlwZS5nZXREYXRhQnlMYW5ndWFnZSA9IGZ1bmN0aW9uIGdldERhdGFCeUxhbmd1YWdlKGxuZykge1xuICAgIHJldHVybiB0aGlzLmRhdGFbbG5nXTtcbiAgfTtcblxuICBSZXNvdXJjZVN0b3JlLnByb3RvdHlwZS50b0pTT04gPSBmdW5jdGlvbiB0b0pTT04oKSB7XG4gICAgcmV0dXJuIHRoaXMuZGF0YTtcbiAgfTtcblxuICByZXR1cm4gUmVzb3VyY2VTdG9yZTtcbn0oRXZlbnRFbWl0dGVyKTtcblxuZXhwb3J0IGRlZmF1bHQgUmVzb3VyY2VTdG9yZTsiLCJleHBvcnQgZGVmYXVsdCB7XG5cbiAgcHJvY2Vzc29yczoge30sXG5cbiAgYWRkUG9zdFByb2Nlc3NvcjogZnVuY3Rpb24gYWRkUG9zdFByb2Nlc3Nvcihtb2R1bGUpIHtcbiAgICB0aGlzLnByb2Nlc3NvcnNbbW9kdWxlLm5hbWVdID0gbW9kdWxlO1xuICB9LFxuICBoYW5kbGU6IGZ1bmN0aW9uIGhhbmRsZShwcm9jZXNzb3JzLCB2YWx1ZSwga2V5LCBvcHRpb25zLCB0cmFuc2xhdG9yKSB7XG4gICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgIHByb2Nlc3NvcnMuZm9yRWFjaChmdW5jdGlvbiAocHJvY2Vzc29yKSB7XG4gICAgICBpZiAoX3RoaXMucHJvY2Vzc29yc1twcm9jZXNzb3JdKSB2YWx1ZSA9IF90aGlzLnByb2Nlc3NvcnNbcHJvY2Vzc29yXS5wcm9jZXNzKHZhbHVlLCBrZXksIG9wdGlvbnMsIHRyYW5zbGF0b3IpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG59OyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuZnVuY3Rpb24gX2RlZmF1bHRzKG9iaiwgZGVmYXVsdHMpIHsgdmFyIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhkZWZhdWx0cyk7IGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykgeyB2YXIga2V5ID0ga2V5c1tpXTsgdmFyIHZhbHVlID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihkZWZhdWx0cywga2V5KTsgaWYgKHZhbHVlICYmIHZhbHVlLmNvbmZpZ3VyYWJsZSAmJiBvYmpba2V5XSA9PT0gdW5kZWZpbmVkKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpOyB9IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBfZGVmYXVsdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmltcG9ydCBiYXNlTG9nZ2VyIGZyb20gJy4vbG9nZ2VyLmpzJztcbmltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnLi9FdmVudEVtaXR0ZXIuanMnO1xuaW1wb3J0IHBvc3RQcm9jZXNzb3IgZnJvbSAnLi9wb3N0UHJvY2Vzc29yLmpzJztcbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4vdXRpbHMuanMnO1xuXG52YXIgVHJhbnNsYXRvciA9IGZ1bmN0aW9uIChfRXZlbnRFbWl0dGVyKSB7XG4gIF9pbmhlcml0cyhUcmFuc2xhdG9yLCBfRXZlbnRFbWl0dGVyKTtcblxuICBmdW5jdGlvbiBUcmFuc2xhdG9yKHNlcnZpY2VzKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IHt9O1xuXG4gICAgX2NsYXNzQ2FsbENoZWNrKHRoaXMsIFRyYW5zbGF0b3IpO1xuXG4gICAgdmFyIF90aGlzID0gX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4odGhpcywgX0V2ZW50RW1pdHRlci5jYWxsKHRoaXMpKTtcblxuICAgIHV0aWxzLmNvcHkoWydyZXNvdXJjZVN0b3JlJywgJ2xhbmd1YWdlVXRpbHMnLCAncGx1cmFsUmVzb2x2ZXInLCAnaW50ZXJwb2xhdG9yJywgJ2JhY2tlbmRDb25uZWN0b3InLCAnaTE4bkZvcm1hdCddLCBzZXJ2aWNlcywgX3RoaXMpO1xuXG4gICAgX3RoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgaWYgKF90aGlzLm9wdGlvbnMua2V5U2VwYXJhdG9yID09PSB1bmRlZmluZWQpIHtcbiAgICAgIF90aGlzLm9wdGlvbnMua2V5U2VwYXJhdG9yID0gJy4nO1xuICAgIH1cblxuICAgIF90aGlzLmxvZ2dlciA9IGJhc2VMb2dnZXIuY3JlYXRlKCd0cmFuc2xhdG9yJyk7XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgVHJhbnNsYXRvci5wcm90b3R5cGUuY2hhbmdlTGFuZ3VhZ2UgPSBmdW5jdGlvbiBjaGFuZ2VMYW5ndWFnZShsbmcpIHtcbiAgICBpZiAobG5nKSB0aGlzLmxhbmd1YWdlID0gbG5nO1xuICB9O1xuXG4gIFRyYW5zbGF0b3IucHJvdG90eXBlLmV4aXN0cyA9IGZ1bmN0aW9uIGV4aXN0cyhrZXkpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogeyBpbnRlcnBvbGF0aW9uOiB7fSB9O1xuXG4gICAgdmFyIHJlc29sdmVkID0gdGhpcy5yZXNvbHZlKGtleSwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHJlc29sdmVkICYmIHJlc29sdmVkLnJlcyAhPT0gdW5kZWZpbmVkO1xuICB9O1xuXG4gIFRyYW5zbGF0b3IucHJvdG90eXBlLmV4dHJhY3RGcm9tS2V5ID0gZnVuY3Rpb24gZXh0cmFjdEZyb21LZXkoa2V5LCBvcHRpb25zKSB7XG4gICAgdmFyIG5zU2VwYXJhdG9yID0gb3B0aW9ucy5uc1NlcGFyYXRvciB8fCB0aGlzLm9wdGlvbnMubnNTZXBhcmF0b3I7XG4gICAgaWYgKG5zU2VwYXJhdG9yID09PSB1bmRlZmluZWQpIG5zU2VwYXJhdG9yID0gJzonO1xuXG4gICAgdmFyIGtleVNlcGFyYXRvciA9IG9wdGlvbnMua2V5U2VwYXJhdG9yICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmtleVNlcGFyYXRvciA6IHRoaXMub3B0aW9ucy5rZXlTZXBhcmF0b3I7XG5cbiAgICB2YXIgbmFtZXNwYWNlcyA9IG9wdGlvbnMubnMgfHwgdGhpcy5vcHRpb25zLmRlZmF1bHROUztcbiAgICBpZiAobnNTZXBhcmF0b3IgJiYga2V5LmluZGV4T2YobnNTZXBhcmF0b3IpID4gLTEpIHtcbiAgICAgIHZhciBwYXJ0cyA9IGtleS5zcGxpdChuc1NlcGFyYXRvcik7XG4gICAgICBpZiAobnNTZXBhcmF0b3IgIT09IGtleVNlcGFyYXRvciB8fCBuc1NlcGFyYXRvciA9PT0ga2V5U2VwYXJhdG9yICYmIHRoaXMub3B0aW9ucy5ucy5pbmRleE9mKHBhcnRzWzBdKSA+IC0xKSBuYW1lc3BhY2VzID0gcGFydHMuc2hpZnQoKTtcbiAgICAgIGtleSA9IHBhcnRzLmpvaW4oa2V5U2VwYXJhdG9yKTtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBuYW1lc3BhY2VzID09PSAnc3RyaW5nJykgbmFtZXNwYWNlcyA9IFtuYW1lc3BhY2VzXTtcblxuICAgIHJldHVybiB7XG4gICAgICBrZXk6IGtleSxcbiAgICAgIG5hbWVzcGFjZXM6IG5hbWVzcGFjZXNcbiAgICB9O1xuICB9O1xuXG4gIFRyYW5zbGF0b3IucHJvdG90eXBlLnRyYW5zbGF0ZSA9IGZ1bmN0aW9uIHRyYW5zbGF0ZShrZXlzLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICBpZiAoKHR5cGVvZiBvcHRpb25zID09PSAndW5kZWZpbmVkJyA/ICd1bmRlZmluZWQnIDogX3R5cGVvZihvcHRpb25zKSkgIT09ICdvYmplY3QnICYmIHRoaXMub3B0aW9ucy5vdmVybG9hZFRyYW5zbGF0aW9uT3B0aW9uSGFuZGxlcikge1xuICAgICAgLyogZXNsaW50IHByZWZlci1yZXN0LXBhcmFtczogMCAqL1xuICAgICAgb3B0aW9ucyA9IHRoaXMub3B0aW9ucy5vdmVybG9hZFRyYW5zbGF0aW9uT3B0aW9uSGFuZGxlcihhcmd1bWVudHMpO1xuICAgIH1cbiAgICBpZiAoIW9wdGlvbnMpIG9wdGlvbnMgPSB7fTtcblxuICAgIC8vIG5vbiB2YWxpZCBrZXlzIGhhbmRsaW5nXG4gICAgaWYgKGtleXMgPT09IHVuZGVmaW5lZCB8fCBrZXlzID09PSBudWxsKSByZXR1cm4gJyc7XG4gICAgaWYgKCFBcnJheS5pc0FycmF5KGtleXMpKSBrZXlzID0gW1N0cmluZyhrZXlzKV07XG5cbiAgICAvLyBzZXBhcmF0b3JzXG4gICAgdmFyIGtleVNlcGFyYXRvciA9IG9wdGlvbnMua2V5U2VwYXJhdG9yICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmtleVNlcGFyYXRvciA6IHRoaXMub3B0aW9ucy5rZXlTZXBhcmF0b3I7XG5cbiAgICAvLyBnZXQgbmFtZXNwYWNlKHMpXG5cbiAgICB2YXIgX2V4dHJhY3RGcm9tS2V5ID0gdGhpcy5leHRyYWN0RnJvbUtleShrZXlzW2tleXMubGVuZ3RoIC0gMV0sIG9wdGlvbnMpLFxuICAgICAgICBrZXkgPSBfZXh0cmFjdEZyb21LZXkua2V5LFxuICAgICAgICBuYW1lc3BhY2VzID0gX2V4dHJhY3RGcm9tS2V5Lm5hbWVzcGFjZXM7XG5cbiAgICB2YXIgbmFtZXNwYWNlID0gbmFtZXNwYWNlc1tuYW1lc3BhY2VzLmxlbmd0aCAtIDFdO1xuXG4gICAgLy8gcmV0dXJuIGtleSBvbiBDSU1vZGVcbiAgICB2YXIgbG5nID0gb3B0aW9ucy5sbmcgfHwgdGhpcy5sYW5ndWFnZTtcbiAgICB2YXIgYXBwZW5kTmFtZXNwYWNlVG9DSU1vZGUgPSBvcHRpb25zLmFwcGVuZE5hbWVzcGFjZVRvQ0lNb2RlIHx8IHRoaXMub3B0aW9ucy5hcHBlbmROYW1lc3BhY2VUb0NJTW9kZTtcbiAgICBpZiAobG5nICYmIGxuZy50b0xvd2VyQ2FzZSgpID09PSAnY2ltb2RlJykge1xuICAgICAgaWYgKGFwcGVuZE5hbWVzcGFjZVRvQ0lNb2RlKSB7XG4gICAgICAgIHZhciBuc1NlcGFyYXRvciA9IG9wdGlvbnMubnNTZXBhcmF0b3IgfHwgdGhpcy5vcHRpb25zLm5zU2VwYXJhdG9yO1xuICAgICAgICByZXR1cm4gbmFtZXNwYWNlICsgbnNTZXBhcmF0b3IgKyBrZXk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuXG4gICAgLy8gcmVzb2x2ZSBmcm9tIHN0b3JlXG4gICAgdmFyIHJlc29sdmVkID0gdGhpcy5yZXNvbHZlKGtleXMsIG9wdGlvbnMpO1xuICAgIHZhciByZXMgPSByZXNvbHZlZCAmJiByZXNvbHZlZC5yZXM7XG4gICAgdmFyIHJlc1VzZWRLZXkgPSByZXNvbHZlZCAmJiByZXNvbHZlZC51c2VkS2V5IHx8IGtleTtcblxuICAgIHZhciByZXNUeXBlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5hcHBseShyZXMpO1xuICAgIHZhciBub09iamVjdCA9IFsnW29iamVjdCBOdW1iZXJdJywgJ1tvYmplY3QgRnVuY3Rpb25dJywgJ1tvYmplY3QgUmVnRXhwXSddO1xuICAgIHZhciBqb2luQXJyYXlzID0gb3B0aW9ucy5qb2luQXJyYXlzICE9PSB1bmRlZmluZWQgPyBvcHRpb25zLmpvaW5BcnJheXMgOiB0aGlzLm9wdGlvbnMuam9pbkFycmF5cztcblxuICAgIC8vIG9iamVjdFxuICAgIHZhciBoYW5kbGVBc09iamVjdEluSTE4bkZvcm1hdCA9ICF0aGlzLmkxOG5Gb3JtYXQgfHwgdGhpcy5pMThuRm9ybWF0LmhhbmRsZUFzT2JqZWN0O1xuICAgIHZhciBoYW5kbGVBc09iamVjdCA9IHR5cGVvZiByZXMgIT09ICdzdHJpbmcnICYmIHR5cGVvZiByZXMgIT09ICdib29sZWFuJyAmJiB0eXBlb2YgcmVzICE9PSAnbnVtYmVyJztcbiAgICBpZiAoaGFuZGxlQXNPYmplY3RJbkkxOG5Gb3JtYXQgJiYgcmVzICYmIGhhbmRsZUFzT2JqZWN0ICYmIG5vT2JqZWN0LmluZGV4T2YocmVzVHlwZSkgPCAwICYmICEoam9pbkFycmF5cyAmJiByZXNUeXBlID09PSAnW29iamVjdCBBcnJheV0nKSkge1xuICAgICAgaWYgKCFvcHRpb25zLnJldHVybk9iamVjdHMgJiYgIXRoaXMub3B0aW9ucy5yZXR1cm5PYmplY3RzKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLndhcm4oJ2FjY2Vzc2luZyBhbiBvYmplY3QgLSBidXQgcmV0dXJuT2JqZWN0cyBvcHRpb25zIGlzIG5vdCBlbmFibGVkIScpO1xuICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zLnJldHVybmVkT2JqZWN0SGFuZGxlciA/IHRoaXMub3B0aW9ucy5yZXR1cm5lZE9iamVjdEhhbmRsZXIocmVzVXNlZEtleSwgcmVzLCBvcHRpb25zKSA6ICdrZXkgXFwnJyArIGtleSArICcgKCcgKyB0aGlzLmxhbmd1YWdlICsgJylcXCcgcmV0dXJuZWQgYW4gb2JqZWN0IGluc3RlYWQgb2Ygc3RyaW5nLic7XG4gICAgICB9XG5cbiAgICAgIC8vIGlmIHdlIGdvdCBhIHNlcGFyYXRvciB3ZSBsb29wIG92ZXIgY2hpbGRyZW4gLSBlbHNlIHdlIGp1c3QgcmV0dXJuIG9iamVjdCBhcyBpc1xuICAgICAgLy8gYXMgaGF2aW5nIGl0IHNldCB0byBmYWxzZSBtZWFucyBubyBoaWVyYXJjaHkgc28gbm8gbG9va3VwIGZvciBuZXN0ZWQgdmFsdWVzXG4gICAgICBpZiAoa2V5U2VwYXJhdG9yKSB7XG4gICAgICAgIHZhciBjb3B5ID0gcmVzVHlwZSA9PT0gJ1tvYmplY3QgQXJyYXldJyA/IFtdIDoge307IC8vIGFwcGx5IGNoaWxkIHRyYW5zbGF0aW9uIG9uIGEgY29weVxuXG4gICAgICAgIC8qIGVzbGludCBuby1yZXN0cmljdGVkLXN5bnRheDogMCAqL1xuICAgICAgICBmb3IgKHZhciBtIGluIHJlcykge1xuICAgICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwocmVzLCBtKSkge1xuICAgICAgICAgICAgdmFyIGRlZXBLZXkgPSAnJyArIHJlc1VzZWRLZXkgKyBrZXlTZXBhcmF0b3IgKyBtO1xuICAgICAgICAgICAgY29weVttXSA9IHRoaXMudHJhbnNsYXRlKGRlZXBLZXksIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7IGpvaW5BcnJheXM6IGZhbHNlLCBuczogbmFtZXNwYWNlcyB9KSk7XG4gICAgICAgICAgICBpZiAoY29weVttXSA9PT0gZGVlcEtleSkgY29weVttXSA9IHJlc1ttXTsgLy8gaWYgbm90aGluZyBmb3VuZCB1c2Ugb3JnaW5hbCB2YWx1ZSBhcyBmYWxsYmFja1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXMgPSBjb3B5O1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaGFuZGxlQXNPYmplY3RJbkkxOG5Gb3JtYXQgJiYgam9pbkFycmF5cyAmJiByZXNUeXBlID09PSAnW29iamVjdCBBcnJheV0nKSB7XG4gICAgICAvLyBhcnJheSBzcGVjaWFsIHRyZWF0bWVudFxuICAgICAgcmVzID0gcmVzLmpvaW4oam9pbkFycmF5cyk7XG4gICAgICBpZiAocmVzKSByZXMgPSB0aGlzLmV4dGVuZFRyYW5zbGF0aW9uKHJlcywga2V5cywgb3B0aW9ucyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHN0cmluZywgZW1wdHkgb3IgbnVsbFxuICAgICAgdmFyIHVzZWREZWZhdWx0ID0gZmFsc2U7XG4gICAgICB2YXIgdXNlZEtleSA9IGZhbHNlO1xuXG4gICAgICAvLyBmYWxsYmFjayB2YWx1ZVxuICAgICAgaWYgKCF0aGlzLmlzVmFsaWRMb29rdXAocmVzKSAmJiBvcHRpb25zLmRlZmF1bHRWYWx1ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHVzZWREZWZhdWx0ID0gdHJ1ZTtcblxuICAgICAgICBpZiAob3B0aW9ucy5jb3VudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgdmFyIHN1ZmZpeCA9IHRoaXMucGx1cmFsUmVzb2x2ZXIuZ2V0U3VmZml4KGxuZywgb3B0aW9ucy5jb3VudCk7XG4gICAgICAgICAgcmVzID0gb3B0aW9uc1snZGVmYXVsdFZhbHVlJyArIHN1ZmZpeF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFyZXMpIHJlcyA9IG9wdGlvbnMuZGVmYXVsdFZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKCF0aGlzLmlzVmFsaWRMb29rdXAocmVzKSkge1xuICAgICAgICB1c2VkS2V5ID0gdHJ1ZTtcbiAgICAgICAgcmVzID0ga2V5O1xuICAgICAgfVxuXG4gICAgICAvLyBzYXZlIG1pc3NpbmdcbiAgICAgIHZhciB1cGRhdGVNaXNzaW5nID0gb3B0aW9ucy5kZWZhdWx0VmFsdWUgJiYgb3B0aW9ucy5kZWZhdWx0VmFsdWUgIT09IHJlcyAmJiB0aGlzLm9wdGlvbnMudXBkYXRlTWlzc2luZztcbiAgICAgIGlmICh1c2VkS2V5IHx8IHVzZWREZWZhdWx0IHx8IHVwZGF0ZU1pc3NpbmcpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIubG9nKHVwZGF0ZU1pc3NpbmcgPyAndXBkYXRlS2V5JyA6ICdtaXNzaW5nS2V5JywgbG5nLCBuYW1lc3BhY2UsIGtleSwgdXBkYXRlTWlzc2luZyA/IG9wdGlvbnMuZGVmYXVsdFZhbHVlIDogcmVzKTtcblxuICAgICAgICB2YXIgbG5ncyA9IFtdO1xuICAgICAgICB2YXIgZmFsbGJhY2tMbmdzID0gdGhpcy5sYW5ndWFnZVV0aWxzLmdldEZhbGxiYWNrQ29kZXModGhpcy5vcHRpb25zLmZhbGxiYWNrTG5nLCBvcHRpb25zLmxuZyB8fCB0aGlzLmxhbmd1YWdlKTtcbiAgICAgICAgaWYgKHRoaXMub3B0aW9ucy5zYXZlTWlzc2luZ1RvID09PSAnZmFsbGJhY2snICYmIGZhbGxiYWNrTG5ncyAmJiBmYWxsYmFja0xuZ3NbMF0pIHtcbiAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGZhbGxiYWNrTG5ncy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbG5ncy5wdXNoKGZhbGxiYWNrTG5nc1tpXSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMub3B0aW9ucy5zYXZlTWlzc2luZ1RvID09PSAnYWxsJykge1xuICAgICAgICAgIGxuZ3MgPSB0aGlzLmxhbmd1YWdlVXRpbHMudG9SZXNvbHZlSGllcmFyY2h5KG9wdGlvbnMubG5nIHx8IHRoaXMubGFuZ3VhZ2UpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxuZ3MucHVzaChvcHRpb25zLmxuZyB8fCB0aGlzLmxhbmd1YWdlKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBzZW5kID0gZnVuY3Rpb24gc2VuZChsLCBrKSB7XG4gICAgICAgICAgaWYgKF90aGlzMi5vcHRpb25zLm1pc3NpbmdLZXlIYW5kbGVyKSB7XG4gICAgICAgICAgICBfdGhpczIub3B0aW9ucy5taXNzaW5nS2V5SGFuZGxlcihsLCBuYW1lc3BhY2UsIGssIHVwZGF0ZU1pc3NpbmcgPyBvcHRpb25zLmRlZmF1bHRWYWx1ZSA6IHJlcywgdXBkYXRlTWlzc2luZywgb3B0aW9ucyk7XG4gICAgICAgICAgfSBlbHNlIGlmIChfdGhpczIuYmFja2VuZENvbm5lY3RvciAmJiBfdGhpczIuYmFja2VuZENvbm5lY3Rvci5zYXZlTWlzc2luZykge1xuICAgICAgICAgICAgX3RoaXMyLmJhY2tlbmRDb25uZWN0b3Iuc2F2ZU1pc3NpbmcobCwgbmFtZXNwYWNlLCBrLCB1cGRhdGVNaXNzaW5nID8gb3B0aW9ucy5kZWZhdWx0VmFsdWUgOiByZXMsIHVwZGF0ZU1pc3NpbmcsIG9wdGlvbnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBfdGhpczIuZW1pdCgnbWlzc2luZ0tleScsIGwsIG5hbWVzcGFjZSwgaywgcmVzKTtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAodGhpcy5vcHRpb25zLnNhdmVNaXNzaW5nKSB7XG4gICAgICAgICAgdmFyIG5lZWRzUGx1cmFsSGFuZGxpbmcgPSBvcHRpb25zLmNvdW50ICE9PSB1bmRlZmluZWQgJiYgdHlwZW9mIG9wdGlvbnMuY291bnQgIT09ICdzdHJpbmcnO1xuICAgICAgICAgIGlmICh0aGlzLm9wdGlvbnMuc2F2ZU1pc3NpbmdQbHVyYWxzICYmIG5lZWRzUGx1cmFsSGFuZGxpbmcpIHtcbiAgICAgICAgICAgIGxuZ3MuZm9yRWFjaChmdW5jdGlvbiAobCkge1xuICAgICAgICAgICAgICB2YXIgcGx1cmFscyA9IF90aGlzMi5wbHVyYWxSZXNvbHZlci5nZXRQbHVyYWxGb3Jtc09mS2V5KGwsIGtleSk7XG5cbiAgICAgICAgICAgICAgcGx1cmFscy5mb3JFYWNoKGZ1bmN0aW9uIChwKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHNlbmQoW2xdLCBwKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2VuZChsbmdzLCBrZXkpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBleHRlbmRcbiAgICAgIHJlcyA9IHRoaXMuZXh0ZW5kVHJhbnNsYXRpb24ocmVzLCBrZXlzLCBvcHRpb25zLCByZXNvbHZlZCk7XG5cbiAgICAgIC8vIGFwcGVuZCBuYW1lc3BhY2UgaWYgc3RpbGwga2V5XG4gICAgICBpZiAodXNlZEtleSAmJiByZXMgPT09IGtleSAmJiB0aGlzLm9wdGlvbnMuYXBwZW5kTmFtZXNwYWNlVG9NaXNzaW5nS2V5KSByZXMgPSBuYW1lc3BhY2UgKyAnOicgKyBrZXk7XG5cbiAgICAgIC8vIHBhcnNlTWlzc2luZ0tleUhhbmRsZXJcbiAgICAgIGlmICh1c2VkS2V5ICYmIHRoaXMub3B0aW9ucy5wYXJzZU1pc3NpbmdLZXlIYW5kbGVyKSByZXMgPSB0aGlzLm9wdGlvbnMucGFyc2VNaXNzaW5nS2V5SGFuZGxlcihyZXMpO1xuICAgIH1cblxuICAgIC8vIHJldHVyblxuICAgIHJldHVybiByZXM7XG4gIH07XG5cbiAgVHJhbnNsYXRvci5wcm90b3R5cGUuZXh0ZW5kVHJhbnNsYXRpb24gPSBmdW5jdGlvbiBleHRlbmRUcmFuc2xhdGlvbihyZXMsIGtleSwgb3B0aW9ucywgcmVzb2x2ZWQpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIGlmICh0aGlzLmkxOG5Gb3JtYXQgJiYgdGhpcy5pMThuRm9ybWF0LnBhcnNlKSB7XG4gICAgICByZXMgPSB0aGlzLmkxOG5Gb3JtYXQucGFyc2UocmVzLCBvcHRpb25zLCByZXNvbHZlZC51c2VkTG5nLCByZXNvbHZlZC51c2VkTlMsIHJlc29sdmVkLnVzZWRLZXksIHsgcmVzb2x2ZWQ6IHJlc29sdmVkIH0pO1xuICAgIH0gZWxzZSBpZiAoIW9wdGlvbnMuc2tpcEludGVycG9sYXRpb24pIHtcbiAgICAgIC8vIGkxOG5leHQucGFyc2luZ1xuICAgICAgaWYgKG9wdGlvbnMuaW50ZXJwb2xhdGlvbikgdGhpcy5pbnRlcnBvbGF0b3IuaW5pdChfZXh0ZW5kcyh7fSwgb3B0aW9ucywgeyBpbnRlcnBvbGF0aW9uOiBfZXh0ZW5kcyh7fSwgdGhpcy5vcHRpb25zLmludGVycG9sYXRpb24sIG9wdGlvbnMuaW50ZXJwb2xhdGlvbikgfSkpO1xuXG4gICAgICAvLyBpbnRlcnBvbGF0ZVxuICAgICAgdmFyIGRhdGEgPSBvcHRpb25zLnJlcGxhY2UgJiYgdHlwZW9mIG9wdGlvbnMucmVwbGFjZSAhPT0gJ3N0cmluZycgPyBvcHRpb25zLnJlcGxhY2UgOiBvcHRpb25zO1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5pbnRlcnBvbGF0aW9uLmRlZmF1bHRWYXJpYWJsZXMpIGRhdGEgPSBfZXh0ZW5kcyh7fSwgdGhpcy5vcHRpb25zLmludGVycG9sYXRpb24uZGVmYXVsdFZhcmlhYmxlcywgZGF0YSk7XG4gICAgICByZXMgPSB0aGlzLmludGVycG9sYXRvci5pbnRlcnBvbGF0ZShyZXMsIGRhdGEsIG9wdGlvbnMubG5nIHx8IHRoaXMubGFuZ3VhZ2UsIG9wdGlvbnMpO1xuXG4gICAgICAvLyBuZXN0aW5nXG4gICAgICBpZiAob3B0aW9ucy5uZXN0ICE9PSBmYWxzZSkgcmVzID0gdGhpcy5pbnRlcnBvbGF0b3IubmVzdChyZXMsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMy50cmFuc2xhdGUuYXBwbHkoX3RoaXMzLCBhcmd1bWVudHMpO1xuICAgICAgfSwgb3B0aW9ucyk7XG5cbiAgICAgIGlmIChvcHRpb25zLmludGVycG9sYXRpb24pIHRoaXMuaW50ZXJwb2xhdG9yLnJlc2V0KCk7XG4gICAgfVxuXG4gICAgLy8gcG9zdCBwcm9jZXNzXG4gICAgdmFyIHBvc3RQcm9jZXNzID0gb3B0aW9ucy5wb3N0UHJvY2VzcyB8fCB0aGlzLm9wdGlvbnMucG9zdFByb2Nlc3M7XG4gICAgdmFyIHBvc3RQcm9jZXNzb3JOYW1lcyA9IHR5cGVvZiBwb3N0UHJvY2VzcyA9PT0gJ3N0cmluZycgPyBbcG9zdFByb2Nlc3NdIDogcG9zdFByb2Nlc3M7XG5cbiAgICBpZiAocmVzICE9PSB1bmRlZmluZWQgJiYgcmVzICE9PSBudWxsICYmIHBvc3RQcm9jZXNzb3JOYW1lcyAmJiBwb3N0UHJvY2Vzc29yTmFtZXMubGVuZ3RoICYmIG9wdGlvbnMuYXBwbHlQb3N0UHJvY2Vzc29yICE9PSBmYWxzZSkge1xuICAgICAgcmVzID0gcG9zdFByb2Nlc3Nvci5oYW5kbGUocG9zdFByb2Nlc3Nvck5hbWVzLCByZXMsIGtleSwgb3B0aW9ucywgdGhpcyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlcztcbiAgfTtcblxuICBUcmFuc2xhdG9yLnByb3RvdHlwZS5yZXNvbHZlID0gZnVuY3Rpb24gcmVzb2x2ZShrZXlzKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICB2YXIgZm91bmQgPSB2b2lkIDA7XG4gICAgdmFyIHVzZWRLZXkgPSB2b2lkIDA7XG4gICAgdmFyIHVzZWRMbmcgPSB2b2lkIDA7XG4gICAgdmFyIHVzZWROUyA9IHZvaWQgMDtcblxuICAgIGlmICh0eXBlb2Yga2V5cyA9PT0gJ3N0cmluZycpIGtleXMgPSBba2V5c107XG5cbiAgICAvLyBmb3JFYWNoIHBvc3NpYmxlIGtleVxuICAgIGtleXMuZm9yRWFjaChmdW5jdGlvbiAoaykge1xuICAgICAgaWYgKF90aGlzNC5pc1ZhbGlkTG9va3VwKGZvdW5kKSkgcmV0dXJuO1xuICAgICAgdmFyIGV4dHJhY3RlZCA9IF90aGlzNC5leHRyYWN0RnJvbUtleShrLCBvcHRpb25zKTtcbiAgICAgIHZhciBrZXkgPSBleHRyYWN0ZWQua2V5O1xuICAgICAgdXNlZEtleSA9IGtleTtcbiAgICAgIHZhciBuYW1lc3BhY2VzID0gZXh0cmFjdGVkLm5hbWVzcGFjZXM7XG4gICAgICBpZiAoX3RoaXM0Lm9wdGlvbnMuZmFsbGJhY2tOUykgbmFtZXNwYWNlcyA9IG5hbWVzcGFjZXMuY29uY2F0KF90aGlzNC5vcHRpb25zLmZhbGxiYWNrTlMpO1xuXG4gICAgICB2YXIgbmVlZHNQbHVyYWxIYW5kbGluZyA9IG9wdGlvbnMuY291bnQgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb3B0aW9ucy5jb3VudCAhPT0gJ3N0cmluZyc7XG4gICAgICB2YXIgbmVlZHNDb250ZXh0SGFuZGxpbmcgPSBvcHRpb25zLmNvbnRleHQgIT09IHVuZGVmaW5lZCAmJiB0eXBlb2Ygb3B0aW9ucy5jb250ZXh0ID09PSAnc3RyaW5nJyAmJiBvcHRpb25zLmNvbnRleHQgIT09ICcnO1xuXG4gICAgICB2YXIgY29kZXMgPSBvcHRpb25zLmxuZ3MgPyBvcHRpb25zLmxuZ3MgOiBfdGhpczQubGFuZ3VhZ2VVdGlscy50b1Jlc29sdmVIaWVyYXJjaHkob3B0aW9ucy5sbmcgfHwgX3RoaXM0Lmxhbmd1YWdlLCBvcHRpb25zLmZhbGxiYWNrTG5nKTtcblxuICAgICAgbmFtZXNwYWNlcy5mb3JFYWNoKGZ1bmN0aW9uIChucykge1xuICAgICAgICBpZiAoX3RoaXM0LmlzVmFsaWRMb29rdXAoZm91bmQpKSByZXR1cm47XG4gICAgICAgIHVzZWROUyA9IG5zO1xuXG4gICAgICAgIGNvZGVzLmZvckVhY2goZnVuY3Rpb24gKGNvZGUpIHtcbiAgICAgICAgICBpZiAoX3RoaXM0LmlzVmFsaWRMb29rdXAoZm91bmQpKSByZXR1cm47XG4gICAgICAgICAgdXNlZExuZyA9IGNvZGU7XG5cbiAgICAgICAgICB2YXIgZmluYWxLZXkgPSBrZXk7XG4gICAgICAgICAgdmFyIGZpbmFsS2V5cyA9IFtmaW5hbEtleV07XG5cbiAgICAgICAgICBpZiAoX3RoaXM0LmkxOG5Gb3JtYXQgJiYgX3RoaXM0LmkxOG5Gb3JtYXQuYWRkTG9va3VwS2V5cykge1xuICAgICAgICAgICAgX3RoaXM0LmkxOG5Gb3JtYXQuYWRkTG9va3VwS2V5cyhmaW5hbEtleXMsIGtleSwgY29kZSwgbnMsIG9wdGlvbnMpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2YXIgcGx1cmFsU3VmZml4ID0gdm9pZCAwO1xuICAgICAgICAgICAgaWYgKG5lZWRzUGx1cmFsSGFuZGxpbmcpIHBsdXJhbFN1ZmZpeCA9IF90aGlzNC5wbHVyYWxSZXNvbHZlci5nZXRTdWZmaXgoY29kZSwgb3B0aW9ucy5jb3VudCk7XG5cbiAgICAgICAgICAgIC8vIGZhbGxiYWNrIGZvciBwbHVyYWwgaWYgY29udGV4dCBub3QgZm91bmRcbiAgICAgICAgICAgIGlmIChuZWVkc1BsdXJhbEhhbmRsaW5nICYmIG5lZWRzQ29udGV4dEhhbmRsaW5nKSBmaW5hbEtleXMucHVzaChmaW5hbEtleSArIHBsdXJhbFN1ZmZpeCk7XG5cbiAgICAgICAgICAgIC8vIGdldCBrZXkgZm9yIGNvbnRleHQgaWYgbmVlZGVkXG4gICAgICAgICAgICBpZiAobmVlZHNDb250ZXh0SGFuZGxpbmcpIGZpbmFsS2V5cy5wdXNoKGZpbmFsS2V5ICs9ICcnICsgX3RoaXM0Lm9wdGlvbnMuY29udGV4dFNlcGFyYXRvciArIG9wdGlvbnMuY29udGV4dCk7XG5cbiAgICAgICAgICAgIC8vIGdldCBrZXkgZm9yIHBsdXJhbCBpZiBuZWVkZWRcbiAgICAgICAgICAgIGlmIChuZWVkc1BsdXJhbEhhbmRsaW5nKSBmaW5hbEtleXMucHVzaChmaW5hbEtleSArPSBwbHVyYWxTdWZmaXgpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIGl0ZXJhdGUgb3ZlciBmaW5hbEtleXMgc3RhcnRpbmcgd2l0aCBtb3N0IHNwZWNpZmljIHBsdXJhbGtleSAoLT4gY29udGV4dGtleSBvbmx5KSAtPiBzaW5ndWxhcmtleSBvbmx5XG4gICAgICAgICAgdmFyIHBvc3NpYmxlS2V5ID0gdm9pZCAwO1xuICAgICAgICAgIC8qIGVzbGludCBuby1jb25kLWFzc2lnbjogMCAqL1xuICAgICAgICAgIHdoaWxlIChwb3NzaWJsZUtleSA9IGZpbmFsS2V5cy5wb3AoKSkge1xuICAgICAgICAgICAgaWYgKCFfdGhpczQuaXNWYWxpZExvb2t1cChmb3VuZCkpIHtcbiAgICAgICAgICAgICAgZm91bmQgPSBfdGhpczQuZ2V0UmVzb3VyY2UoY29kZSwgbnMsIHBvc3NpYmxlS2V5LCBvcHRpb25zKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4geyByZXM6IGZvdW5kLCB1c2VkS2V5OiB1c2VkS2V5LCB1c2VkTG5nOiB1c2VkTG5nLCB1c2VkTlM6IHVzZWROUyB9O1xuICB9O1xuXG4gIFRyYW5zbGF0b3IucHJvdG90eXBlLmlzVmFsaWRMb29rdXAgPSBmdW5jdGlvbiBpc1ZhbGlkTG9va3VwKHJlcykge1xuICAgIHJldHVybiByZXMgIT09IHVuZGVmaW5lZCAmJiAhKCF0aGlzLm9wdGlvbnMucmV0dXJuTnVsbCAmJiByZXMgPT09IG51bGwpICYmICEoIXRoaXMub3B0aW9ucy5yZXR1cm5FbXB0eVN0cmluZyAmJiByZXMgPT09ICcnKTtcbiAgfTtcblxuICBUcmFuc2xhdG9yLnByb3RvdHlwZS5nZXRSZXNvdXJjZSA9IGZ1bmN0aW9uIGdldFJlc291cmNlKGNvZGUsIG5zLCBrZXkpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDoge307XG5cbiAgICBpZiAodGhpcy5pMThuRm9ybWF0ICYmIHRoaXMuaTE4bkZvcm1hdC5nZXRSZXNvdXJjZSkgcmV0dXJuIHRoaXMuaTE4bkZvcm1hdC5nZXRSZXNvdXJjZShjb2RlLCBucywga2V5LCBvcHRpb25zKTtcbiAgICByZXR1cm4gdGhpcy5yZXNvdXJjZVN0b3JlLmdldFJlc291cmNlKGNvZGUsIG5zLCBrZXksIG9wdGlvbnMpO1xuICB9O1xuXG4gIHJldHVybiBUcmFuc2xhdG9yO1xufShFdmVudEVtaXR0ZXIpO1xuXG5leHBvcnQgZGVmYXVsdCBUcmFuc2xhdG9yOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmltcG9ydCBiYXNlTG9nZ2VyIGZyb20gJy4vbG9nZ2VyLmpzJztcblxuZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0cmluZy5zbGljZSgxKTtcbn1cblxudmFyIExhbmd1YWdlVXRpbCA9IGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTGFuZ3VhZ2VVdGlsKG9wdGlvbnMpIHtcbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgTGFuZ3VhZ2VVdGlsKTtcblxuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG5cbiAgICB0aGlzLndoaXRlbGlzdCA9IHRoaXMub3B0aW9ucy53aGl0ZWxpc3QgfHwgZmFsc2U7XG4gICAgdGhpcy5sb2dnZXIgPSBiYXNlTG9nZ2VyLmNyZWF0ZSgnbGFuZ3VhZ2VVdGlscycpO1xuICB9XG5cbiAgTGFuZ3VhZ2VVdGlsLnByb3RvdHlwZS5nZXRTY3JpcHRQYXJ0RnJvbUNvZGUgPSBmdW5jdGlvbiBnZXRTY3JpcHRQYXJ0RnJvbUNvZGUoY29kZSkge1xuICAgIGlmICghY29kZSB8fCBjb2RlLmluZGV4T2YoJy0nKSA8IDApIHJldHVybiBudWxsO1xuXG4gICAgdmFyIHAgPSBjb2RlLnNwbGl0KCctJyk7XG4gICAgaWYgKHAubGVuZ3RoID09PSAyKSByZXR1cm4gbnVsbDtcbiAgICBwLnBvcCgpO1xuICAgIHJldHVybiB0aGlzLmZvcm1hdExhbmd1YWdlQ29kZShwLmpvaW4oJy0nKSk7XG4gIH07XG5cbiAgTGFuZ3VhZ2VVdGlsLnByb3RvdHlwZS5nZXRMYW5ndWFnZVBhcnRGcm9tQ29kZSA9IGZ1bmN0aW9uIGdldExhbmd1YWdlUGFydEZyb21Db2RlKGNvZGUpIHtcbiAgICBpZiAoIWNvZGUgfHwgY29kZS5pbmRleE9mKCctJykgPCAwKSByZXR1cm4gY29kZTtcblxuICAgIHZhciBwID0gY29kZS5zcGxpdCgnLScpO1xuICAgIHJldHVybiB0aGlzLmZvcm1hdExhbmd1YWdlQ29kZShwWzBdKTtcbiAgfTtcblxuICBMYW5ndWFnZVV0aWwucHJvdG90eXBlLmZvcm1hdExhbmd1YWdlQ29kZSA9IGZ1bmN0aW9uIGZvcm1hdExhbmd1YWdlQ29kZShjb2RlKSB7XG4gICAgLy8gaHR0cDovL3d3dy5pYW5hLm9yZy9hc3NpZ25tZW50cy9sYW5ndWFnZS10YWdzL2xhbmd1YWdlLXRhZ3MueGh0bWxcbiAgICBpZiAodHlwZW9mIGNvZGUgPT09ICdzdHJpbmcnICYmIGNvZGUuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICAgIHZhciBzcGVjaWFsQ2FzZXMgPSBbJ2hhbnMnLCAnaGFudCcsICdsYXRuJywgJ2N5cmwnLCAnY2FucycsICdtb25nJywgJ2FyYWInXTtcbiAgICAgIHZhciBwID0gY29kZS5zcGxpdCgnLScpO1xuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLmxvd2VyQ2FzZUxuZykge1xuICAgICAgICBwID0gcC5tYXAoZnVuY3Rpb24gKHBhcnQpIHtcbiAgICAgICAgICByZXR1cm4gcGFydC50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAocC5sZW5ndGggPT09IDIpIHtcbiAgICAgICAgcFswXSA9IHBbMF0udG9Mb3dlckNhc2UoKTtcbiAgICAgICAgcFsxXSA9IHBbMV0udG9VcHBlckNhc2UoKTtcblxuICAgICAgICBpZiAoc3BlY2lhbENhc2VzLmluZGV4T2YocFsxXS50b0xvd2VyQ2FzZSgpKSA+IC0xKSBwWzFdID0gY2FwaXRhbGl6ZShwWzFdLnRvTG93ZXJDYXNlKCkpO1xuICAgICAgfSBlbHNlIGlmIChwLmxlbmd0aCA9PT0gMykge1xuICAgICAgICBwWzBdID0gcFswXS50b0xvd2VyQ2FzZSgpO1xuXG4gICAgICAgIC8vIGlmIGxlbmdodCAyIGd1ZXNzIGl0J3MgYSBjb3VudHJ5XG4gICAgICAgIGlmIChwWzFdLmxlbmd0aCA9PT0gMikgcFsxXSA9IHBbMV0udG9VcHBlckNhc2UoKTtcbiAgICAgICAgaWYgKHBbMF0gIT09ICdzZ24nICYmIHBbMl0ubGVuZ3RoID09PSAyKSBwWzJdID0gcFsyXS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgICAgIGlmIChzcGVjaWFsQ2FzZXMuaW5kZXhPZihwWzFdLnRvTG93ZXJDYXNlKCkpID4gLTEpIHBbMV0gPSBjYXBpdGFsaXplKHBbMV0udG9Mb3dlckNhc2UoKSk7XG4gICAgICAgIGlmIChzcGVjaWFsQ2FzZXMuaW5kZXhPZihwWzJdLnRvTG93ZXJDYXNlKCkpID4gLTEpIHBbMl0gPSBjYXBpdGFsaXplKHBbMl0udG9Mb3dlckNhc2UoKSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBwLmpvaW4oJy0nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5vcHRpb25zLmNsZWFuQ29kZSB8fCB0aGlzLm9wdGlvbnMubG93ZXJDYXNlTG5nID8gY29kZS50b0xvd2VyQ2FzZSgpIDogY29kZTtcbiAgfTtcblxuICBMYW5ndWFnZVV0aWwucHJvdG90eXBlLmlzV2hpdGVsaXN0ZWQgPSBmdW5jdGlvbiBpc1doaXRlbGlzdGVkKGNvZGUpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zLmxvYWQgPT09ICdsYW5ndWFnZU9ubHknIHx8IHRoaXMub3B0aW9ucy5ub25FeHBsaWNpdFdoaXRlbGlzdCkge1xuICAgICAgY29kZSA9IHRoaXMuZ2V0TGFuZ3VhZ2VQYXJ0RnJvbUNvZGUoY29kZSk7XG4gICAgfVxuICAgIHJldHVybiAhdGhpcy53aGl0ZWxpc3QgfHwgIXRoaXMud2hpdGVsaXN0Lmxlbmd0aCB8fCB0aGlzLndoaXRlbGlzdC5pbmRleE9mKGNvZGUpID4gLTE7XG4gIH07XG5cbiAgTGFuZ3VhZ2VVdGlsLnByb3RvdHlwZS5nZXRGYWxsYmFja0NvZGVzID0gZnVuY3Rpb24gZ2V0RmFsbGJhY2tDb2RlcyhmYWxsYmFja3MsIGNvZGUpIHtcbiAgICBpZiAoIWZhbGxiYWNrcykgcmV0dXJuIFtdO1xuICAgIGlmICh0eXBlb2YgZmFsbGJhY2tzID09PSAnc3RyaW5nJykgZmFsbGJhY2tzID0gW2ZhbGxiYWNrc107XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuYXBwbHkoZmFsbGJhY2tzKSA9PT0gJ1tvYmplY3QgQXJyYXldJykgcmV0dXJuIGZhbGxiYWNrcztcblxuICAgIGlmICghY29kZSkgcmV0dXJuIGZhbGxiYWNrcy5kZWZhdWx0IHx8IFtdO1xuXG4gICAgLy8gYXN1bWUgd2UgaGF2ZSBhbiBvYmplY3QgZGVmaW5pbmcgZmFsbGJhY2tzXG4gICAgdmFyIGZvdW5kID0gZmFsbGJhY2tzW2NvZGVdO1xuICAgIGlmICghZm91bmQpIGZvdW5kID0gZmFsbGJhY2tzW3RoaXMuZ2V0U2NyaXB0UGFydEZyb21Db2RlKGNvZGUpXTtcbiAgICBpZiAoIWZvdW5kKSBmb3VuZCA9IGZhbGxiYWNrc1t0aGlzLmZvcm1hdExhbmd1YWdlQ29kZShjb2RlKV07XG4gICAgaWYgKCFmb3VuZCkgZm91bmQgPSBmYWxsYmFja3MuZGVmYXVsdDtcblxuICAgIHJldHVybiBmb3VuZCB8fCBbXTtcbiAgfTtcblxuICBMYW5ndWFnZVV0aWwucHJvdG90eXBlLnRvUmVzb2x2ZUhpZXJhcmNoeSA9IGZ1bmN0aW9uIHRvUmVzb2x2ZUhpZXJhcmNoeShjb2RlLCBmYWxsYmFja0NvZGUpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIGZhbGxiYWNrQ29kZXMgPSB0aGlzLmdldEZhbGxiYWNrQ29kZXMoZmFsbGJhY2tDb2RlIHx8IHRoaXMub3B0aW9ucy5mYWxsYmFja0xuZyB8fCBbXSwgY29kZSk7XG5cbiAgICB2YXIgY29kZXMgPSBbXTtcbiAgICB2YXIgYWRkQ29kZSA9IGZ1bmN0aW9uIGFkZENvZGUoYykge1xuICAgICAgaWYgKCFjKSByZXR1cm47XG4gICAgICBpZiAoX3RoaXMuaXNXaGl0ZWxpc3RlZChjKSkge1xuICAgICAgICBjb2Rlcy5wdXNoKGMpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX3RoaXMubG9nZ2VyLndhcm4oJ3JlamVjdGluZyBub24td2hpdGVsaXN0ZWQgbGFuZ3VhZ2UgY29kZTogJyArIGMpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBpZiAodHlwZW9mIGNvZGUgPT09ICdzdHJpbmcnICYmIGNvZGUuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMubG9hZCAhPT0gJ2xhbmd1YWdlT25seScpIGFkZENvZGUodGhpcy5mb3JtYXRMYW5ndWFnZUNvZGUoY29kZSkpO1xuICAgICAgaWYgKHRoaXMub3B0aW9ucy5sb2FkICE9PSAnbGFuZ3VhZ2VPbmx5JyAmJiB0aGlzLm9wdGlvbnMubG9hZCAhPT0gJ2N1cnJlbnRPbmx5JykgYWRkQ29kZSh0aGlzLmdldFNjcmlwdFBhcnRGcm9tQ29kZShjb2RlKSk7XG4gICAgICBpZiAodGhpcy5vcHRpb25zLmxvYWQgIT09ICdjdXJyZW50T25seScpIGFkZENvZGUodGhpcy5nZXRMYW5ndWFnZVBhcnRGcm9tQ29kZShjb2RlKSk7XG4gICAgfSBlbHNlIGlmICh0eXBlb2YgY29kZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGFkZENvZGUodGhpcy5mb3JtYXRMYW5ndWFnZUNvZGUoY29kZSkpO1xuICAgIH1cblxuICAgIGZhbGxiYWNrQ29kZXMuZm9yRWFjaChmdW5jdGlvbiAoZmMpIHtcbiAgICAgIGlmIChjb2Rlcy5pbmRleE9mKGZjKSA8IDApIGFkZENvZGUoX3RoaXMuZm9ybWF0TGFuZ3VhZ2VDb2RlKGZjKSk7XG4gICAgfSk7XG5cbiAgICByZXR1cm4gY29kZXM7XG4gIH07XG5cbiAgcmV0dXJuIExhbmd1YWdlVXRpbDtcbn0oKTtcblxuZXhwb3J0IGRlZmF1bHQgTGFuZ3VhZ2VVdGlsOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHsgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTsgfSB9XG5cbmltcG9ydCBiYXNlTG9nZ2VyIGZyb20gJy4vbG9nZ2VyLmpzJztcblxuLy8gZGVmaW5pdGlvbiBodHRwOi8vdHJhbnNsYXRlLnNvdXJjZWZvcmdlLm5ldC93aWtpL2wxMG4vcGx1cmFsZm9ybXNcbi8qIGVzbGludC1kaXNhYmxlICovXG52YXIgc2V0cyA9IFt7IGxuZ3M6IFsnYWNoJywgJ2FrJywgJ2FtJywgJ2FybicsICdicicsICdmaWwnLCAnZ3VuJywgJ2xuJywgJ21mZScsICdtZycsICdtaScsICdvYycsICdwdCcsICdwdC1CUicsICd0ZycsICd0aScsICd0cicsICd1eicsICd3YSddLCBucjogWzEsIDJdLCBmYzogMSB9LCB7IGxuZ3M6IFsnYWYnLCAnYW4nLCAnYXN0JywgJ2F6JywgJ2JnJywgJ2JuJywgJ2NhJywgJ2RhJywgJ2RlJywgJ2RldicsICdlbCcsICdlbicsICdlbycsICdlcycsICdldCcsICdldScsICdmaScsICdmbycsICdmdXInLCAnZnknLCAnZ2wnLCAnZ3UnLCAnaGEnLCAnaGknLCAnaHUnLCAnaHknLCAnaWEnLCAnaXQnLCAna24nLCAna3UnLCAnbGInLCAnbWFpJywgJ21sJywgJ21uJywgJ21yJywgJ25haCcsICduYXAnLCAnbmInLCAnbmUnLCAnbmwnLCAnbm4nLCAnbm8nLCAnbnNvJywgJ3BhJywgJ3BhcCcsICdwbXMnLCAncHMnLCAncHQtUFQnLCAncm0nLCAnc2NvJywgJ3NlJywgJ3NpJywgJ3NvJywgJ3NvbicsICdzcScsICdzdicsICdzdycsICd0YScsICd0ZScsICd0aycsICd1cicsICd5byddLCBucjogWzEsIDJdLCBmYzogMiB9LCB7IGxuZ3M6IFsnYXknLCAnYm8nLCAnY2dnJywgJ2ZhJywgJ2lkJywgJ2phJywgJ2pibycsICdrYScsICdraycsICdrbScsICdrbycsICdreScsICdsbycsICdtcycsICdzYWgnLCAnc3UnLCAndGgnLCAndHQnLCAndWcnLCAndmknLCAnd28nLCAnemgnXSwgbnI6IFsxXSwgZmM6IDMgfSwgeyBsbmdzOiBbJ2JlJywgJ2JzJywgJ2R6JywgJ2hyJywgJ3J1JywgJ3NyJywgJ3VrJ10sIG5yOiBbMSwgMiwgNV0sIGZjOiA0IH0sIHsgbG5nczogWydhciddLCBucjogWzAsIDEsIDIsIDMsIDExLCAxMDBdLCBmYzogNSB9LCB7IGxuZ3M6IFsnY3MnLCAnc2snXSwgbnI6IFsxLCAyLCA1XSwgZmM6IDYgfSwgeyBsbmdzOiBbJ2NzYicsICdwbCddLCBucjogWzEsIDIsIDVdLCBmYzogNyB9LCB7IGxuZ3M6IFsnY3knXSwgbnI6IFsxLCAyLCAzLCA4XSwgZmM6IDggfSwgeyBsbmdzOiBbJ2ZyJ10sIG5yOiBbMSwgMl0sIGZjOiA5IH0sIHsgbG5nczogWydnYSddLCBucjogWzEsIDIsIDMsIDcsIDExXSwgZmM6IDEwIH0sIHsgbG5nczogWydnZCddLCBucjogWzEsIDIsIDMsIDIwXSwgZmM6IDExIH0sIHsgbG5nczogWydpcyddLCBucjogWzEsIDJdLCBmYzogMTIgfSwgeyBsbmdzOiBbJ2p2J10sIG5yOiBbMCwgMV0sIGZjOiAxMyB9LCB7IGxuZ3M6IFsna3cnXSwgbnI6IFsxLCAyLCAzLCA0XSwgZmM6IDE0IH0sIHsgbG5nczogWydsdCddLCBucjogWzEsIDIsIDEwXSwgZmM6IDE1IH0sIHsgbG5nczogWydsdiddLCBucjogWzEsIDIsIDBdLCBmYzogMTYgfSwgeyBsbmdzOiBbJ21rJ10sIG5yOiBbMSwgMl0sIGZjOiAxNyB9LCB7IGxuZ3M6IFsnbW5rJ10sIG5yOiBbMCwgMSwgMl0sIGZjOiAxOCB9LCB7IGxuZ3M6IFsnbXQnXSwgbnI6IFsxLCAyLCAxMSwgMjBdLCBmYzogMTkgfSwgeyBsbmdzOiBbJ29yJ10sIG5yOiBbMiwgMV0sIGZjOiAyIH0sIHsgbG5nczogWydybyddLCBucjogWzEsIDIsIDIwXSwgZmM6IDIwIH0sIHsgbG5nczogWydzbCddLCBucjogWzUsIDEsIDIsIDNdLCBmYzogMjEgfSwgeyBsbmdzOiBbJ2hlJ10sIG5yOiBbMSwgMiwgMjAsIDIxXSwgZmM6IDIyIH1dO1xuXG52YXIgX3J1bGVzUGx1cmFsc1R5cGVzID0ge1xuICAxOiBmdW5jdGlvbiBfKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gPiAxKTtcbiAgfSxcbiAgMjogZnVuY3Rpb24gXyhuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuICE9IDEpO1xuICB9LFxuICAzOiBmdW5jdGlvbiBfKG4pIHtcbiAgICByZXR1cm4gMDtcbiAgfSxcbiAgNDogZnVuY3Rpb24gXyhuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuICUgMTAgPT0gMSAmJiBuICUgMTAwICE9IDExID8gMCA6IG4gJSAxMCA+PSAyICYmIG4gJSAxMCA8PSA0ICYmIChuICUgMTAwIDwgMTAgfHwgbiAlIDEwMCA+PSAyMCkgPyAxIDogMik7XG4gIH0sXG4gIDU6IGZ1bmN0aW9uIF8obikge1xuICAgIHJldHVybiBOdW1iZXIobiA9PT0gMCA/IDAgOiBuID09IDEgPyAxIDogbiA9PSAyID8gMiA6IG4gJSAxMDAgPj0gMyAmJiBuICUgMTAwIDw9IDEwID8gMyA6IG4gJSAxMDAgPj0gMTEgPyA0IDogNSk7XG4gIH0sXG4gIDY6IGZ1bmN0aW9uIF8obikge1xuICAgIHJldHVybiBOdW1iZXIobiA9PSAxID8gMCA6IG4gPj0gMiAmJiBuIDw9IDQgPyAxIDogMik7XG4gIH0sXG4gIDc6IGZ1bmN0aW9uIF8obikge1xuICAgIHJldHVybiBOdW1iZXIobiA9PSAxID8gMCA6IG4gJSAxMCA+PSAyICYmIG4gJSAxMCA8PSA0ICYmIChuICUgMTAwIDwgMTAgfHwgbiAlIDEwMCA+PSAyMCkgPyAxIDogMik7XG4gIH0sXG4gIDg6IGZ1bmN0aW9uIF8obikge1xuICAgIHJldHVybiBOdW1iZXIobiA9PSAxID8gMCA6IG4gPT0gMiA/IDEgOiBuICE9IDggJiYgbiAhPSAxMSA/IDIgOiAzKTtcbiAgfSxcbiAgOTogZnVuY3Rpb24gXyhuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuID49IDIpO1xuICB9LFxuICAxMDogZnVuY3Rpb24gXyhuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuID09IDEgPyAwIDogbiA9PSAyID8gMSA6IG4gPCA3ID8gMiA6IG4gPCAxMSA/IDMgOiA0KTtcbiAgfSxcbiAgMTE6IGZ1bmN0aW9uIF8obikge1xuICAgIHJldHVybiBOdW1iZXIobiA9PSAxIHx8IG4gPT0gMTEgPyAwIDogbiA9PSAyIHx8IG4gPT0gMTIgPyAxIDogbiA+IDIgJiYgbiA8IDIwID8gMiA6IDMpO1xuICB9LFxuICAxMjogZnVuY3Rpb24gXyhuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuICUgMTAgIT0gMSB8fCBuICUgMTAwID09IDExKTtcbiAgfSxcbiAgMTM6IGZ1bmN0aW9uIF8obikge1xuICAgIHJldHVybiBOdW1iZXIobiAhPT0gMCk7XG4gIH0sXG4gIDE0OiBmdW5jdGlvbiBfKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gPT0gMSA/IDAgOiBuID09IDIgPyAxIDogbiA9PSAzID8gMiA6IDMpO1xuICB9LFxuICAxNTogZnVuY3Rpb24gXyhuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuICUgMTAgPT0gMSAmJiBuICUgMTAwICE9IDExID8gMCA6IG4gJSAxMCA+PSAyICYmIChuICUgMTAwIDwgMTAgfHwgbiAlIDEwMCA+PSAyMCkgPyAxIDogMik7XG4gIH0sXG4gIDE2OiBmdW5jdGlvbiBfKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gJSAxMCA9PSAxICYmIG4gJSAxMDAgIT0gMTEgPyAwIDogbiAhPT0gMCA/IDEgOiAyKTtcbiAgfSxcbiAgMTc6IGZ1bmN0aW9uIF8obikge1xuICAgIHJldHVybiBOdW1iZXIobiA9PSAxIHx8IG4gJSAxMCA9PSAxID8gMCA6IDEpO1xuICB9LFxuICAxODogZnVuY3Rpb24gXyhuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuID09IDAgPyAwIDogbiA9PSAxID8gMSA6IDIpO1xuICB9LFxuICAxOTogZnVuY3Rpb24gXyhuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuID09IDEgPyAwIDogbiA9PT0gMCB8fCBuICUgMTAwID4gMSAmJiBuICUgMTAwIDwgMTEgPyAxIDogbiAlIDEwMCA+IDEwICYmIG4gJSAxMDAgPCAyMCA/IDIgOiAzKTtcbiAgfSxcbiAgMjA6IGZ1bmN0aW9uIF8obikge1xuICAgIHJldHVybiBOdW1iZXIobiA9PSAxID8gMCA6IG4gPT09IDAgfHwgbiAlIDEwMCA+IDAgJiYgbiAlIDEwMCA8IDIwID8gMSA6IDIpO1xuICB9LFxuICAyMTogZnVuY3Rpb24gXyhuKSB7XG4gICAgcmV0dXJuIE51bWJlcihuICUgMTAwID09IDEgPyAxIDogbiAlIDEwMCA9PSAyID8gMiA6IG4gJSAxMDAgPT0gMyB8fCBuICUgMTAwID09IDQgPyAzIDogMCk7XG4gIH0sXG4gIDIyOiBmdW5jdGlvbiBfKG4pIHtcbiAgICByZXR1cm4gTnVtYmVyKG4gPT09IDEgPyAwIDogbiA9PT0gMiA/IDEgOiAobiA8IDAgfHwgbiA+IDEwKSAmJiBuICUgMTAgPT0gMCA/IDIgOiAzKTtcbiAgfVxufTtcbi8qIGVzbGludC1lbmFibGUgKi9cblxuZnVuY3Rpb24gY3JlYXRlUnVsZXMoKSB7XG4gIHZhciBydWxlcyA9IHt9O1xuICBzZXRzLmZvckVhY2goZnVuY3Rpb24gKHNldCkge1xuICAgIHNldC5sbmdzLmZvckVhY2goZnVuY3Rpb24gKGwpIHtcbiAgICAgIHJ1bGVzW2xdID0ge1xuICAgICAgICBudW1iZXJzOiBzZXQubnIsXG4gICAgICAgIHBsdXJhbHM6IF9ydWxlc1BsdXJhbHNUeXBlc1tzZXQuZmNdXG4gICAgICB9O1xuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIHJ1bGVzO1xufVxuXG52YXIgUGx1cmFsUmVzb2x2ZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFBsdXJhbFJlc29sdmVyKGxhbmd1YWdlVXRpbHMpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgUGx1cmFsUmVzb2x2ZXIpO1xuXG4gICAgdGhpcy5sYW5ndWFnZVV0aWxzID0gbGFuZ3VhZ2VVdGlscztcbiAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuXG4gICAgdGhpcy5sb2dnZXIgPSBiYXNlTG9nZ2VyLmNyZWF0ZSgncGx1cmFsUmVzb2x2ZXInKTtcblxuICAgIHRoaXMucnVsZXMgPSBjcmVhdGVSdWxlcygpO1xuICB9XG5cbiAgUGx1cmFsUmVzb2x2ZXIucHJvdG90eXBlLmFkZFJ1bGUgPSBmdW5jdGlvbiBhZGRSdWxlKGxuZywgb2JqKSB7XG4gICAgdGhpcy5ydWxlc1tsbmddID0gb2JqO1xuICB9O1xuXG4gIFBsdXJhbFJlc29sdmVyLnByb3RvdHlwZS5nZXRSdWxlID0gZnVuY3Rpb24gZ2V0UnVsZShjb2RlKSB7XG4gICAgcmV0dXJuIHRoaXMucnVsZXNbY29kZV0gfHwgdGhpcy5ydWxlc1t0aGlzLmxhbmd1YWdlVXRpbHMuZ2V0TGFuZ3VhZ2VQYXJ0RnJvbUNvZGUoY29kZSldO1xuICB9O1xuXG4gIFBsdXJhbFJlc29sdmVyLnByb3RvdHlwZS5uZWVkc1BsdXJhbCA9IGZ1bmN0aW9uIG5lZWRzUGx1cmFsKGNvZGUpIHtcbiAgICB2YXIgcnVsZSA9IHRoaXMuZ2V0UnVsZShjb2RlKTtcblxuICAgIHJldHVybiBydWxlICYmIHJ1bGUubnVtYmVycy5sZW5ndGggPiAxO1xuICB9O1xuXG4gIFBsdXJhbFJlc29sdmVyLnByb3RvdHlwZS5nZXRQbHVyYWxGb3Jtc09mS2V5ID0gZnVuY3Rpb24gZ2V0UGx1cmFsRm9ybXNPZktleShjb2RlLCBrZXkpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIHJldCA9IFtdO1xuXG4gICAgdmFyIHJ1bGUgPSB0aGlzLmdldFJ1bGUoY29kZSk7XG5cbiAgICBpZiAoIXJ1bGUpIHJldHVybiByZXQ7XG5cbiAgICBydWxlLm51bWJlcnMuZm9yRWFjaChmdW5jdGlvbiAobikge1xuICAgICAgdmFyIHN1ZmZpeCA9IF90aGlzLmdldFN1ZmZpeChjb2RlLCBuKTtcbiAgICAgIHJldC5wdXNoKCcnICsga2V5ICsgc3VmZml4KTtcbiAgICB9KTtcblxuICAgIHJldHVybiByZXQ7XG4gIH07XG5cbiAgUGx1cmFsUmVzb2x2ZXIucHJvdG90eXBlLmdldFN1ZmZpeCA9IGZ1bmN0aW9uIGdldFN1ZmZpeChjb2RlLCBjb3VudCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIHJ1bGUgPSB0aGlzLmdldFJ1bGUoY29kZSk7XG5cbiAgICBpZiAocnVsZSkge1xuICAgICAgLy8gaWYgKHJ1bGUubnVtYmVycy5sZW5ndGggPT09IDEpIHJldHVybiAnJzsgLy8gb25seSBzaW5ndWxhclxuXG4gICAgICB2YXIgaWR4ID0gcnVsZS5ub0FicyA/IHJ1bGUucGx1cmFscyhjb3VudCkgOiBydWxlLnBsdXJhbHMoTWF0aC5hYnMoY291bnQpKTtcbiAgICAgIHZhciBzdWZmaXggPSBydWxlLm51bWJlcnNbaWR4XTtcblxuICAgICAgLy8gc3BlY2lhbCB0cmVhdG1lbnQgZm9yIGxuZ3Mgb25seSBoYXZpbmcgc2luZ3VsYXIgYW5kIHBsdXJhbFxuICAgICAgaWYgKHRoaXMub3B0aW9ucy5zaW1wbGlmeVBsdXJhbFN1ZmZpeCAmJiBydWxlLm51bWJlcnMubGVuZ3RoID09PSAyICYmIHJ1bGUubnVtYmVyc1swXSA9PT0gMSkge1xuICAgICAgICBpZiAoc3VmZml4ID09PSAyKSB7XG4gICAgICAgICAgc3VmZml4ID0gJ3BsdXJhbCc7XG4gICAgICAgIH0gZWxzZSBpZiAoc3VmZml4ID09PSAxKSB7XG4gICAgICAgICAgc3VmZml4ID0gJyc7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdmFyIHJldHVyblN1ZmZpeCA9IGZ1bmN0aW9uIHJldHVyblN1ZmZpeCgpIHtcbiAgICAgICAgcmV0dXJuIF90aGlzMi5vcHRpb25zLnByZXBlbmQgJiYgc3VmZml4LnRvU3RyaW5nKCkgPyBfdGhpczIub3B0aW9ucy5wcmVwZW5kICsgc3VmZml4LnRvU3RyaW5nKCkgOiBzdWZmaXgudG9TdHJpbmcoKTtcbiAgICAgIH07XG5cbiAgICAgIC8vIENPTVBBVElCSUxJVFkgSlNPTlxuICAgICAgLy8gdjFcbiAgICAgIGlmICh0aGlzLm9wdGlvbnMuY29tcGF0aWJpbGl0eUpTT04gPT09ICd2MScpIHtcbiAgICAgICAgaWYgKHN1ZmZpeCA9PT0gMSkgcmV0dXJuICcnO1xuICAgICAgICBpZiAodHlwZW9mIHN1ZmZpeCA9PT0gJ251bWJlcicpIHJldHVybiAnX3BsdXJhbF8nICsgc3VmZml4LnRvU3RyaW5nKCk7XG4gICAgICAgIHJldHVybiByZXR1cm5TdWZmaXgoKTtcbiAgICAgIH0gZWxzZSBpZiAoIC8qIHYyICovdGhpcy5vcHRpb25zLmNvbXBhdGliaWxpdHlKU09OID09PSAndjInICYmIHJ1bGUubnVtYmVycy5sZW5ndGggPT09IDIgJiYgcnVsZS5udW1iZXJzWzBdID09PSAxKSB7XG4gICAgICAgIHJldHVybiByZXR1cm5TdWZmaXgoKTtcbiAgICAgIH0gZWxzZSBpZiAoIC8qIHYzIC0gZ2V0dGV4dCBpbmRleCAqL3RoaXMub3B0aW9ucy5zaW1wbGlmeVBsdXJhbFN1ZmZpeCAmJiBydWxlLm51bWJlcnMubGVuZ3RoID09PSAyICYmIHJ1bGUubnVtYmVyc1swXSA9PT0gMSkge1xuICAgICAgICByZXR1cm4gcmV0dXJuU3VmZml4KCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5vcHRpb25zLnByZXBlbmQgJiYgaWR4LnRvU3RyaW5nKCkgPyB0aGlzLm9wdGlvbnMucHJlcGVuZCArIGlkeC50b1N0cmluZygpIDogaWR4LnRvU3RyaW5nKCk7XG4gICAgfVxuXG4gICAgdGhpcy5sb2dnZXIud2Fybignbm8gcGx1cmFsIHJ1bGUgZm91bmQgZm9yOiAnICsgY29kZSk7XG4gICAgcmV0dXJuICcnO1xuICB9O1xuXG4gIHJldHVybiBQbHVyYWxSZXNvbHZlcjtcbn0oKTtcblxuZXhwb3J0IGRlZmF1bHQgUGx1cmFsUmVzb2x2ZXI7IiwidmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2NsYXNzQ2FsbENoZWNrKGluc3RhbmNlLCBDb25zdHJ1Y3RvcikgeyBpZiAoIShpbnN0YW5jZSBpbnN0YW5jZW9mIENvbnN0cnVjdG9yKSkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpOyB9IH1cblxuaW1wb3J0ICogYXMgdXRpbHMgZnJvbSAnLi91dGlscy5qcyc7XG5pbXBvcnQgYmFzZUxvZ2dlciBmcm9tICcuL2xvZ2dlci5qcyc7XG5cbnZhciBJbnRlcnBvbGF0b3IgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEludGVycG9sYXRvcigpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgSW50ZXJwb2xhdG9yKTtcblxuICAgIHRoaXMubG9nZ2VyID0gYmFzZUxvZ2dlci5jcmVhdGUoJ2ludGVycG9sYXRvcicpO1xuXG4gICAgdGhpcy5pbml0KG9wdGlvbnMsIHRydWUpO1xuICB9XG5cbiAgLyogZXNsaW50IG5vLXBhcmFtLXJlYXNzaWduOiAwICovXG5cblxuICBJbnRlcnBvbGF0b3IucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiBpbml0KCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICB2YXIgcmVzZXQgPSBhcmd1bWVudHNbMV07XG5cbiAgICBpZiAocmVzZXQpIHtcbiAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICB0aGlzLmZvcm1hdCA9IG9wdGlvbnMuaW50ZXJwb2xhdGlvbiAmJiBvcHRpb25zLmludGVycG9sYXRpb24uZm9ybWF0IHx8IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9O1xuICAgIH1cbiAgICBpZiAoIW9wdGlvbnMuaW50ZXJwb2xhdGlvbikgb3B0aW9ucy5pbnRlcnBvbGF0aW9uID0geyBlc2NhcGVWYWx1ZTogdHJ1ZSB9O1xuXG4gICAgdmFyIGlPcHRzID0gb3B0aW9ucy5pbnRlcnBvbGF0aW9uO1xuXG4gICAgdGhpcy5lc2NhcGUgPSBpT3B0cy5lc2NhcGUgIT09IHVuZGVmaW5lZCA/IGlPcHRzLmVzY2FwZSA6IHV0aWxzLmVzY2FwZTtcbiAgICB0aGlzLmVzY2FwZVZhbHVlID0gaU9wdHMuZXNjYXBlVmFsdWUgIT09IHVuZGVmaW5lZCA/IGlPcHRzLmVzY2FwZVZhbHVlIDogdHJ1ZTtcbiAgICB0aGlzLnVzZVJhd1ZhbHVlVG9Fc2NhcGUgPSBpT3B0cy51c2VSYXdWYWx1ZVRvRXNjYXBlICE9PSB1bmRlZmluZWQgPyBpT3B0cy51c2VSYXdWYWx1ZVRvRXNjYXBlIDogZmFsc2U7XG5cbiAgICB0aGlzLnByZWZpeCA9IGlPcHRzLnByZWZpeCA/IHV0aWxzLnJlZ2V4RXNjYXBlKGlPcHRzLnByZWZpeCkgOiBpT3B0cy5wcmVmaXhFc2NhcGVkIHx8ICd7eyc7XG4gICAgdGhpcy5zdWZmaXggPSBpT3B0cy5zdWZmaXggPyB1dGlscy5yZWdleEVzY2FwZShpT3B0cy5zdWZmaXgpIDogaU9wdHMuc3VmZml4RXNjYXBlZCB8fCAnfX0nO1xuXG4gICAgdGhpcy5mb3JtYXRTZXBhcmF0b3IgPSBpT3B0cy5mb3JtYXRTZXBhcmF0b3IgPyBpT3B0cy5mb3JtYXRTZXBhcmF0b3IgOiBpT3B0cy5mb3JtYXRTZXBhcmF0b3IgfHwgJywnO1xuXG4gICAgdGhpcy51bmVzY2FwZVByZWZpeCA9IGlPcHRzLnVuZXNjYXBlU3VmZml4ID8gJycgOiBpT3B0cy51bmVzY2FwZVByZWZpeCB8fCAnLSc7XG4gICAgdGhpcy51bmVzY2FwZVN1ZmZpeCA9IHRoaXMudW5lc2NhcGVQcmVmaXggPyAnJyA6IGlPcHRzLnVuZXNjYXBlU3VmZml4IHx8ICcnO1xuXG4gICAgdGhpcy5uZXN0aW5nUHJlZml4ID0gaU9wdHMubmVzdGluZ1ByZWZpeCA/IHV0aWxzLnJlZ2V4RXNjYXBlKGlPcHRzLm5lc3RpbmdQcmVmaXgpIDogaU9wdHMubmVzdGluZ1ByZWZpeEVzY2FwZWQgfHwgdXRpbHMucmVnZXhFc2NhcGUoJyR0KCcpO1xuICAgIHRoaXMubmVzdGluZ1N1ZmZpeCA9IGlPcHRzLm5lc3RpbmdTdWZmaXggPyB1dGlscy5yZWdleEVzY2FwZShpT3B0cy5uZXN0aW5nU3VmZml4KSA6IGlPcHRzLm5lc3RpbmdTdWZmaXhFc2NhcGVkIHx8IHV0aWxzLnJlZ2V4RXNjYXBlKCcpJyk7XG5cbiAgICB0aGlzLm1heFJlcGxhY2VzID0gaU9wdHMubWF4UmVwbGFjZXMgPyBpT3B0cy5tYXhSZXBsYWNlcyA6IDEwMDA7XG5cbiAgICAvLyB0aGUgcmVnZXhwXG4gICAgdGhpcy5yZXNldFJlZ0V4cCgpO1xuICB9O1xuXG4gIEludGVycG9sYXRvci5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbiByZXNldCgpIHtcbiAgICBpZiAodGhpcy5vcHRpb25zKSB0aGlzLmluaXQodGhpcy5vcHRpb25zKTtcbiAgfTtcblxuICBJbnRlcnBvbGF0b3IucHJvdG90eXBlLnJlc2V0UmVnRXhwID0gZnVuY3Rpb24gcmVzZXRSZWdFeHAoKSB7XG4gICAgLy8gdGhlIHJlZ2V4cFxuICAgIHZhciByZWdleHBTdHIgPSB0aGlzLnByZWZpeCArICcoLis/KScgKyB0aGlzLnN1ZmZpeDtcbiAgICB0aGlzLnJlZ2V4cCA9IG5ldyBSZWdFeHAocmVnZXhwU3RyLCAnZycpO1xuXG4gICAgdmFyIHJlZ2V4cFVuZXNjYXBlU3RyID0gJycgKyB0aGlzLnByZWZpeCArIHRoaXMudW5lc2NhcGVQcmVmaXggKyAnKC4rPyknICsgdGhpcy51bmVzY2FwZVN1ZmZpeCArIHRoaXMuc3VmZml4O1xuICAgIHRoaXMucmVnZXhwVW5lc2NhcGUgPSBuZXcgUmVnRXhwKHJlZ2V4cFVuZXNjYXBlU3RyLCAnZycpO1xuXG4gICAgdmFyIG5lc3RpbmdSZWdleHBTdHIgPSB0aGlzLm5lc3RpbmdQcmVmaXggKyAnKC4rPyknICsgdGhpcy5uZXN0aW5nU3VmZml4O1xuICAgIHRoaXMubmVzdGluZ1JlZ2V4cCA9IG5ldyBSZWdFeHAobmVzdGluZ1JlZ2V4cFN0ciwgJ2cnKTtcbiAgfTtcblxuICBJbnRlcnBvbGF0b3IucHJvdG90eXBlLmludGVycG9sYXRlID0gZnVuY3Rpb24gaW50ZXJwb2xhdGUoc3RyLCBkYXRhLCBsbmcsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gICAgdmFyIG1hdGNoID0gdm9pZCAwO1xuICAgIHZhciB2YWx1ZSA9IHZvaWQgMDtcbiAgICB2YXIgcmVwbGFjZXMgPSB2b2lkIDA7XG5cbiAgICBmdW5jdGlvbiByZWdleFNhZmUodmFsKSB7XG4gICAgICByZXR1cm4gdmFsLnJlcGxhY2UoL1xcJC9nLCAnJCQkJCcpO1xuICAgIH1cblxuICAgIHZhciBoYW5kbGVGb3JtYXQgPSBmdW5jdGlvbiBoYW5kbGVGb3JtYXQoa2V5KSB7XG4gICAgICBpZiAoa2V5LmluZGV4T2YoX3RoaXMuZm9ybWF0U2VwYXJhdG9yKSA8IDApIHJldHVybiB1dGlscy5nZXRQYXRoKGRhdGEsIGtleSk7XG5cbiAgICAgIHZhciBwID0ga2V5LnNwbGl0KF90aGlzLmZvcm1hdFNlcGFyYXRvcik7XG4gICAgICB2YXIgayA9IHAuc2hpZnQoKS50cmltKCk7XG4gICAgICB2YXIgZiA9IHAuam9pbihfdGhpcy5mb3JtYXRTZXBhcmF0b3IpLnRyaW0oKTtcblxuICAgICAgcmV0dXJuIF90aGlzLmZvcm1hdCh1dGlscy5nZXRQYXRoKGRhdGEsIGspLCBmLCBsbmcpO1xuICAgIH07XG5cbiAgICB0aGlzLnJlc2V0UmVnRXhwKCk7XG5cbiAgICB2YXIgbWlzc2luZ0ludGVycG9sYXRpb25IYW5kbGVyID0gb3B0aW9ucyAmJiBvcHRpb25zLm1pc3NpbmdJbnRlcnBvbGF0aW9uSGFuZGxlciB8fCB0aGlzLm9wdGlvbnMubWlzc2luZ0ludGVycG9sYXRpb25IYW5kbGVyO1xuXG4gICAgcmVwbGFjZXMgPSAwO1xuICAgIC8vIHVuZXNjYXBlIGlmIGhhcyB1bmVzY2FwZVByZWZpeC9TdWZmaXhcbiAgICAvKiBlc2xpbnQgbm8tY29uZC1hc3NpZ246IDAgKi9cbiAgICB3aGlsZSAobWF0Y2ggPSB0aGlzLnJlZ2V4cFVuZXNjYXBlLmV4ZWMoc3RyKSkge1xuICAgICAgdmFsdWUgPSBoYW5kbGVGb3JtYXQobWF0Y2hbMV0udHJpbSgpKTtcbiAgICAgIHN0ciA9IHN0ci5yZXBsYWNlKG1hdGNoWzBdLCB2YWx1ZSk7XG4gICAgICB0aGlzLnJlZ2V4cFVuZXNjYXBlLmxhc3RJbmRleCA9IDA7XG4gICAgICByZXBsYWNlcysrO1xuICAgICAgaWYgKHJlcGxhY2VzID49IHRoaXMubWF4UmVwbGFjZXMpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmVwbGFjZXMgPSAwO1xuICAgIC8vIHJlZ3VsYXIgZXNjYXBlIG9uIGRlbWFuZFxuICAgIHdoaWxlIChtYXRjaCA9IHRoaXMucmVnZXhwLmV4ZWMoc3RyKSkge1xuICAgICAgdmFsdWUgPSBoYW5kbGVGb3JtYXQobWF0Y2hbMV0udHJpbSgpKTtcbiAgICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGlmICh0eXBlb2YgbWlzc2luZ0ludGVycG9sYXRpb25IYW5kbGVyID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgdmFyIHRlbXAgPSBtaXNzaW5nSW50ZXJwb2xhdGlvbkhhbmRsZXIoc3RyLCBtYXRjaCwgb3B0aW9ucyk7XG4gICAgICAgICAgdmFsdWUgPSB0eXBlb2YgdGVtcCA9PT0gJ3N0cmluZycgPyB0ZW1wIDogJyc7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGhpcy5sb2dnZXIud2FybignbWlzc2VkIHRvIHBhc3MgaW4gdmFyaWFibGUgJyArIG1hdGNoWzFdICsgJyBmb3IgaW50ZXJwb2xhdGluZyAnICsgc3RyKTtcbiAgICAgICAgICB2YWx1ZSA9ICcnO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycgJiYgIXRoaXMudXNlUmF3VmFsdWVUb0VzY2FwZSkge1xuICAgICAgICB2YWx1ZSA9IHV0aWxzLm1ha2VTdHJpbmcodmFsdWUpO1xuICAgICAgfVxuICAgICAgdmFsdWUgPSB0aGlzLmVzY2FwZVZhbHVlID8gcmVnZXhTYWZlKHRoaXMuZXNjYXBlKHZhbHVlKSkgOiByZWdleFNhZmUodmFsdWUpO1xuICAgICAgc3RyID0gc3RyLnJlcGxhY2UobWF0Y2hbMF0sIHZhbHVlKTtcbiAgICAgIHRoaXMucmVnZXhwLmxhc3RJbmRleCA9IDA7XG4gICAgICByZXBsYWNlcysrO1xuICAgICAgaWYgKHJlcGxhY2VzID49IHRoaXMubWF4UmVwbGFjZXMpIHtcbiAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG4gIH07XG5cbiAgSW50ZXJwb2xhdG9yLnByb3RvdHlwZS5uZXN0ID0gZnVuY3Rpb24gbmVzdChzdHIsIGZjKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMiAmJiBhcmd1bWVudHNbMl0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1syXSA6IHt9O1xuXG4gICAgdmFyIG1hdGNoID0gdm9pZCAwO1xuICAgIHZhciB2YWx1ZSA9IHZvaWQgMDtcblxuICAgIHZhciBjbG9uZWRPcHRpb25zID0gX2V4dGVuZHMoe30sIG9wdGlvbnMpO1xuICAgIGNsb25lZE9wdGlvbnMuYXBwbHlQb3N0UHJvY2Vzc29yID0gZmFsc2U7IC8vIGF2b2lkIHBvc3QgcHJvY2Vzc2luZyBvbiBuZXN0ZWQgbG9va3VwXG5cbiAgICAvLyBpZiB2YWx1ZSBpcyBzb21ldGhpbmcgbGlrZSBcIm15S2V5XCI6IFwibG9yZW0gJChhbm90aGVyS2V5LCB7IFwiY291bnRcIjoge3thVmFsdWVJbk9wdGlvbnN9fSB9KVwiXG4gICAgZnVuY3Rpb24gaGFuZGxlSGFzT3B0aW9ucyhrZXksIGluaGVyaXRlZE9wdGlvbnMpIHtcbiAgICAgIGlmIChrZXkuaW5kZXhPZignLCcpIDwgMCkgcmV0dXJuIGtleTtcblxuICAgICAgdmFyIHAgPSBrZXkuc3BsaXQoJywnKTtcbiAgICAgIGtleSA9IHAuc2hpZnQoKTtcbiAgICAgIHZhciBvcHRpb25zU3RyaW5nID0gcC5qb2luKCcsJyk7XG4gICAgICBvcHRpb25zU3RyaW5nID0gdGhpcy5pbnRlcnBvbGF0ZShvcHRpb25zU3RyaW5nLCBjbG9uZWRPcHRpb25zKTtcbiAgICAgIG9wdGlvbnNTdHJpbmcgPSBvcHRpb25zU3RyaW5nLnJlcGxhY2UoLycvZywgJ1wiJyk7XG5cbiAgICAgIHRyeSB7XG4gICAgICAgIGNsb25lZE9wdGlvbnMgPSBKU09OLnBhcnNlKG9wdGlvbnNTdHJpbmcpO1xuXG4gICAgICAgIGlmIChpbmhlcml0ZWRPcHRpb25zKSBjbG9uZWRPcHRpb25zID0gX2V4dGVuZHMoe30sIGluaGVyaXRlZE9wdGlvbnMsIGNsb25lZE9wdGlvbnMpO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0aGlzLmxvZ2dlci5lcnJvcignZmFpbGVkIHBhcnNpbmcgb3B0aW9ucyBzdHJpbmcgaW4gbmVzdGluZyBmb3Iga2V5ICcgKyBrZXksIGUpO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cblxuICAgIC8vIHJlZ3VsYXIgZXNjYXBlIG9uIGRlbWFuZFxuICAgIHdoaWxlIChtYXRjaCA9IHRoaXMubmVzdGluZ1JlZ2V4cC5leGVjKHN0cikpIHtcbiAgICAgIHZhbHVlID0gZmMoaGFuZGxlSGFzT3B0aW9ucy5jYWxsKHRoaXMsIG1hdGNoWzFdLnRyaW0oKSwgY2xvbmVkT3B0aW9ucyksIGNsb25lZE9wdGlvbnMpO1xuXG4gICAgICAvLyBpcyBvbmx5IHRoZSBuZXN0aW5nIGtleSAoa2V5MSA9ICckKGtleTIpJykgcmV0dXJuIHRoZSB2YWx1ZSB3aXRob3V0IHN0cmluZ2lmeVxuICAgICAgaWYgKHZhbHVlICYmIG1hdGNoWzBdID09PSBzdHIgJiYgdHlwZW9mIHZhbHVlICE9PSAnc3RyaW5nJykgcmV0dXJuIHZhbHVlO1xuXG4gICAgICAvLyBubyBzdHJpbmcgdG8gaW5jbHVkZSBvciBlbXB0eVxuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSAhPT0gJ3N0cmluZycpIHZhbHVlID0gdXRpbHMubWFrZVN0cmluZyh2YWx1ZSk7XG4gICAgICBpZiAoIXZhbHVlKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLndhcm4oJ21pc3NlZCB0byByZXNvbHZlICcgKyBtYXRjaFsxXSArICcgZm9yIG5lc3RpbmcgJyArIHN0cik7XG4gICAgICAgIHZhbHVlID0gJyc7XG4gICAgICB9XG4gICAgICAvLyBOZXN0ZWQga2V5cyBzaG91bGQgbm90IGJlIGVzY2FwZWQgYnkgZGVmYXVsdCAjODU0XG4gICAgICAvLyB2YWx1ZSA9IHRoaXMuZXNjYXBlVmFsdWUgPyByZWdleFNhZmUodXRpbHMuZXNjYXBlKHZhbHVlKSkgOiByZWdleFNhZmUodmFsdWUpO1xuICAgICAgc3RyID0gc3RyLnJlcGxhY2UobWF0Y2hbMF0sIHZhbHVlKTtcbiAgICAgIHRoaXMucmVnZXhwLmxhc3RJbmRleCA9IDA7XG4gICAgfVxuICAgIHJldHVybiBzdHI7XG4gIH07XG5cbiAgcmV0dXJuIEludGVycG9sYXRvcjtcbn0oKTtcblxuZXhwb3J0IGRlZmF1bHQgSW50ZXJwb2xhdG9yOyIsInZhciBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07XG5cbnZhciBfc2xpY2VkVG9BcnJheSA9IGZ1bmN0aW9uICgpIHsgZnVuY3Rpb24gc2xpY2VJdGVyYXRvcihhcnIsIGkpIHsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0pIF9pW1wicmV0dXJuXCJdKCk7IH0gZmluYWxseSB7IGlmIChfZCkgdGhyb3cgX2U7IH0gfSByZXR1cm4gX2FycjsgfSByZXR1cm4gZnVuY3Rpb24gKGFyciwgaSkgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSB7IHJldHVybiBhcnI7IH0gZWxzZSBpZiAoU3ltYm9sLml0ZXJhdG9yIGluIE9iamVjdChhcnIpKSB7IHJldHVybiBzbGljZUl0ZXJhdG9yKGFyciwgaSk7IH0gZWxzZSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJJbnZhbGlkIGF0dGVtcHQgdG8gZGVzdHJ1Y3R1cmUgbm9uLWl0ZXJhYmxlIGluc3RhbmNlXCIpOyB9IH07IH0oKTtcblxuZnVuY3Rpb24gX2RlZmF1bHRzKG9iaiwgZGVmYXVsdHMpIHsgdmFyIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhkZWZhdWx0cyk7IGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykgeyB2YXIga2V5ID0ga2V5c1tpXTsgdmFyIHZhbHVlID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihkZWZhdWx0cywga2V5KTsgaWYgKHZhbHVlICYmIHZhbHVlLmNvbmZpZ3VyYWJsZSAmJiBvYmpba2V5XSA9PT0gdW5kZWZpbmVkKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpOyB9IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBfZGVmYXVsdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmltcG9ydCAqIGFzIHV0aWxzIGZyb20gJy4vdXRpbHMuanMnO1xuaW1wb3J0IGJhc2VMb2dnZXIgZnJvbSAnLi9sb2dnZXIuanMnO1xuaW1wb3J0IEV2ZW50RW1pdHRlciBmcm9tICcuL0V2ZW50RW1pdHRlci5qcyc7XG5cbmZ1bmN0aW9uIHJlbW92ZShhcnIsIHdoYXQpIHtcbiAgdmFyIGZvdW5kID0gYXJyLmluZGV4T2Yod2hhdCk7XG5cbiAgd2hpbGUgKGZvdW5kICE9PSAtMSkge1xuICAgIGFyci5zcGxpY2UoZm91bmQsIDEpO1xuICAgIGZvdW5kID0gYXJyLmluZGV4T2Yod2hhdCk7XG4gIH1cbn1cblxudmFyIENvbm5lY3RvciA9IGZ1bmN0aW9uIChfRXZlbnRFbWl0dGVyKSB7XG4gIF9pbmhlcml0cyhDb25uZWN0b3IsIF9FdmVudEVtaXR0ZXIpO1xuXG4gIGZ1bmN0aW9uIENvbm5lY3RvcihiYWNrZW5kLCBzdG9yZSwgc2VydmljZXMpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAzICYmIGFyZ3VtZW50c1szXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzNdIDoge307XG5cbiAgICBfY2xhc3NDYWxsQ2hlY2sodGhpcywgQ29ubmVjdG9yKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9FdmVudEVtaXR0ZXIuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpcy5iYWNrZW5kID0gYmFja2VuZDtcbiAgICBfdGhpcy5zdG9yZSA9IHN0b3JlO1xuICAgIF90aGlzLmxhbmd1YWdlVXRpbHMgPSBzZXJ2aWNlcy5sYW5ndWFnZVV0aWxzO1xuICAgIF90aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIF90aGlzLmxvZ2dlciA9IGJhc2VMb2dnZXIuY3JlYXRlKCdiYWNrZW5kQ29ubmVjdG9yJyk7XG5cbiAgICBfdGhpcy5zdGF0ZSA9IHt9O1xuICAgIF90aGlzLnF1ZXVlID0gW107XG5cbiAgICBpZiAoX3RoaXMuYmFja2VuZCAmJiBfdGhpcy5iYWNrZW5kLmluaXQpIHtcbiAgICAgIF90aGlzLmJhY2tlbmQuaW5pdChzZXJ2aWNlcywgb3B0aW9ucy5iYWNrZW5kLCBvcHRpb25zKTtcbiAgICB9XG4gICAgcmV0dXJuIF90aGlzO1xuICB9XG5cbiAgQ29ubmVjdG9yLnByb3RvdHlwZS5xdWV1ZUxvYWQgPSBmdW5jdGlvbiBxdWV1ZUxvYWQobGFuZ3VhZ2VzLCBuYW1lc3BhY2VzLCBvcHRpb25zLCBjYWxsYmFjaykge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgLy8gZmluZCB3aGF0IG5lZWRzIHRvIGJlIGxvYWRlZFxuICAgIHZhciB0b0xvYWQgPSBbXTtcbiAgICB2YXIgcGVuZGluZyA9IFtdO1xuICAgIHZhciB0b0xvYWRMYW5ndWFnZXMgPSBbXTtcbiAgICB2YXIgdG9Mb2FkTmFtZXNwYWNlcyA9IFtdO1xuXG4gICAgbGFuZ3VhZ2VzLmZvckVhY2goZnVuY3Rpb24gKGxuZykge1xuICAgICAgdmFyIGhhc0FsbE5hbWVzcGFjZXMgPSB0cnVlO1xuXG4gICAgICBuYW1lc3BhY2VzLmZvckVhY2goZnVuY3Rpb24gKG5zKSB7XG4gICAgICAgIHZhciBuYW1lID0gbG5nICsgJ3wnICsgbnM7XG5cbiAgICAgICAgaWYgKCFvcHRpb25zLnJlbG9hZCAmJiBfdGhpczIuc3RvcmUuaGFzUmVzb3VyY2VCdW5kbGUobG5nLCBucykpIHtcbiAgICAgICAgICBfdGhpczIuc3RhdGVbbmFtZV0gPSAyOyAvLyBsb2FkZWRcbiAgICAgICAgfSBlbHNlIGlmIChfdGhpczIuc3RhdGVbbmFtZV0gPCAwKSB7XG4gICAgICAgICAgLy8gbm90aGluZyB0byBkbyBmb3IgZXJyXG4gICAgICAgIH0gZWxzZSBpZiAoX3RoaXMyLnN0YXRlW25hbWVdID09PSAxKSB7XG4gICAgICAgICAgaWYgKHBlbmRpbmcuaW5kZXhPZihuYW1lKSA8IDApIHBlbmRpbmcucHVzaChuYW1lKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBfdGhpczIuc3RhdGVbbmFtZV0gPSAxOyAvLyBwZW5kaW5nXG5cbiAgICAgICAgICBoYXNBbGxOYW1lc3BhY2VzID0gZmFsc2U7XG5cbiAgICAgICAgICBpZiAocGVuZGluZy5pbmRleE9mKG5hbWUpIDwgMCkgcGVuZGluZy5wdXNoKG5hbWUpO1xuICAgICAgICAgIGlmICh0b0xvYWQuaW5kZXhPZihuYW1lKSA8IDApIHRvTG9hZC5wdXNoKG5hbWUpO1xuICAgICAgICAgIGlmICh0b0xvYWROYW1lc3BhY2VzLmluZGV4T2YobnMpIDwgMCkgdG9Mb2FkTmFtZXNwYWNlcy5wdXNoKG5zKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIGlmICghaGFzQWxsTmFtZXNwYWNlcykgdG9Mb2FkTGFuZ3VhZ2VzLnB1c2gobG5nKTtcbiAgICB9KTtcblxuICAgIGlmICh0b0xvYWQubGVuZ3RoIHx8IHBlbmRpbmcubGVuZ3RoKSB7XG4gICAgICB0aGlzLnF1ZXVlLnB1c2goe1xuICAgICAgICBwZW5kaW5nOiBwZW5kaW5nLFxuICAgICAgICBsb2FkZWQ6IHt9LFxuICAgICAgICBlcnJvcnM6IFtdLFxuICAgICAgICBjYWxsYmFjazogY2FsbGJhY2tcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICB0b0xvYWQ6IHRvTG9hZCxcbiAgICAgIHBlbmRpbmc6IHBlbmRpbmcsXG4gICAgICB0b0xvYWRMYW5ndWFnZXM6IHRvTG9hZExhbmd1YWdlcyxcbiAgICAgIHRvTG9hZE5hbWVzcGFjZXM6IHRvTG9hZE5hbWVzcGFjZXNcbiAgICB9O1xuICB9O1xuXG4gIENvbm5lY3Rvci5wcm90b3R5cGUubG9hZGVkID0gZnVuY3Rpb24gbG9hZGVkKG5hbWUsIGVyciwgZGF0YSkge1xuICAgIHZhciBfbmFtZSRzcGxpdCA9IG5hbWUuc3BsaXQoJ3wnKSxcbiAgICAgICAgX25hbWUkc3BsaXQyID0gX3NsaWNlZFRvQXJyYXkoX25hbWUkc3BsaXQsIDIpLFxuICAgICAgICBsbmcgPSBfbmFtZSRzcGxpdDJbMF0sXG4gICAgICAgIG5zID0gX25hbWUkc3BsaXQyWzFdO1xuXG4gICAgaWYgKGVycikgdGhpcy5lbWl0KCdmYWlsZWRMb2FkaW5nJywgbG5nLCBucywgZXJyKTtcblxuICAgIGlmIChkYXRhKSB7XG4gICAgICB0aGlzLnN0b3JlLmFkZFJlc291cmNlQnVuZGxlKGxuZywgbnMsIGRhdGEpO1xuICAgIH1cblxuICAgIC8vIHNldCBsb2FkZWRcbiAgICB0aGlzLnN0YXRlW25hbWVdID0gZXJyID8gLTEgOiAyO1xuXG4gICAgLy8gY29uc29saWRhdGVkIGxvYWRpbmcgZG9uZSBpbiB0aGlzIHJ1biAtIG9ubHkgZW1pdCBvbmNlIGZvciBhIGxvYWRlZCBuYW1lc3BhY2VcbiAgICB2YXIgbG9hZGVkID0ge307XG5cbiAgICAvLyBjYWxsYmFjayBpZiByZWFkeVxuICAgIHRoaXMucXVldWUuZm9yRWFjaChmdW5jdGlvbiAocSkge1xuICAgICAgdXRpbHMucHVzaFBhdGgocS5sb2FkZWQsIFtsbmddLCBucyk7XG4gICAgICByZW1vdmUocS5wZW5kaW5nLCBuYW1lKTtcblxuICAgICAgaWYgKGVycikgcS5lcnJvcnMucHVzaChlcnIpO1xuXG4gICAgICBpZiAocS5wZW5kaW5nLmxlbmd0aCA9PT0gMCAmJiAhcS5kb25lKSB7XG4gICAgICAgIC8vIG9ubHkgZG8gb25jZSBwZXIgbG9hZGVkIC0+IHRoaXMuZW1pdCgnbG9hZGVkJywgcS5sb2FkZWQpO1xuICAgICAgICBPYmplY3Qua2V5cyhxLmxvYWRlZCkuZm9yRWFjaChmdW5jdGlvbiAobCkge1xuICAgICAgICAgIGlmICghbG9hZGVkW2xdKSBsb2FkZWRbbF0gPSBbXTtcbiAgICAgICAgICBpZiAocS5sb2FkZWRbbF0ubGVuZ3RoKSB7XG4gICAgICAgICAgICBxLmxvYWRlZFtsXS5mb3JFYWNoKGZ1bmN0aW9uIChucykge1xuICAgICAgICAgICAgICBpZiAobG9hZGVkW2xdLmluZGV4T2YobnMpIDwgMCkgbG9hZGVkW2xdLnB1c2gobnMpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvKiBlc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246IDAgKi9cbiAgICAgICAgcS5kb25lID0gdHJ1ZTtcbiAgICAgICAgaWYgKHEuZXJyb3JzLmxlbmd0aCkge1xuICAgICAgICAgIHEuY2FsbGJhY2socS5lcnJvcnMpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHEuY2FsbGJhY2soKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgLy8gZW1pdCBjb25zb2xpZGF0ZWQgbG9hZGVkIGV2ZW50XG4gICAgdGhpcy5lbWl0KCdsb2FkZWQnLCBsb2FkZWQpO1xuXG4gICAgLy8gcmVtb3ZlIGRvbmUgbG9hZCByZXF1ZXN0c1xuICAgIHRoaXMucXVldWUgPSB0aGlzLnF1ZXVlLmZpbHRlcihmdW5jdGlvbiAocSkge1xuICAgICAgcmV0dXJuICFxLmRvbmU7XG4gICAgfSk7XG4gIH07XG5cbiAgQ29ubmVjdG9yLnByb3RvdHlwZS5yZWFkID0gZnVuY3Rpb24gcmVhZChsbmcsIG5zLCBmY05hbWUpIHtcbiAgICB2YXIgdHJpZWQgPSBhcmd1bWVudHMubGVuZ3RoID4gMyAmJiBhcmd1bWVudHNbM10gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1szXSA6IDA7XG5cbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciB3YWl0ID0gYXJndW1lbnRzLmxlbmd0aCA+IDQgJiYgYXJndW1lbnRzWzRdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbNF0gOiAyNTA7XG4gICAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzWzVdO1xuXG4gICAgaWYgKCFsbmcubGVuZ3RoKSByZXR1cm4gY2FsbGJhY2sobnVsbCwge30pOyAvLyBub3RpbmcgdG8gbG9hZFxuXG4gICAgcmV0dXJuIHRoaXMuYmFja2VuZFtmY05hbWVdKGxuZywgbnMsIGZ1bmN0aW9uIChlcnIsIGRhdGEpIHtcbiAgICAgIGlmIChlcnIgJiYgZGF0YSAvKiA9IHJldHJ5RmxhZyAqLyAmJiB0cmllZCA8IDUpIHtcbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgX3RoaXMzLnJlYWQuY2FsbChfdGhpczMsIGxuZywgbnMsIGZjTmFtZSwgdHJpZWQgKyAxLCB3YWl0ICogMiwgY2FsbGJhY2spO1xuICAgICAgICB9LCB3YWl0KTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY2FsbGJhY2soZXJyLCBkYXRhKTtcbiAgICB9KTtcbiAgfTtcblxuICAvKiBlc2xpbnQgY29uc2lzdGVudC1yZXR1cm46IDAgKi9cblxuXG4gIENvbm5lY3Rvci5wcm90b3R5cGUucHJlcGFyZUxvYWRpbmcgPSBmdW5jdGlvbiBwcmVwYXJlTG9hZGluZyhsYW5ndWFnZXMsIG5hbWVzcGFjZXMpIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDIgJiYgYXJndW1lbnRzWzJdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMl0gOiB7fTtcbiAgICB2YXIgY2FsbGJhY2sgPSBhcmd1bWVudHNbM107XG5cbiAgICBpZiAoIXRoaXMuYmFja2VuZCkge1xuICAgICAgdGhpcy5sb2dnZXIud2FybignTm8gYmFja2VuZCB3YXMgYWRkZWQgdmlhIGkxOG5leHQudXNlLiBXaWxsIG5vdCBsb2FkIHJlc291cmNlcy4nKTtcbiAgICAgIHJldHVybiBjYWxsYmFjayAmJiBjYWxsYmFjaygpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgbGFuZ3VhZ2VzID09PSAnc3RyaW5nJykgbGFuZ3VhZ2VzID0gdGhpcy5sYW5ndWFnZVV0aWxzLnRvUmVzb2x2ZUhpZXJhcmNoeShsYW5ndWFnZXMpO1xuICAgIGlmICh0eXBlb2YgbmFtZXNwYWNlcyA9PT0gJ3N0cmluZycpIG5hbWVzcGFjZXMgPSBbbmFtZXNwYWNlc107XG5cbiAgICB2YXIgdG9Mb2FkID0gdGhpcy5xdWV1ZUxvYWQobGFuZ3VhZ2VzLCBuYW1lc3BhY2VzLCBvcHRpb25zLCBjYWxsYmFjayk7XG4gICAgaWYgKCF0b0xvYWQudG9Mb2FkLmxlbmd0aCkge1xuICAgICAgaWYgKCF0b0xvYWQucGVuZGluZy5sZW5ndGgpIGNhbGxiYWNrKCk7IC8vIG5vdGhpbmcgdG8gbG9hZCBhbmQgbm8gcGVuZGluZ3MuLi5jYWxsYmFjayBub3dcbiAgICAgIHJldHVybiBudWxsOyAvLyBwZW5kaW5ncyB3aWxsIHRyaWdnZXIgY2FsbGJhY2tcbiAgICB9XG5cbiAgICB0b0xvYWQudG9Mb2FkLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcbiAgICAgIF90aGlzNC5sb2FkT25lKG5hbWUpO1xuICAgIH0pO1xuICB9O1xuXG4gIENvbm5lY3Rvci5wcm90b3R5cGUubG9hZCA9IGZ1bmN0aW9uIGxvYWQobGFuZ3VhZ2VzLCBuYW1lc3BhY2VzLCBjYWxsYmFjaykge1xuICAgIHRoaXMucHJlcGFyZUxvYWRpbmcobGFuZ3VhZ2VzLCBuYW1lc3BhY2VzLCB7fSwgY2FsbGJhY2spO1xuICB9O1xuXG4gIENvbm5lY3Rvci5wcm90b3R5cGUucmVsb2FkID0gZnVuY3Rpb24gcmVsb2FkKGxhbmd1YWdlcywgbmFtZXNwYWNlcywgY2FsbGJhY2spIHtcbiAgICB0aGlzLnByZXBhcmVMb2FkaW5nKGxhbmd1YWdlcywgbmFtZXNwYWNlcywgeyByZWxvYWQ6IHRydWUgfSwgY2FsbGJhY2spO1xuICB9O1xuXG4gIENvbm5lY3Rvci5wcm90b3R5cGUubG9hZE9uZSA9IGZ1bmN0aW9uIGxvYWRPbmUobmFtZSkge1xuICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXG4gICAgdmFyIHByZWZpeCA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJyc7XG5cbiAgICB2YXIgX25hbWUkc3BsaXQzID0gbmFtZS5zcGxpdCgnfCcpLFxuICAgICAgICBfbmFtZSRzcGxpdDQgPSBfc2xpY2VkVG9BcnJheShfbmFtZSRzcGxpdDMsIDIpLFxuICAgICAgICBsbmcgPSBfbmFtZSRzcGxpdDRbMF0sXG4gICAgICAgIG5zID0gX25hbWUkc3BsaXQ0WzFdO1xuXG4gICAgdGhpcy5yZWFkKGxuZywgbnMsICdyZWFkJywgbnVsbCwgbnVsbCwgZnVuY3Rpb24gKGVyciwgZGF0YSkge1xuICAgICAgaWYgKGVycikgX3RoaXM1LmxvZ2dlci53YXJuKHByZWZpeCArICdsb2FkaW5nIG5hbWVzcGFjZSAnICsgbnMgKyAnIGZvciBsYW5ndWFnZSAnICsgbG5nICsgJyBmYWlsZWQnLCBlcnIpO1xuICAgICAgaWYgKCFlcnIgJiYgZGF0YSkgX3RoaXM1LmxvZ2dlci5sb2cocHJlZml4ICsgJ2xvYWRlZCBuYW1lc3BhY2UgJyArIG5zICsgJyBmb3IgbGFuZ3VhZ2UgJyArIGxuZywgZGF0YSk7XG5cbiAgICAgIF90aGlzNS5sb2FkZWQobmFtZSwgZXJyLCBkYXRhKTtcbiAgICB9KTtcbiAgfTtcblxuICBDb25uZWN0b3IucHJvdG90eXBlLnNhdmVNaXNzaW5nID0gZnVuY3Rpb24gc2F2ZU1pc3NpbmcobGFuZ3VhZ2VzLCBuYW1lc3BhY2UsIGtleSwgZmFsbGJhY2tWYWx1ZSwgaXNVcGRhdGUpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiA1ICYmIGFyZ3VtZW50c1s1XSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzVdIDoge307XG5cbiAgICBpZiAodGhpcy5iYWNrZW5kICYmIHRoaXMuYmFja2VuZC5jcmVhdGUpIHtcbiAgICAgIHRoaXMuYmFja2VuZC5jcmVhdGUobGFuZ3VhZ2VzLCBuYW1lc3BhY2UsIGtleSwgZmFsbGJhY2tWYWx1ZSwgbnVsbCAvKiB1bnVzZWQgY2FsbGJhY2sgKi8sIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7IGlzVXBkYXRlOiBpc1VwZGF0ZSB9KSk7XG4gICAgfVxuXG4gICAgLy8gd3JpdGUgdG8gc3RvcmUgdG8gYXZvaWQgcmVzZW5kaW5nXG4gICAgaWYgKCFsYW5ndWFnZXMgfHwgIWxhbmd1YWdlc1swXSkgcmV0dXJuO1xuICAgIHRoaXMuc3RvcmUuYWRkUmVzb3VyY2UobGFuZ3VhZ2VzWzBdLCBuYW1lc3BhY2UsIGtleSwgZmFsbGJhY2tWYWx1ZSk7XG4gIH07XG5cbiAgcmV0dXJuIENvbm5lY3Rvcjtcbn0oRXZlbnRFbWl0dGVyKTtcblxuZXhwb3J0IGRlZmF1bHQgQ29ubmVjdG9yOyIsImV4cG9ydCB7IGdldCB9O1xuXG52YXIgX3R5cGVvZiA9IHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiID8gZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gdHlwZW9mIG9iajsgfSA6IGZ1bmN0aW9uIChvYmopIHsgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7IH07XG5cbmZ1bmN0aW9uIGdldCgpIHtcbiAgcmV0dXJuIHtcbiAgICBkZWJ1ZzogZmFsc2UsXG4gICAgaW5pdEltbWVkaWF0ZTogdHJ1ZSxcblxuICAgIG5zOiBbJ3RyYW5zbGF0aW9uJ10sXG4gICAgZGVmYXVsdE5TOiBbJ3RyYW5zbGF0aW9uJ10sXG4gICAgZmFsbGJhY2tMbmc6IFsnZGV2J10sXG4gICAgZmFsbGJhY2tOUzogZmFsc2UsIC8vIHN0cmluZyBvciBhcnJheSBvZiBuYW1lc3BhY2VzXG5cbiAgICB3aGl0ZWxpc3Q6IGZhbHNlLCAvLyBhcnJheSB3aXRoIHdoaXRlbGlzdGVkIGxhbmd1YWdlc1xuICAgIG5vbkV4cGxpY2l0V2hpdGVsaXN0OiBmYWxzZSxcbiAgICBsb2FkOiAnYWxsJywgLy8gfCBjdXJyZW50T25seSB8IGxhbmd1YWdlT25seVxuICAgIHByZWxvYWQ6IGZhbHNlLCAvLyBhcnJheSB3aXRoIHByZWxvYWQgbGFuZ3VhZ2VzXG5cbiAgICBzaW1wbGlmeVBsdXJhbFN1ZmZpeDogdHJ1ZSxcbiAgICBrZXlTZXBhcmF0b3I6ICcuJyxcbiAgICBuc1NlcGFyYXRvcjogJzonLFxuICAgIHBsdXJhbFNlcGFyYXRvcjogJ18nLFxuICAgIGNvbnRleHRTZXBhcmF0b3I6ICdfJyxcblxuICAgIHBhcnRpYWxCdW5kbGVkTGFuZ3VhZ2VzOiBmYWxzZSwgLy8gYWxsb3cgYnVuZGxpbmcgY2VydGFpbiBsYW5ndWFnZXMgdGhhdCBhcmUgbm90IHJlbW90ZWx5IGZldGNoZWRcbiAgICBzYXZlTWlzc2luZzogZmFsc2UsIC8vIGVuYWJsZSB0byBzZW5kIG1pc3NpbmcgdmFsdWVzXG4gICAgdXBkYXRlTWlzc2luZzogZmFsc2UsIC8vIGVuYWJsZSB0byB1cGRhdGUgZGVmYXVsdCB2YWx1ZXMgaWYgZGlmZmVyZW50IGZyb20gdHJhbnNsYXRlZCB2YWx1ZSAob25seSB1c2VmdWwgb24gaW5pdGlhbCBkZXZlbG9wbWVudCwgb3Igd2hlbiBrZWVwaW5nIGNvZGUgYXMgc291cmNlIG9mIHRydXRoKVxuICAgIHNhdmVNaXNzaW5nVG86ICdmYWxsYmFjaycsIC8vICdjdXJyZW50JyB8fCAnYWxsJ1xuICAgIHNhdmVNaXNzaW5nUGx1cmFsczogdHJ1ZSwgLy8gd2lsbCBzYXZlIGFsbCBmb3JtcyBub3Qgb25seSBzaW5ndWxhciBrZXlcbiAgICBtaXNzaW5nS2V5SGFuZGxlcjogZmFsc2UsIC8vIGZ1bmN0aW9uKGxuZywgbnMsIGtleSwgZmFsbGJhY2tWYWx1ZSkgLT4gb3ZlcnJpZGUgaWYgcHJlZmVyIG9uIGhhbmRsaW5nXG4gICAgbWlzc2luZ0ludGVycG9sYXRpb25IYW5kbGVyOiBmYWxzZSwgLy8gZnVuY3Rpb24oc3RyLCBtYXRjaClcblxuICAgIHBvc3RQcm9jZXNzOiBmYWxzZSwgLy8gc3RyaW5nIG9yIGFycmF5IG9mIHBvc3RQcm9jZXNzb3IgbmFtZXNcbiAgICByZXR1cm5OdWxsOiB0cnVlLCAvLyBhbGxvd3MgbnVsbCB2YWx1ZSBhcyB2YWxpZCB0cmFuc2xhdGlvblxuICAgIHJldHVybkVtcHR5U3RyaW5nOiB0cnVlLCAvLyBhbGxvd3MgZW1wdHkgc3RyaW5nIHZhbHVlIGFzIHZhbGlkIHRyYW5zbGF0aW9uXG4gICAgcmV0dXJuT2JqZWN0czogZmFsc2UsXG4gICAgam9pbkFycmF5czogZmFsc2UsIC8vIG9yIHN0cmluZyB0byBqb2luIGFycmF5XG4gICAgcmV0dXJuZWRPYmplY3RIYW5kbGVyOiBmdW5jdGlvbiByZXR1cm5lZE9iamVjdEhhbmRsZXIoKSB7fSwgLy8gZnVuY3Rpb24oa2V5LCB2YWx1ZSwgb3B0aW9ucykgdHJpZ2dlcmVkIGlmIGtleSByZXR1cm5zIG9iamVjdCBidXQgcmV0dXJuT2JqZWN0cyBpcyBzZXQgdG8gZmFsc2VcbiAgICBwYXJzZU1pc3NpbmdLZXlIYW5kbGVyOiBmYWxzZSwgLy8gZnVuY3Rpb24oa2V5KSBwYXJzZWQgYSBrZXkgdGhhdCB3YXMgbm90IGZvdW5kIGluIHQoKSBiZWZvcmUgcmV0dXJuaW5nXG4gICAgYXBwZW5kTmFtZXNwYWNlVG9NaXNzaW5nS2V5OiBmYWxzZSxcbiAgICBhcHBlbmROYW1lc3BhY2VUb0NJTW9kZTogZmFsc2UsXG4gICAgb3ZlcmxvYWRUcmFuc2xhdGlvbk9wdGlvbkhhbmRsZXI6IGZ1bmN0aW9uIGhhbmRsZShhcmdzKSB7XG4gICAgICB2YXIgcmV0ID0ge307XG4gICAgICBpZiAoX3R5cGVvZihhcmdzWzFdKSA9PT0gJ29iamVjdCcpIHJldCA9IGFyZ3NbMV07XG4gICAgICBpZiAodHlwZW9mIGFyZ3NbMV0gPT09ICdzdHJpbmcnKSByZXQuZGVmYXVsdFZhbHVlID0gYXJnc1sxXTtcbiAgICAgIGlmICh0eXBlb2YgYXJnc1syXSA9PT0gJ3N0cmluZycpIHJldC50RGVzY3JpcHRpb24gPSBhcmdzWzJdO1xuICAgICAgaWYgKF90eXBlb2YoYXJnc1syXSkgPT09ICdvYmplY3QnIHx8IF90eXBlb2YoYXJnc1szXSkgPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHZhciBvcHRpb25zID0gYXJnc1szXSB8fCBhcmdzWzJdO1xuICAgICAgICBPYmplY3Qua2V5cyhvcHRpb25zKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICByZXRba2V5XSA9IG9wdGlvbnNba2V5XTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmV0O1xuICAgIH0sXG4gICAgaW50ZXJwb2xhdGlvbjoge1xuICAgICAgZXNjYXBlVmFsdWU6IHRydWUsXG4gICAgICBmb3JtYXQ6IGZ1bmN0aW9uIGZvcm1hdCh2YWx1ZSwgX2Zvcm1hdCwgbG5nKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH0sXG4gICAgICBwcmVmaXg6ICd7eycsXG4gICAgICBzdWZmaXg6ICd9fScsXG4gICAgICBmb3JtYXRTZXBhcmF0b3I6ICcsJyxcbiAgICAgIC8vIHByZWZpeEVzY2FwZWQ6ICd7eycsXG4gICAgICAvLyBzdWZmaXhFc2NhcGVkOiAnfX0nLFxuICAgICAgLy8gdW5lc2NhcGVTdWZmaXg6ICcnLFxuICAgICAgdW5lc2NhcGVQcmVmaXg6ICctJyxcblxuICAgICAgbmVzdGluZ1ByZWZpeDogJyR0KCcsXG4gICAgICBuZXN0aW5nU3VmZml4OiAnKScsXG4gICAgICAvLyBuZXN0aW5nUHJlZml4RXNjYXBlZDogJyR0KCcsXG4gICAgICAvLyBuZXN0aW5nU3VmZml4RXNjYXBlZDogJyknLFxuICAgICAgLy8gZGVmYXVsdFZhcmlhYmxlczogdW5kZWZpbmVkIC8vIG9iamVjdCB0aGF0IGNhbiBoYXZlIHZhbHVlcyB0byBpbnRlcnBvbGF0ZSBvbiAtIGV4dGVuZHMgcGFzc2VkIGluIGludGVycG9sYXRpb24gZGF0YVxuICAgICAgbWF4UmVwbGFjZXM6IDEwMDAgLy8gbWF4IHJlcGxhY2VzIHRvIHByZXZlbnQgZW5kbGVzcyBsb29wXG4gICAgfVxuICB9O1xufVxuXG4vKiBlc2xpbnQgbm8tcGFyYW0tcmVhc3NpZ246IDAgKi9cbmV4cG9ydCBmdW5jdGlvbiB0cmFuc2Zvcm1PcHRpb25zKG9wdGlvbnMpIHtcbiAgLy8gY3JlYXRlIG5hbWVzcGFjZSBvYmplY3QgaWYgbmFtZXNwYWNlIGlzIHBhc3NlZCBpbiBhcyBzdHJpbmdcbiAgaWYgKHR5cGVvZiBvcHRpb25zLm5zID09PSAnc3RyaW5nJykgb3B0aW9ucy5ucyA9IFtvcHRpb25zLm5zXTtcbiAgaWYgKHR5cGVvZiBvcHRpb25zLmZhbGxiYWNrTG5nID09PSAnc3RyaW5nJykgb3B0aW9ucy5mYWxsYmFja0xuZyA9IFtvcHRpb25zLmZhbGxiYWNrTG5nXTtcbiAgaWYgKHR5cGVvZiBvcHRpb25zLmZhbGxiYWNrTlMgPT09ICdzdHJpbmcnKSBvcHRpb25zLmZhbGxiYWNrTlMgPSBbb3B0aW9ucy5mYWxsYmFja05TXTtcblxuICAvLyBleHRlbmQgd2hpdGVsaXN0IHdpdGggY2ltb2RlXG4gIGlmIChvcHRpb25zLndoaXRlbGlzdCAmJiBvcHRpb25zLndoaXRlbGlzdC5pbmRleE9mKCdjaW1vZGUnKSA8IDApIHtcbiAgICBvcHRpb25zLndoaXRlbGlzdCA9IG9wdGlvbnMud2hpdGVsaXN0LmNvbmNhdChbJ2NpbW9kZSddKTtcbiAgfVxuXG4gIHJldHVybiBvcHRpb25zO1xufSIsInZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxudmFyIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTtcblxuZnVuY3Rpb24gX2RlZmF1bHRzKG9iaiwgZGVmYXVsdHMpIHsgdmFyIGtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyhkZWZhdWx0cyk7IGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykgeyB2YXIga2V5ID0ga2V5c1tpXTsgdmFyIHZhbHVlID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihkZWZhdWx0cywga2V5KTsgaWYgKHZhbHVlICYmIHZhbHVlLmNvbmZpZ3VyYWJsZSAmJiBvYmpba2V5XSA9PT0gdW5kZWZpbmVkKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpOyB9IH0gcmV0dXJuIG9iajsgfVxuXG5mdW5jdGlvbiBfY2xhc3NDYWxsQ2hlY2soaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7IGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7IHRocm93IG5ldyBUeXBlRXJyb3IoXCJDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb25cIik7IH0gfVxuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7IGlmICghc2VsZikgeyB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7IH0gcmV0dXJuIGNhbGwgJiYgKHR5cGVvZiBjYWxsID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpID8gY2FsbCA6IHNlbGY7IH1cblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7IGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlN1cGVyIGV4cHJlc3Npb24gbXVzdCBlaXRoZXIgYmUgbnVsbCBvciBhIGZ1bmN0aW9uLCBub3QgXCIgKyB0eXBlb2Ygc3VwZXJDbGFzcyk7IH0gc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzICYmIHN1cGVyQ2xhc3MucHJvdG90eXBlLCB7IGNvbnN0cnVjdG9yOiB7IHZhbHVlOiBzdWJDbGFzcywgZW51bWVyYWJsZTogZmFsc2UsIHdyaXRhYmxlOiB0cnVlLCBjb25maWd1cmFibGU6IHRydWUgfSB9KTsgaWYgKHN1cGVyQ2xhc3MpIE9iamVjdC5zZXRQcm90b3R5cGVPZiA/IE9iamVjdC5zZXRQcm90b3R5cGVPZihzdWJDbGFzcywgc3VwZXJDbGFzcykgOiBfZGVmYXVsdHMoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpOyB9XG5cbmltcG9ydCBiYXNlTG9nZ2VyIGZyb20gJy4vbG9nZ2VyLmpzJztcbmltcG9ydCBFdmVudEVtaXR0ZXIgZnJvbSAnLi9FdmVudEVtaXR0ZXIuanMnO1xuaW1wb3J0IFJlc291cmNlU3RvcmUgZnJvbSAnLi9SZXNvdXJjZVN0b3JlLmpzJztcbmltcG9ydCBUcmFuc2xhdG9yIGZyb20gJy4vVHJhbnNsYXRvci5qcyc7XG5pbXBvcnQgTGFuZ3VhZ2VVdGlscyBmcm9tICcuL0xhbmd1YWdlVXRpbHMuanMnO1xuaW1wb3J0IFBsdXJhbFJlc29sdmVyIGZyb20gJy4vUGx1cmFsUmVzb2x2ZXIuanMnO1xuaW1wb3J0IEludGVycG9sYXRvciBmcm9tICcuL0ludGVycG9sYXRvci5qcyc7XG5pbXBvcnQgQmFja2VuZENvbm5lY3RvciBmcm9tICcuL0JhY2tlbmRDb25uZWN0b3IuanMnO1xuaW1wb3J0IHsgZ2V0IGFzIGdldERlZmF1bHRzLCB0cmFuc2Zvcm1PcHRpb25zIH0gZnJvbSAnLi9kZWZhdWx0cy5qcyc7XG5pbXBvcnQgcG9zdFByb2Nlc3NvciBmcm9tICcuL3Bvc3RQcm9jZXNzb3IuanMnO1xuaW1wb3J0IHsgZGVmZXIgfSBmcm9tICcuL3V0aWxzJztcblxuZnVuY3Rpb24gbm9vcCgpIHt9XG5cbnZhciBJMThuID0gZnVuY3Rpb24gKF9FdmVudEVtaXR0ZXIpIHtcbiAgX2luaGVyaXRzKEkxOG4sIF9FdmVudEVtaXR0ZXIpO1xuXG4gIGZ1bmN0aW9uIEkxOG4oKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50c1sxXTtcblxuICAgIF9jbGFzc0NhbGxDaGVjayh0aGlzLCBJMThuKTtcblxuICAgIHZhciBfdGhpcyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuKHRoaXMsIF9FdmVudEVtaXR0ZXIuY2FsbCh0aGlzKSk7XG5cbiAgICBfdGhpcy5vcHRpb25zID0gdHJhbnNmb3JtT3B0aW9ucyhvcHRpb25zKTtcbiAgICBfdGhpcy5zZXJ2aWNlcyA9IHt9O1xuICAgIF90aGlzLmxvZ2dlciA9IGJhc2VMb2dnZXI7XG4gICAgX3RoaXMubW9kdWxlcyA9IHsgZXh0ZXJuYWw6IFtdIH07XG5cbiAgICBpZiAoY2FsbGJhY2sgJiYgIV90aGlzLmlzSW5pdGlhbGl6ZWQgJiYgIW9wdGlvbnMuaXNDbG9uZSkge1xuICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2kxOG5leHQvaTE4bmV4dC9pc3N1ZXMvODc5XG4gICAgICBpZiAoIV90aGlzLm9wdGlvbnMuaW5pdEltbWVkaWF0ZSkge1xuICAgICAgICB2YXIgX3JldDtcblxuICAgICAgICBfdGhpcy5pbml0KG9wdGlvbnMsIGNhbGxiYWNrKTtcbiAgICAgICAgcmV0dXJuIF9yZXQgPSBfdGhpcywgX3Bvc3NpYmxlQ29uc3RydWN0b3JSZXR1cm4oX3RoaXMsIF9yZXQpO1xuICAgICAgfVxuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLmluaXQob3B0aW9ucywgY2FsbGJhY2spO1xuICAgICAgfSwgMCk7XG4gICAgfVxuICAgIHJldHVybiBfdGhpcztcbiAgfVxuXG4gIEkxOG4ucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiBpbml0KCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50c1sxXTtcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgY2FsbGJhY2sgPSBvcHRpb25zO1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cbiAgICB0aGlzLm9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgZ2V0RGVmYXVsdHMoKSwgdGhpcy5vcHRpb25zLCB0cmFuc2Zvcm1PcHRpb25zKG9wdGlvbnMpKTtcblxuICAgIHRoaXMuZm9ybWF0ID0gdGhpcy5vcHRpb25zLmludGVycG9sYXRpb24uZm9ybWF0O1xuICAgIGlmICghY2FsbGJhY2spIGNhbGxiYWNrID0gbm9vcDtcblxuICAgIGZ1bmN0aW9uIGNyZWF0ZUNsYXNzT25EZW1hbmQoQ2xhc3NPck9iamVjdCkge1xuICAgICAgaWYgKCFDbGFzc09yT2JqZWN0KSByZXR1cm4gbnVsbDtcbiAgICAgIGlmICh0eXBlb2YgQ2xhc3NPck9iamVjdCA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIG5ldyBDbGFzc09yT2JqZWN0KCk7XG4gICAgICByZXR1cm4gQ2xhc3NPck9iamVjdDtcbiAgICB9XG5cbiAgICAvLyBpbml0IHNlcnZpY2VzXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMuaXNDbG9uZSkge1xuICAgICAgaWYgKHRoaXMubW9kdWxlcy5sb2dnZXIpIHtcbiAgICAgICAgYmFzZUxvZ2dlci5pbml0KGNyZWF0ZUNsYXNzT25EZW1hbmQodGhpcy5tb2R1bGVzLmxvZ2dlciksIHRoaXMub3B0aW9ucyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBiYXNlTG9nZ2VyLmluaXQobnVsbCwgdGhpcy5vcHRpb25zKTtcbiAgICAgIH1cblxuICAgICAgdmFyIGx1ID0gbmV3IExhbmd1YWdlVXRpbHModGhpcy5vcHRpb25zKTtcbiAgICAgIHRoaXMuc3RvcmUgPSBuZXcgUmVzb3VyY2VTdG9yZSh0aGlzLm9wdGlvbnMucmVzb3VyY2VzLCB0aGlzLm9wdGlvbnMpO1xuXG4gICAgICB2YXIgcyA9IHRoaXMuc2VydmljZXM7XG4gICAgICBzLmxvZ2dlciA9IGJhc2VMb2dnZXI7XG4gICAgICBzLnJlc291cmNlU3RvcmUgPSB0aGlzLnN0b3JlO1xuICAgICAgcy5sYW5ndWFnZVV0aWxzID0gbHU7XG4gICAgICBzLnBsdXJhbFJlc29sdmVyID0gbmV3IFBsdXJhbFJlc29sdmVyKGx1LCB7IHByZXBlbmQ6IHRoaXMub3B0aW9ucy5wbHVyYWxTZXBhcmF0b3IsIGNvbXBhdGliaWxpdHlKU09OOiB0aGlzLm9wdGlvbnMuY29tcGF0aWJpbGl0eUpTT04sIHNpbXBsaWZ5UGx1cmFsU3VmZml4OiB0aGlzLm9wdGlvbnMuc2ltcGxpZnlQbHVyYWxTdWZmaXggfSk7XG4gICAgICBzLmludGVycG9sYXRvciA9IG5ldyBJbnRlcnBvbGF0b3IodGhpcy5vcHRpb25zKTtcblxuICAgICAgcy5iYWNrZW5kQ29ubmVjdG9yID0gbmV3IEJhY2tlbmRDb25uZWN0b3IoY3JlYXRlQ2xhc3NPbkRlbWFuZCh0aGlzLm1vZHVsZXMuYmFja2VuZCksIHMucmVzb3VyY2VTdG9yZSwgcywgdGhpcy5vcHRpb25zKTtcbiAgICAgIC8vIHBpcGUgZXZlbnRzIGZyb20gYmFja2VuZENvbm5lY3RvclxuICAgICAgcy5iYWNrZW5kQ29ubmVjdG9yLm9uKCcqJywgZnVuY3Rpb24gKGV2ZW50KSB7XG4gICAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICAgIGFyZ3NbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICAgICAgICB9XG5cbiAgICAgICAgX3RoaXMyLmVtaXQuYXBwbHkoX3RoaXMyLCBbZXZlbnRdLmNvbmNhdChhcmdzKSk7XG4gICAgICB9KTtcblxuICAgICAgaWYgKHRoaXMubW9kdWxlcy5sYW5ndWFnZURldGVjdG9yKSB7XG4gICAgICAgIHMubGFuZ3VhZ2VEZXRlY3RvciA9IGNyZWF0ZUNsYXNzT25EZW1hbmQodGhpcy5tb2R1bGVzLmxhbmd1YWdlRGV0ZWN0b3IpO1xuICAgICAgICBzLmxhbmd1YWdlRGV0ZWN0b3IuaW5pdChzLCB0aGlzLm9wdGlvbnMuZGV0ZWN0aW9uLCB0aGlzLm9wdGlvbnMpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5tb2R1bGVzLmkxOG5Gb3JtYXQpIHtcbiAgICAgICAgcy5pMThuRm9ybWF0ID0gY3JlYXRlQ2xhc3NPbkRlbWFuZCh0aGlzLm1vZHVsZXMuaTE4bkZvcm1hdCk7XG4gICAgICAgIGlmIChzLmkxOG5Gb3JtYXQuaW5pdCkgcy5pMThuRm9ybWF0LmluaXQodGhpcyk7XG4gICAgICB9XG5cbiAgICAgIHRoaXMudHJhbnNsYXRvciA9IG5ldyBUcmFuc2xhdG9yKHRoaXMuc2VydmljZXMsIHRoaXMub3B0aW9ucyk7XG4gICAgICAvLyBwaXBlIGV2ZW50cyBmcm9tIHRyYW5zbGF0b3JcbiAgICAgIHRoaXMudHJhbnNsYXRvci5vbignKicsIGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBmb3IgKHZhciBfbGVuMiA9IGFyZ3VtZW50cy5sZW5ndGgsIGFyZ3MgPSBBcnJheShfbGVuMiA+IDEgPyBfbGVuMiAtIDEgOiAwKSwgX2tleTIgPSAxOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgICAgYXJnc1tfa2V5MiAtIDFdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgICAgfVxuXG4gICAgICAgIF90aGlzMi5lbWl0LmFwcGx5KF90aGlzMiwgW2V2ZW50XS5jb25jYXQoYXJncykpO1xuICAgICAgfSk7XG5cbiAgICAgIHRoaXMubW9kdWxlcy5leHRlcm5hbC5mb3JFYWNoKGZ1bmN0aW9uIChtKSB7XG4gICAgICAgIGlmIChtLmluaXQpIG0uaW5pdChfdGhpczIpO1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gYXBwZW5kIGFwaVxuICAgIHZhciBzdG9yZUFwaSA9IFsnZ2V0UmVzb3VyY2UnLCAnYWRkUmVzb3VyY2UnLCAnYWRkUmVzb3VyY2VzJywgJ2FkZFJlc291cmNlQnVuZGxlJywgJ3JlbW92ZVJlc291cmNlQnVuZGxlJywgJ2hhc1Jlc291cmNlQnVuZGxlJywgJ2dldFJlc291cmNlQnVuZGxlJywgJ2dldERhdGFCeUxhbmd1YWdlJ107XG4gICAgc3RvcmVBcGkuZm9yRWFjaChmdW5jdGlvbiAoZmNOYW1lKSB7XG4gICAgICBfdGhpczJbZmNOYW1lXSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9zdG9yZTtcblxuICAgICAgICByZXR1cm4gKF9zdG9yZSA9IF90aGlzMi5zdG9yZSlbZmNOYW1lXS5hcHBseShfc3RvcmUsIGFyZ3VtZW50cyk7XG4gICAgICB9O1xuICAgIH0pO1xuXG4gICAgdmFyIGRlZmVycmVkID0gZGVmZXIoKTtcblxuICAgIHZhciBsb2FkID0gZnVuY3Rpb24gbG9hZCgpIHtcbiAgICAgIF90aGlzMi5jaGFuZ2VMYW5ndWFnZShfdGhpczIub3B0aW9ucy5sbmcsIGZ1bmN0aW9uIChlcnIsIHQpIHtcbiAgICAgICAgX3RoaXMyLmlzSW5pdGlhbGl6ZWQgPSB0cnVlO1xuICAgICAgICBfdGhpczIubG9nZ2VyLmxvZygnaW5pdGlhbGl6ZWQnLCBfdGhpczIub3B0aW9ucyk7XG4gICAgICAgIF90aGlzMi5lbWl0KCdpbml0aWFsaXplZCcsIF90aGlzMi5vcHRpb25zKTtcblxuICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHQpOyAvLyBub3QgcmVqZWN0aW5nIG9uIGVyciAoYXMgZXJyIGlzIG9ubHkgYSBsb2FkaW5nIHRyYW5zbGF0aW9uIGZhaWxlZCB3YXJuaW5nKVxuICAgICAgICBjYWxsYmFjayhlcnIsIHQpO1xuICAgICAgfSk7XG4gICAgfTtcblxuICAgIGlmICh0aGlzLm9wdGlvbnMucmVzb3VyY2VzIHx8ICF0aGlzLm9wdGlvbnMuaW5pdEltbWVkaWF0ZSkge1xuICAgICAgbG9hZCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzZXRUaW1lb3V0KGxvYWQsIDApO1xuICAgIH1cblxuICAgIHJldHVybiBkZWZlcnJlZDtcbiAgfTtcblxuICAvKiBlc2xpbnQgY29uc2lzdGVudC1yZXR1cm46IDAgKi9cblxuXG4gIEkxOG4ucHJvdG90eXBlLmxvYWRSZXNvdXJjZXMgPSBmdW5jdGlvbiBsb2FkUmVzb3VyY2VzKCkge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBub29wO1xuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMucmVzb3VyY2VzIHx8IHRoaXMub3B0aW9ucy5wYXJ0aWFsQnVuZGxlZExhbmd1YWdlcykge1xuICAgICAgaWYgKHRoaXMubGFuZ3VhZ2UgJiYgdGhpcy5sYW5ndWFnZS50b0xvd2VyQ2FzZSgpID09PSAnY2ltb2RlJykgcmV0dXJuIGNhbGxiYWNrKCk7IC8vIGF2b2lkIGxvYWRpbmcgcmVzb3VyY2VzIGZvciBjaW1vZGVcblxuICAgICAgdmFyIHRvTG9hZCA9IFtdO1xuXG4gICAgICB2YXIgYXBwZW5kID0gZnVuY3Rpb24gYXBwZW5kKGxuZykge1xuICAgICAgICBpZiAoIWxuZykgcmV0dXJuO1xuICAgICAgICB2YXIgbG5ncyA9IF90aGlzMy5zZXJ2aWNlcy5sYW5ndWFnZVV0aWxzLnRvUmVzb2x2ZUhpZXJhcmNoeShsbmcpO1xuICAgICAgICBsbmdzLmZvckVhY2goZnVuY3Rpb24gKGwpIHtcbiAgICAgICAgICBpZiAodG9Mb2FkLmluZGV4T2YobCkgPCAwKSB0b0xvYWQucHVzaChsKTtcbiAgICAgICAgfSk7XG4gICAgICB9O1xuXG4gICAgICBpZiAoIXRoaXMubGFuZ3VhZ2UpIHtcbiAgICAgICAgLy8gYXQgbGVhc3QgbG9hZCBmYWxsYmFja3MgaW4gdGhpcyBjYXNlXG4gICAgICAgIHZhciBmYWxsYmFja3MgPSB0aGlzLnNlcnZpY2VzLmxhbmd1YWdlVXRpbHMuZ2V0RmFsbGJhY2tDb2Rlcyh0aGlzLm9wdGlvbnMuZmFsbGJhY2tMbmcpO1xuICAgICAgICBmYWxsYmFja3MuZm9yRWFjaChmdW5jdGlvbiAobCkge1xuICAgICAgICAgIHJldHVybiBhcHBlbmQobCk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgYXBwZW5kKHRoaXMubGFuZ3VhZ2UpO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRpb25zLnByZWxvYWQpIHtcbiAgICAgICAgdGhpcy5vcHRpb25zLnByZWxvYWQuZm9yRWFjaChmdW5jdGlvbiAobCkge1xuICAgICAgICAgIHJldHVybiBhcHBlbmQobCk7XG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICB0aGlzLnNlcnZpY2VzLmJhY2tlbmRDb25uZWN0b3IubG9hZCh0b0xvYWQsIHRoaXMub3B0aW9ucy5ucywgY2FsbGJhY2spO1xuICAgIH0gZWxzZSB7XG4gICAgICBjYWxsYmFjayhudWxsKTtcbiAgICB9XG4gIH07XG5cbiAgSTE4bi5wcm90b3R5cGUucmVsb2FkUmVzb3VyY2VzID0gZnVuY3Rpb24gcmVsb2FkUmVzb3VyY2VzKGxuZ3MsIG5zLCBjYWxsYmFjaykge1xuICAgIHZhciBkZWZlcnJlZCA9IGRlZmVyKCk7XG4gICAgaWYgKCFsbmdzKSBsbmdzID0gdGhpcy5sYW5ndWFnZXM7XG4gICAgaWYgKCFucykgbnMgPSB0aGlzLm9wdGlvbnMubnM7XG4gICAgaWYgKCFjYWxsYmFjaykgY2FsbGJhY2sgPSBub29wO1xuICAgIHRoaXMuc2VydmljZXMuYmFja2VuZENvbm5lY3Rvci5yZWxvYWQobG5ncywgbnMsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGRlZmVycmVkLnJlc29sdmUoKTtcbiAgICAgIGNhbGxiYWNrKG51bGwpO1xuICAgIH0pO1xuICAgIHJldHVybiBkZWZlcnJlZDtcbiAgfTtcblxuICBJMThuLnByb3RvdHlwZS51c2UgPSBmdW5jdGlvbiB1c2UobW9kdWxlKSB7XG4gICAgaWYgKG1vZHVsZS50eXBlID09PSAnYmFja2VuZCcpIHtcbiAgICAgIHRoaXMubW9kdWxlcy5iYWNrZW5kID0gbW9kdWxlO1xuICAgIH1cblxuICAgIGlmIChtb2R1bGUudHlwZSA9PT0gJ2xvZ2dlcicgfHwgbW9kdWxlLmxvZyAmJiBtb2R1bGUud2FybiAmJiBtb2R1bGUuZXJyb3IpIHtcbiAgICAgIHRoaXMubW9kdWxlcy5sb2dnZXIgPSBtb2R1bGU7XG4gICAgfVxuXG4gICAgaWYgKG1vZHVsZS50eXBlID09PSAnbGFuZ3VhZ2VEZXRlY3RvcicpIHtcbiAgICAgIHRoaXMubW9kdWxlcy5sYW5ndWFnZURldGVjdG9yID0gbW9kdWxlO1xuICAgIH1cblxuICAgIGlmIChtb2R1bGUudHlwZSA9PT0gJ2kxOG5Gb3JtYXQnKSB7XG4gICAgICB0aGlzLm1vZHVsZXMuaTE4bkZvcm1hdCA9IG1vZHVsZTtcbiAgICB9XG5cbiAgICBpZiAobW9kdWxlLnR5cGUgPT09ICdwb3N0UHJvY2Vzc29yJykge1xuICAgICAgcG9zdFByb2Nlc3Nvci5hZGRQb3N0UHJvY2Vzc29yKG1vZHVsZSk7XG4gICAgfVxuXG4gICAgaWYgKG1vZHVsZS50eXBlID09PSAnM3JkUGFydHknKSB7XG4gICAgICB0aGlzLm1vZHVsZXMuZXh0ZXJuYWwucHVzaChtb2R1bGUpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzO1xuICB9O1xuXG4gIEkxOG4ucHJvdG90eXBlLmNoYW5nZUxhbmd1YWdlID0gZnVuY3Rpb24gY2hhbmdlTGFuZ3VhZ2UobG5nLCBjYWxsYmFjaykge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgdmFyIGRlZmVycmVkID0gZGVmZXIoKTtcblxuICAgIHZhciBkb25lID0gZnVuY3Rpb24gZG9uZShlcnIsIGwpIHtcbiAgICAgIF90aGlzNC50cmFuc2xhdG9yLmNoYW5nZUxhbmd1YWdlKGwpO1xuXG4gICAgICBpZiAobCkge1xuICAgICAgICBfdGhpczQuZW1pdCgnbGFuZ3VhZ2VDaGFuZ2VkJywgbCk7XG4gICAgICAgIF90aGlzNC5sb2dnZXIubG9nKCdsYW5ndWFnZUNoYW5nZWQnLCBsKTtcbiAgICAgIH1cblxuICAgICAgZGVmZXJyZWQucmVzb2x2ZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczQudC5hcHBseShfdGhpczQsIGFyZ3VtZW50cyk7XG4gICAgICB9KTtcbiAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soZXJyLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBfdGhpczQudC5hcHBseShfdGhpczQsIGFyZ3VtZW50cyk7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgdmFyIHNldExuZyA9IGZ1bmN0aW9uIHNldExuZyhsKSB7XG4gICAgICBpZiAobCkge1xuICAgICAgICBfdGhpczQubGFuZ3VhZ2UgPSBsO1xuICAgICAgICBfdGhpczQubGFuZ3VhZ2VzID0gX3RoaXM0LnNlcnZpY2VzLmxhbmd1YWdlVXRpbHMudG9SZXNvbHZlSGllcmFyY2h5KGwpO1xuICAgICAgICBpZiAoIV90aGlzNC50cmFuc2xhdG9yLmxhbmd1YWdlKSBfdGhpczQudHJhbnNsYXRvci5jaGFuZ2VMYW5ndWFnZShsKTtcblxuICAgICAgICBpZiAoX3RoaXM0LnNlcnZpY2VzLmxhbmd1YWdlRGV0ZWN0b3IpIF90aGlzNC5zZXJ2aWNlcy5sYW5ndWFnZURldGVjdG9yLmNhY2hlVXNlckxhbmd1YWdlKGwpO1xuICAgICAgfVxuXG4gICAgICBfdGhpczQubG9hZFJlc291cmNlcyhmdW5jdGlvbiAoZXJyKSB7XG4gICAgICAgIGRvbmUoZXJyLCBsKTtcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBpZiAoIWxuZyAmJiB0aGlzLnNlcnZpY2VzLmxhbmd1YWdlRGV0ZWN0b3IgJiYgIXRoaXMuc2VydmljZXMubGFuZ3VhZ2VEZXRlY3Rvci5hc3luYykge1xuICAgICAgc2V0TG5nKHRoaXMuc2VydmljZXMubGFuZ3VhZ2VEZXRlY3Rvci5kZXRlY3QoKSk7XG4gICAgfSBlbHNlIGlmICghbG5nICYmIHRoaXMuc2VydmljZXMubGFuZ3VhZ2VEZXRlY3RvciAmJiB0aGlzLnNlcnZpY2VzLmxhbmd1YWdlRGV0ZWN0b3IuYXN5bmMpIHtcbiAgICAgIHRoaXMuc2VydmljZXMubGFuZ3VhZ2VEZXRlY3Rvci5kZXRlY3Qoc2V0TG5nKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2V0TG5nKGxuZyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGRlZmVycmVkO1xuICB9O1xuXG4gIEkxOG4ucHJvdG90eXBlLmdldEZpeGVkVCA9IGZ1bmN0aW9uIGdldEZpeGVkVChsbmcsIG5zKSB7XG4gICAgdmFyIF90aGlzNSA9IHRoaXM7XG5cbiAgICB2YXIgZml4ZWRUID0gZnVuY3Rpb24gZml4ZWRUKGtleSwgb3B0cykge1xuICAgICAgZm9yICh2YXIgX2xlbjMgPSBhcmd1bWVudHMubGVuZ3RoLCByZXN0ID0gQXJyYXkoX2xlbjMgPiAyID8gX2xlbjMgLSAyIDogMCksIF9rZXkzID0gMjsgX2tleTMgPCBfbGVuMzsgX2tleTMrKykge1xuICAgICAgICByZXN0W19rZXkzIC0gMl0gPSBhcmd1bWVudHNbX2tleTNdO1xuICAgICAgfVxuXG4gICAgICB2YXIgb3B0aW9ucyA9IF9leHRlbmRzKHt9LCBvcHRzKTtcbiAgICAgIGlmICgodHlwZW9mIG9wdHMgPT09ICd1bmRlZmluZWQnID8gJ3VuZGVmaW5lZCcgOiBfdHlwZW9mKG9wdHMpKSAhPT0gJ29iamVjdCcpIHtcbiAgICAgICAgb3B0aW9ucyA9IF90aGlzNS5vcHRpb25zLm92ZXJsb2FkVHJhbnNsYXRpb25PcHRpb25IYW5kbGVyKFtrZXksIG9wdHNdLmNvbmNhdChyZXN0KSk7XG4gICAgICB9XG5cbiAgICAgIG9wdGlvbnMubG5nID0gb3B0aW9ucy5sbmcgfHwgZml4ZWRULmxuZztcbiAgICAgIG9wdGlvbnMubG5ncyA9IG9wdGlvbnMubG5ncyB8fCBmaXhlZFQubG5ncztcbiAgICAgIG9wdGlvbnMubnMgPSBvcHRpb25zLm5zIHx8IGZpeGVkVC5ucztcbiAgICAgIHJldHVybiBfdGhpczUudChrZXksIG9wdGlvbnMpO1xuICAgIH07XG4gICAgaWYgKHR5cGVvZiBsbmcgPT09ICdzdHJpbmcnKSB7XG4gICAgICBmaXhlZFQubG5nID0gbG5nO1xuICAgIH0gZWxzZSB7XG4gICAgICBmaXhlZFQubG5ncyA9IGxuZztcbiAgICB9XG4gICAgZml4ZWRULm5zID0gbnM7XG4gICAgcmV0dXJuIGZpeGVkVDtcbiAgfTtcblxuICBJMThuLnByb3RvdHlwZS50ID0gZnVuY3Rpb24gdCgpIHtcbiAgICB2YXIgX3RyYW5zbGF0b3I7XG5cbiAgICByZXR1cm4gdGhpcy50cmFuc2xhdG9yICYmIChfdHJhbnNsYXRvciA9IHRoaXMudHJhbnNsYXRvcikudHJhbnNsYXRlLmFwcGx5KF90cmFuc2xhdG9yLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIEkxOG4ucHJvdG90eXBlLmV4aXN0cyA9IGZ1bmN0aW9uIGV4aXN0cygpIHtcbiAgICB2YXIgX3RyYW5zbGF0b3IyO1xuXG4gICAgcmV0dXJuIHRoaXMudHJhbnNsYXRvciAmJiAoX3RyYW5zbGF0b3IyID0gdGhpcy50cmFuc2xhdG9yKS5leGlzdHMuYXBwbHkoX3RyYW5zbGF0b3IyLCBhcmd1bWVudHMpO1xuICB9O1xuXG4gIEkxOG4ucHJvdG90eXBlLnNldERlZmF1bHROYW1lc3BhY2UgPSBmdW5jdGlvbiBzZXREZWZhdWx0TmFtZXNwYWNlKG5zKSB7XG4gICAgdGhpcy5vcHRpb25zLmRlZmF1bHROUyA9IG5zO1xuICB9O1xuXG4gIEkxOG4ucHJvdG90eXBlLmxvYWROYW1lc3BhY2VzID0gZnVuY3Rpb24gbG9hZE5hbWVzcGFjZXMobnMsIGNhbGxiYWNrKSB7XG4gICAgdmFyIF90aGlzNiA9IHRoaXM7XG5cbiAgICB2YXIgZGVmZXJyZWQgPSBkZWZlcigpO1xuXG4gICAgaWYgKCF0aGlzLm9wdGlvbnMubnMpIHtcbiAgICAgIGNhbGxiYWNrICYmIGNhbGxiYWNrKCk7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICAgIGlmICh0eXBlb2YgbnMgPT09ICdzdHJpbmcnKSBucyA9IFtuc107XG5cbiAgICBucy5mb3JFYWNoKGZ1bmN0aW9uIChuKSB7XG4gICAgICBpZiAoX3RoaXM2Lm9wdGlvbnMubnMuaW5kZXhPZihuKSA8IDApIF90aGlzNi5vcHRpb25zLm5zLnB1c2gobik7XG4gICAgfSk7XG5cbiAgICB0aGlzLmxvYWRSZXNvdXJjZXMoZnVuY3Rpb24gKGVycikge1xuICAgICAgZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgICAgaWYgKGNhbGxiYWNrKSBjYWxsYmFjayhlcnIpO1xuICAgIH0pO1xuXG4gICAgcmV0dXJuIGRlZmVycmVkO1xuICB9O1xuXG4gIEkxOG4ucHJvdG90eXBlLmxvYWRMYW5ndWFnZXMgPSBmdW5jdGlvbiBsb2FkTGFuZ3VhZ2VzKGxuZ3MsIGNhbGxiYWNrKSB7XG4gICAgdmFyIGRlZmVycmVkID0gZGVmZXIoKTtcblxuICAgIGlmICh0eXBlb2YgbG5ncyA9PT0gJ3N0cmluZycpIGxuZ3MgPSBbbG5nc107XG4gICAgdmFyIHByZWxvYWRlZCA9IHRoaXMub3B0aW9ucy5wcmVsb2FkIHx8IFtdO1xuXG4gICAgdmFyIG5ld0xuZ3MgPSBsbmdzLmZpbHRlcihmdW5jdGlvbiAobG5nKSB7XG4gICAgICByZXR1cm4gcHJlbG9hZGVkLmluZGV4T2YobG5nKSA8IDA7XG4gICAgfSk7XG4gICAgLy8gRXhpdCBlYXJseSBpZiBhbGwgZ2l2ZW4gbGFuZ3VhZ2VzIGFyZSBhbHJlYWR5IHByZWxvYWRlZFxuICAgIGlmICghbmV3TG5ncy5sZW5ndGgpIHtcbiAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soKTtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG5cbiAgICB0aGlzLm9wdGlvbnMucHJlbG9hZCA9IHByZWxvYWRlZC5jb25jYXQobmV3TG5ncyk7XG4gICAgdGhpcy5sb2FkUmVzb3VyY2VzKGZ1bmN0aW9uIChlcnIpIHtcbiAgICAgIGRlZmVycmVkLnJlc29sdmUoKTtcbiAgICAgIGlmIChjYWxsYmFjaykgY2FsbGJhY2soZXJyKTtcbiAgICB9KTtcblxuICAgIHJldHVybiBkZWZlcnJlZDtcbiAgfTtcblxuICBJMThuLnByb3RvdHlwZS5kaXIgPSBmdW5jdGlvbiBkaXIobG5nKSB7XG4gICAgaWYgKCFsbmcpIGxuZyA9IHRoaXMubGFuZ3VhZ2VzICYmIHRoaXMubGFuZ3VhZ2VzLmxlbmd0aCA+IDAgPyB0aGlzLmxhbmd1YWdlc1swXSA6IHRoaXMubGFuZ3VhZ2U7XG4gICAgaWYgKCFsbmcpIHJldHVybiAncnRsJztcblxuICAgIHZhciBydGxMbmdzID0gWydhcicsICdzaHUnLCAnc3FyJywgJ3NzaCcsICd4YWEnLCAneWhkJywgJ3l1ZCcsICdhYW8nLCAnYWJoJywgJ2FidicsICdhY20nLCAnYWNxJywgJ2FjdycsICdhY3gnLCAnYWN5JywgJ2FkZicsICdhZHMnLCAnYWViJywgJ2FlYycsICdhZmInLCAnYWpwJywgJ2FwYycsICdhcGQnLCAnYXJiJywgJ2FycScsICdhcnMnLCAnYXJ5JywgJ2FyeicsICdhdXonLCAnYXZsJywgJ2F5aCcsICdheWwnLCAnYXluJywgJ2F5cCcsICdiYnonLCAncGdhJywgJ2hlJywgJ2l3JywgJ3BzJywgJ3BidCcsICdwYnUnLCAncHN0JywgJ3BycCcsICdwcmQnLCAndXInLCAneWRkJywgJ3lkcycsICd5aWgnLCAnamknLCAneWknLCAnaGJvJywgJ21lbicsICd4bW4nLCAnZmEnLCAnanByJywgJ3BlbycsICdwZXMnLCAncHJzJywgJ2R2JywgJ3NhbSddO1xuXG4gICAgcmV0dXJuIHJ0bExuZ3MuaW5kZXhPZih0aGlzLnNlcnZpY2VzLmxhbmd1YWdlVXRpbHMuZ2V0TGFuZ3VhZ2VQYXJ0RnJvbUNvZGUobG5nKSkgPj0gMCA/ICdydGwnIDogJ2x0cic7XG4gIH07XG5cbiAgLyogZXNsaW50IGNsYXNzLW1ldGhvZHMtdXNlLXRoaXM6IDAgKi9cblxuXG4gIEkxOG4ucHJvdG90eXBlLmNyZWF0ZUluc3RhbmNlID0gZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoKSB7XG4gICAgdmFyIG9wdGlvbnMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICAgIHZhciBjYWxsYmFjayA9IGFyZ3VtZW50c1sxXTtcblxuICAgIHJldHVybiBuZXcgSTE4bihvcHRpb25zLCBjYWxsYmFjayk7XG4gIH07XG5cbiAgSTE4bi5wcm90b3R5cGUuY2xvbmVJbnN0YW5jZSA9IGZ1bmN0aW9uIGNsb25lSW5zdGFuY2UoKSB7XG4gICAgdmFyIF90aGlzNyA9IHRoaXM7XG5cbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDoge307XG4gICAgdmFyIGNhbGxiYWNrID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBub29wO1xuXG4gICAgdmFyIG1lcmdlZE9wdGlvbnMgPSBfZXh0ZW5kcyh7fSwgdGhpcy5vcHRpb25zLCBvcHRpb25zLCB7IGlzQ2xvbmU6IHRydWUgfSk7XG4gICAgdmFyIGNsb25lID0gbmV3IEkxOG4obWVyZ2VkT3B0aW9ucyk7XG4gICAgdmFyIG1lbWJlcnNUb0NvcHkgPSBbJ3N0b3JlJywgJ3NlcnZpY2VzJywgJ2xhbmd1YWdlJ107XG4gICAgbWVtYmVyc1RvQ29weS5mb3JFYWNoKGZ1bmN0aW9uIChtKSB7XG4gICAgICBjbG9uZVttXSA9IF90aGlzN1ttXTtcbiAgICB9KTtcbiAgICBjbG9uZS50cmFuc2xhdG9yID0gbmV3IFRyYW5zbGF0b3IoY2xvbmUuc2VydmljZXMsIGNsb25lLm9wdGlvbnMpO1xuICAgIGNsb25lLnRyYW5zbGF0b3Iub24oJyonLCBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIGZvciAodmFyIF9sZW40ID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IEFycmF5KF9sZW40ID4gMSA/IF9sZW40IC0gMSA6IDApLCBfa2V5NCA9IDE7IF9rZXk0IDwgX2xlbjQ7IF9rZXk0KyspIHtcbiAgICAgICAgYXJnc1tfa2V5NCAtIDFdID0gYXJndW1lbnRzW19rZXk0XTtcbiAgICAgIH1cblxuICAgICAgY2xvbmUuZW1pdC5hcHBseShjbG9uZSwgW2V2ZW50XS5jb25jYXQoYXJncykpO1xuICAgIH0pO1xuICAgIGNsb25lLmluaXQobWVyZ2VkT3B0aW9ucywgY2FsbGJhY2spO1xuICAgIGNsb25lLnRyYW5zbGF0b3Iub3B0aW9ucyA9IGNsb25lLm9wdGlvbnM7IC8vIHN5bmMgb3B0aW9uc1xuXG4gICAgcmV0dXJuIGNsb25lO1xuICB9O1xuXG4gIHJldHVybiBJMThuO1xufShFdmVudEVtaXR0ZXIpO1xuXG5leHBvcnQgZGVmYXVsdCBuZXcgSTE4bigpOyIsImltcG9ydCBpMThuZXh0IGZyb20gJy4vaTE4bmV4dC5qcyc7XG5cbmV4cG9ydCBkZWZhdWx0IGkxOG5leHQ7XG5cbmV4cG9ydCB2YXIgY2hhbmdlTGFuZ3VhZ2UgPSBpMThuZXh0LmNoYW5nZUxhbmd1YWdlLmJpbmQoaTE4bmV4dCk7XG5leHBvcnQgdmFyIGNsb25lSW5zdGFuY2UgPSBpMThuZXh0LmNsb25lSW5zdGFuY2UuYmluZChpMThuZXh0KTtcbmV4cG9ydCB2YXIgY3JlYXRlSW5zdGFuY2UgPSBpMThuZXh0LmNyZWF0ZUluc3RhbmNlLmJpbmQoaTE4bmV4dCk7XG5leHBvcnQgdmFyIGRpciA9IGkxOG5leHQuZGlyLmJpbmQoaTE4bmV4dCk7XG5leHBvcnQgdmFyIGV4aXN0cyA9IGkxOG5leHQuZXhpc3RzLmJpbmQoaTE4bmV4dCk7XG5leHBvcnQgdmFyIGdldEZpeGVkVCA9IGkxOG5leHQuZ2V0Rml4ZWRULmJpbmQoaTE4bmV4dCk7XG5leHBvcnQgdmFyIGluaXQgPSBpMThuZXh0LmluaXQuYmluZChpMThuZXh0KTtcbmV4cG9ydCB2YXIgbG9hZExhbmd1YWdlcyA9IGkxOG5leHQubG9hZExhbmd1YWdlcy5iaW5kKGkxOG5leHQpO1xuZXhwb3J0IHZhciBsb2FkTmFtZXNwYWNlcyA9IGkxOG5leHQubG9hZE5hbWVzcGFjZXMuYmluZChpMThuZXh0KTtcbmV4cG9ydCB2YXIgbG9hZFJlc291cmNlcyA9IGkxOG5leHQubG9hZFJlc291cmNlcy5iaW5kKGkxOG5leHQpO1xuZXhwb3J0IHZhciBvZmYgPSBpMThuZXh0Lm9mZi5iaW5kKGkxOG5leHQpO1xuZXhwb3J0IHZhciBvbiA9IGkxOG5leHQub24uYmluZChpMThuZXh0KTtcbmV4cG9ydCB2YXIgc2V0RGVmYXVsdE5hbWVzcGFjZSA9IGkxOG5leHQuc2V0RGVmYXVsdE5hbWVzcGFjZS5iaW5kKGkxOG5leHQpO1xuZXhwb3J0IHZhciB0ID0gaTE4bmV4dC50LmJpbmQoaTE4bmV4dCk7XG5leHBvcnQgdmFyIHVzZSA9IGkxOG5leHQudXNlLmJpbmQoaTE4bmV4dCk7IiwiLyoqXG4gKiBCcm93c2VycycgZGVzY3JpcHRvcnNcbiAqXG4gKiBUaGUgaWRlYSBvZiBkZXNjcmlwdG9ycyBpcyBzaW1wbGUuIFlvdSBzaG91bGQga25vdyBhYm91dCB0aGVtIHR3byBzaW1wbGUgdGhpbmdzOlxuICogMS4gRXZlcnkgZGVzY3JpcHRvciBoYXMgYSBtZXRob2Qgb3IgcHJvcGVydHkgY2FsbGVkIGB0ZXN0YCBhbmQgYSBgZGVzY3JpYmVgIG1ldGhvZC5cbiAqIDIuIE9yZGVyIG9mIGRlc2NyaXB0b3JzIGlzIGltcG9ydGFudC5cbiAqXG4gKiBNb3JlIGRldGFpbHM6XG4gKiAxLiBNZXRob2Qgb3IgcHJvcGVydHkgYHRlc3RgIHNlcnZlcyBhcyBhIHdheSB0byBkZXRlY3Qgd2hldGhlciB0aGUgVUEgc3RyaW5nXG4gKiBtYXRjaGVzIHNvbWUgY2VydGFpbiBicm93c2VyIG9yIG5vdC4gVGhlIGBkZXNjcmliZWAgbWV0aG9kIGhlbHBzIHRvIG1ha2UgYSByZXN1bHRcbiAqIG9iamVjdCB3aXRoIHBhcmFtcyB0aGF0IHNob3cgc29tZSBicm93c2VyLXNwZWNpZmljIHRoaW5nczogbmFtZSwgdmVyc2lvbiwgZXRjLlxuICogMi4gT3JkZXIgb2YgZGVzY3JpcHRvcnMgaXMgaW1wb3J0YW50IGJlY2F1c2UgYSBQYXJzZXIgZ29lcyB0aHJvdWdoIHRoZW0gb25lIGJ5IG9uZVxuICogaW4gY291cnNlLiBGb3IgZXhhbXBsZSwgaWYgeW91IGluc2VydCBDaHJvbWUncyBkZXNjcmlwdG9yIGFzIHRoZSBmaXJzdCBvbmUsXG4gKiBtb3JlIHRoZW4gYSBoYWxmIG9mIGJyb3dzZXJzIHdpbGwgYmUgZGVzY3JpYmVkIGFzIENocm9tZSwgYmVjYXVzZSB0aGV5IHdpbGwgcGFzc1xuICogdGhlIENocm9tZSBkZXNjcmlwdG9yJ3MgdGVzdC5cbiAqXG4gKiBEZXNjcmlwdG9yJ3MgYHRlc3RgIGNvdWxkIGJlIGEgcHJvcGVydHkgd2l0aCBhbiBhcnJheSBvZiBSZWdFeHBzLCB3aGVyZSBldmVyeSBSZWdFeHBcbiAqIHdpbGwgYmUgYXBwbGllZCB0byBhIFVBIHN0cmluZyB0byB0ZXN0IGl0IHdoZXRoZXIgaXQgbWF0Y2hlcyBvciBub3QuXG4gKiBJZiBhIGRlc2NyaXB0b3IgaGFzIHR3byBvciBtb3JlIHJlZ2V4cHMgaW4gdGhlIGB0ZXN0YCBhcnJheSBpdCB0ZXN0cyB0aGVtIG9uZSBieSBvbmVcbiAqIHdpdGggYSBsb2dpY2FsIHN1bSBvcGVyYXRpb24uIFBhcnNlciBzdG9wcyBpZiBpdCBoYXMgZm91bmQgYW55IFJlZ0V4cCB0aGF0IG1hdGNoZXMgdGhlIFVBLlxuICpcbiAqIE9yIGB0ZXN0YCBjb3VsZCBiZSBhIG1ldGhvZC4gSW4gdGhhdCBjYXNlIGl0IGdldHMgYSBQYXJzZXIgaW5zdGFuY2UgYW5kIHNob3VsZFxuICogcmV0dXJuIHRydWUvZmFsc2UgdG8gZ2V0IHRoZSBQYXJzZXIga25vdyBpZiB0aGlzIGJyb3dzZXIgZGVzY3JpcHRvciBtYXRjaGVzIHRoZSBVQSBvciBub3QuXG4gKi9cblxuaW1wb3J0IHtcbiAgZ2V0Rmlyc3RNYXRjaCxcbiAgZ2V0U2Vjb25kTWF0Y2gsXG59IGZyb20gJy4vdXRpbHMnO1xuXG5jb25zdCBjb21tb25WZXJzaW9uSWRlbnRpZmllciA9IC92ZXJzaW9uXFwvKFxcZCsoXFwuP18/XFxkKykrKS9pO1xuXG5jb25zdCBicm93c2Vyc0xpc3QgPSBbXG4gIC8qIE9wZXJhIDwgMTMuMCAqL1xuICB7XG4gICAgdGVzdDogWy9vcGVyYS9pXSxcbiAgICBkZXNjcmliZSh1YSkge1xuICAgICAgY29uc3QgYnJvd3NlciA9IHtcbiAgICAgICAgbmFtZTogJ09wZXJhJyxcbiAgICAgIH07XG4gICAgICBjb25zdCB2ZXJzaW9uID0gZ2V0Rmlyc3RNYXRjaChjb21tb25WZXJzaW9uSWRlbnRpZmllciwgdWEpIHx8IGdldEZpcnN0TWF0Y2goLyg/Om9wZXJhKVtcXHMvXShcXGQrKFxcLj9fP1xcZCspKykvaSwgdWEpO1xuXG4gICAgICBpZiAodmVyc2lvbikge1xuICAgICAgICBicm93c2VyLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYnJvd3NlcjtcbiAgICB9LFxuICB9LFxuXG4gIC8qIE9wZXJhID4gMTMuMCAqL1xuICB7XG4gICAgdGVzdDogWy9vcHJcXC98b3Bpb3MvaV0sXG4gICAgZGVzY3JpYmUodWEpIHtcbiAgICAgIGNvbnN0IGJyb3dzZXIgPSB7XG4gICAgICAgIG5hbWU6ICdPcGVyYScsXG4gICAgICB9O1xuICAgICAgY29uc3QgdmVyc2lvbiA9IGdldEZpcnN0TWF0Y2goLyg/Om9wcnxvcGlvcylbXFxzL10oXFxTKykvaSwgdWEpIHx8IGdldEZpcnN0TWF0Y2goY29tbW9uVmVyc2lvbklkZW50aWZpZXIsIHVhKTtcblxuICAgICAgaWYgKHZlcnNpb24pIHtcbiAgICAgICAgYnJvd3Nlci52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJyb3dzZXI7XG4gICAgfSxcbiAgfSxcbiAge1xuICAgIHRlc3Q6IFsvU2Ftc3VuZ0Jyb3dzZXIvaV0sXG4gICAgZGVzY3JpYmUodWEpIHtcbiAgICAgIGNvbnN0IGJyb3dzZXIgPSB7XG4gICAgICAgIG5hbWU6ICdTYW1zdW5nIEludGVybmV0IGZvciBBbmRyb2lkJyxcbiAgICAgIH07XG4gICAgICBjb25zdCB2ZXJzaW9uID0gZ2V0Rmlyc3RNYXRjaChjb21tb25WZXJzaW9uSWRlbnRpZmllciwgdWEpIHx8IGdldEZpcnN0TWF0Y2goLyg/OlNhbXN1bmdCcm93c2VyKVtcXHMvXShcXGQrKFxcLj9fP1xcZCspKykvaSwgdWEpO1xuXG4gICAgICBpZiAodmVyc2lvbikge1xuICAgICAgICBicm93c2VyLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYnJvd3NlcjtcbiAgICB9LFxuICB9LFxuICB7XG4gICAgdGVzdDogWy9XaGFsZS9pXSxcbiAgICBkZXNjcmliZSh1YSkge1xuICAgICAgY29uc3QgYnJvd3NlciA9IHtcbiAgICAgICAgbmFtZTogJ05BVkVSIFdoYWxlIEJyb3dzZXInLFxuICAgICAgfTtcbiAgICAgIGNvbnN0IHZlcnNpb24gPSBnZXRGaXJzdE1hdGNoKGNvbW1vblZlcnNpb25JZGVudGlmaWVyLCB1YSkgfHwgZ2V0Rmlyc3RNYXRjaCgvKD86d2hhbGUpW1xccy9dKFxcZCsoPzpcXC5cXGQrKSspL2ksIHVhKTtcblxuICAgICAgaWYgKHZlcnNpb24pIHtcbiAgICAgICAgYnJvd3Nlci52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJyb3dzZXI7XG4gICAgfSxcbiAgfSxcbiAge1xuICAgIHRlc3Q6IFsvTVpCcm93c2VyL2ldLFxuICAgIGRlc2NyaWJlKHVhKSB7XG4gICAgICBjb25zdCBicm93c2VyID0ge1xuICAgICAgICBuYW1lOiAnTVogQnJvd3NlcicsXG4gICAgICB9O1xuICAgICAgY29uc3QgdmVyc2lvbiA9IGdldEZpcnN0TWF0Y2goLyg/Ok1aQnJvd3NlcilbXFxzL10oXFxkKyg/OlxcLlxcZCspKykvaSwgdWEpIHx8IGdldEZpcnN0TWF0Y2goY29tbW9uVmVyc2lvbklkZW50aWZpZXIsIHVhKTtcblxuICAgICAgaWYgKHZlcnNpb24pIHtcbiAgICAgICAgYnJvd3Nlci52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJyb3dzZXI7XG4gICAgfSxcbiAgfSxcbiAge1xuICAgIHRlc3Q6IFsvZm9jdXMvaV0sXG4gICAgZGVzY3JpYmUodWEpIHtcbiAgICAgIGNvbnN0IGJyb3dzZXIgPSB7XG4gICAgICAgIG5hbWU6ICdGb2N1cycsXG4gICAgICB9O1xuICAgICAgY29uc3QgdmVyc2lvbiA9IGdldEZpcnN0TWF0Y2goLyg/OmZvY3VzKVtcXHMvXShcXGQrKD86XFwuXFxkKykrKS9pLCB1YSkgfHwgZ2V0Rmlyc3RNYXRjaChjb21tb25WZXJzaW9uSWRlbnRpZmllciwgdWEpO1xuXG4gICAgICBpZiAodmVyc2lvbikge1xuICAgICAgICBicm93c2VyLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYnJvd3NlcjtcbiAgICB9LFxuICB9LFxuICB7XG4gICAgdGVzdDogWy9zd2luZy9pXSxcbiAgICBkZXNjcmliZSh1YSkge1xuICAgICAgY29uc3QgYnJvd3NlciA9IHtcbiAgICAgICAgbmFtZTogJ1N3aW5nJyxcbiAgICAgIH07XG4gICAgICBjb25zdCB2ZXJzaW9uID0gZ2V0Rmlyc3RNYXRjaCgvKD86c3dpbmcpW1xccy9dKFxcZCsoPzpcXC5cXGQrKSspL2ksIHVhKSB8fCBnZXRGaXJzdE1hdGNoKGNvbW1vblZlcnNpb25JZGVudGlmaWVyLCB1YSk7XG5cbiAgICAgIGlmICh2ZXJzaW9uKSB7XG4gICAgICAgIGJyb3dzZXIudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBicm93c2VyO1xuICAgIH0sXG4gIH0sXG4gIHtcbiAgICB0ZXN0OiBbL2NvYXN0L2ldLFxuICAgIGRlc2NyaWJlKHVhKSB7XG4gICAgICBjb25zdCBicm93c2VyID0ge1xuICAgICAgICBuYW1lOiAnT3BlcmEgQ29hc3QnLFxuICAgICAgfTtcbiAgICAgIGNvbnN0IHZlcnNpb24gPSBnZXRGaXJzdE1hdGNoKGNvbW1vblZlcnNpb25JZGVudGlmaWVyLCB1YSkgfHwgZ2V0Rmlyc3RNYXRjaCgvKD86Y29hc3QpW1xccy9dKFxcZCsoXFwuP18/XFxkKykrKS9pLCB1YSk7XG5cbiAgICAgIGlmICh2ZXJzaW9uKSB7XG4gICAgICAgIGJyb3dzZXIudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBicm93c2VyO1xuICAgIH0sXG4gIH0sXG4gIHtcbiAgICB0ZXN0OiBbL3lhYnJvd3Nlci9pXSxcbiAgICBkZXNjcmliZSh1YSkge1xuICAgICAgY29uc3QgYnJvd3NlciA9IHtcbiAgICAgICAgbmFtZTogJ1lhbmRleCBCcm93c2VyJyxcbiAgICAgIH07XG4gICAgICBjb25zdCB2ZXJzaW9uID0gZ2V0Rmlyc3RNYXRjaChjb21tb25WZXJzaW9uSWRlbnRpZmllciwgdWEpIHx8IGdldEZpcnN0TWF0Y2goLyg/OnlhYnJvd3NlcilbXFxzL10oXFxkKyhcXC4/Xz9cXGQrKSspL2ksIHVhKTtcblxuICAgICAgaWYgKHZlcnNpb24pIHtcbiAgICAgICAgYnJvd3Nlci52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJyb3dzZXI7XG4gICAgfSxcbiAgfSxcbiAge1xuICAgIHRlc3Q6IFsvdWNicm93c2VyL2ldLFxuICAgIGRlc2NyaWJlKHVhKSB7XG4gICAgICBjb25zdCBicm93c2VyID0ge1xuICAgICAgICBuYW1lOiAnVUMgQnJvd3NlcicsXG4gICAgICB9O1xuICAgICAgY29uc3QgdmVyc2lvbiA9IGdldEZpcnN0TWF0Y2goY29tbW9uVmVyc2lvbklkZW50aWZpZXIsIHVhKSB8fCBnZXRGaXJzdE1hdGNoKC8oPzp1Y2Jyb3dzZXIpW1xccy9dKFxcZCsoXFwuP18/XFxkKykrKS9pLCB1YSk7XG5cbiAgICAgIGlmICh2ZXJzaW9uKSB7XG4gICAgICAgIGJyb3dzZXIudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBicm93c2VyO1xuICAgIH0sXG4gIH0sXG4gIHtcbiAgICB0ZXN0OiBbL01heHRob258bXhpb3MvaV0sXG4gICAgZGVzY3JpYmUodWEpIHtcbiAgICAgIGNvbnN0IGJyb3dzZXIgPSB7XG4gICAgICAgIG5hbWU6ICdNYXh0aG9uJyxcbiAgICAgIH07XG4gICAgICBjb25zdCB2ZXJzaW9uID0gZ2V0Rmlyc3RNYXRjaChjb21tb25WZXJzaW9uSWRlbnRpZmllciwgdWEpIHx8IGdldEZpcnN0TWF0Y2goLyg/Ok1heHRob258bXhpb3MpW1xccy9dKFxcZCsoXFwuP18/XFxkKykrKS9pLCB1YSk7XG5cbiAgICAgIGlmICh2ZXJzaW9uKSB7XG4gICAgICAgIGJyb3dzZXIudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBicm93c2VyO1xuICAgIH0sXG4gIH0sXG4gIHtcbiAgICB0ZXN0OiBbL2VwaXBoYW55L2ldLFxuICAgIGRlc2NyaWJlKHVhKSB7XG4gICAgICBjb25zdCBicm93c2VyID0ge1xuICAgICAgICBuYW1lOiAnRXBpcGhhbnknLFxuICAgICAgfTtcbiAgICAgIGNvbnN0IHZlcnNpb24gPSBnZXRGaXJzdE1hdGNoKGNvbW1vblZlcnNpb25JZGVudGlmaWVyLCB1YSkgfHwgZ2V0Rmlyc3RNYXRjaCgvKD86ZXBpcGhhbnkpW1xccy9dKFxcZCsoXFwuP18/XFxkKykrKS9pLCB1YSk7XG5cbiAgICAgIGlmICh2ZXJzaW9uKSB7XG4gICAgICAgIGJyb3dzZXIudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBicm93c2VyO1xuICAgIH0sXG4gIH0sXG4gIHtcbiAgICB0ZXN0OiBbL3B1ZmZpbi9pXSxcbiAgICBkZXNjcmliZSh1YSkge1xuICAgICAgY29uc3QgYnJvd3NlciA9IHtcbiAgICAgICAgbmFtZTogJ1B1ZmZpbicsXG4gICAgICB9O1xuICAgICAgY29uc3QgdmVyc2lvbiA9IGdldEZpcnN0TWF0Y2goY29tbW9uVmVyc2lvbklkZW50aWZpZXIsIHVhKSB8fCBnZXRGaXJzdE1hdGNoKC8oPzpwdWZmaW4pW1xccy9dKFxcZCsoXFwuP18/XFxkKykrKS9pLCB1YSk7XG5cbiAgICAgIGlmICh2ZXJzaW9uKSB7XG4gICAgICAgIGJyb3dzZXIudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBicm93c2VyO1xuICAgIH0sXG4gIH0sXG4gIHtcbiAgICB0ZXN0OiBbL3NsZWlwbmlyL2ldLFxuICAgIGRlc2NyaWJlKHVhKSB7XG4gICAgICBjb25zdCBicm93c2VyID0ge1xuICAgICAgICBuYW1lOiAnU2xlaXBuaXInLFxuICAgICAgfTtcbiAgICAgIGNvbnN0IHZlcnNpb24gPSBnZXRGaXJzdE1hdGNoKGNvbW1vblZlcnNpb25JZGVudGlmaWVyLCB1YSkgfHwgZ2V0Rmlyc3RNYXRjaCgvKD86c2xlaXBuaXIpW1xccy9dKFxcZCsoXFwuP18/XFxkKykrKS9pLCB1YSk7XG5cbiAgICAgIGlmICh2ZXJzaW9uKSB7XG4gICAgICAgIGJyb3dzZXIudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBicm93c2VyO1xuICAgIH0sXG4gIH0sXG4gIHtcbiAgICB0ZXN0OiBbL2stbWVsZW9uL2ldLFxuICAgIGRlc2NyaWJlKHVhKSB7XG4gICAgICBjb25zdCBicm93c2VyID0ge1xuICAgICAgICBuYW1lOiAnSy1NZWxlb24nLFxuICAgICAgfTtcbiAgICAgIGNvbnN0IHZlcnNpb24gPSBnZXRGaXJzdE1hdGNoKGNvbW1vblZlcnNpb25JZGVudGlmaWVyLCB1YSkgfHwgZ2V0Rmlyc3RNYXRjaCgvKD86ay1tZWxlb24pW1xccy9dKFxcZCsoXFwuP18/XFxkKykrKS9pLCB1YSk7XG5cbiAgICAgIGlmICh2ZXJzaW9uKSB7XG4gICAgICAgIGJyb3dzZXIudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBicm93c2VyO1xuICAgIH0sXG4gIH0sXG4gIHtcbiAgICB0ZXN0OiBbL21zaWV8dHJpZGVudC9pXSxcbiAgICBkZXNjcmliZSh1YSkge1xuICAgICAgY29uc3QgYnJvd3NlciA9IHtcbiAgICAgICAgbmFtZTogJ0ludGVybmV0IEV4cGxvcmVyJyxcbiAgICAgIH07XG4gICAgICBjb25zdCB2ZXJzaW9uID0gZ2V0Rmlyc3RNYXRjaCgvKD86bXNpZSB8cnY6KShcXGQrKFxcLj9fP1xcZCspKykvaSwgdWEpO1xuXG4gICAgICBpZiAodmVyc2lvbikge1xuICAgICAgICBicm93c2VyLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYnJvd3NlcjtcbiAgICB9LFxuICB9LFxuICB7XG4gICAgdGVzdDogWy9lZGcoW2VhXXxpb3MpL2ldLFxuICAgIGRlc2NyaWJlKHVhKSB7XG4gICAgICBjb25zdCBicm93c2VyID0ge1xuICAgICAgICBuYW1lOiAnTWljcm9zb2Z0IEVkZ2UnLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgdmVyc2lvbiA9IGdldFNlY29uZE1hdGNoKC9lZGcoW2VhXXxpb3MpXFwvKFxcZCsoXFwuP18/XFxkKykrKS9pLCB1YSk7XG5cbiAgICAgIGlmICh2ZXJzaW9uKSB7XG4gICAgICAgIGJyb3dzZXIudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBicm93c2VyO1xuICAgIH0sXG4gIH0sXG4gIHtcbiAgICB0ZXN0OiBbL3ZpdmFsZGkvaV0sXG4gICAgZGVzY3JpYmUodWEpIHtcbiAgICAgIGNvbnN0IGJyb3dzZXIgPSB7XG4gICAgICAgIG5hbWU6ICdWaXZhbGRpJyxcbiAgICAgIH07XG4gICAgICBjb25zdCB2ZXJzaW9uID0gZ2V0Rmlyc3RNYXRjaCgvdml2YWxkaVxcLyhcXGQrKFxcLj9fP1xcZCspKykvaSwgdWEpO1xuXG4gICAgICBpZiAodmVyc2lvbikge1xuICAgICAgICBicm93c2VyLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYnJvd3NlcjtcbiAgICB9LFxuICB9LFxuICB7XG4gICAgdGVzdDogWy9zZWFtb25rZXkvaV0sXG4gICAgZGVzY3JpYmUodWEpIHtcbiAgICAgIGNvbnN0IGJyb3dzZXIgPSB7XG4gICAgICAgIG5hbWU6ICdTZWFNb25rZXknLFxuICAgICAgfTtcbiAgICAgIGNvbnN0IHZlcnNpb24gPSBnZXRGaXJzdE1hdGNoKC9zZWFtb25rZXlcXC8oXFxkKyhcXC4/Xz9cXGQrKSspL2ksIHVhKTtcblxuICAgICAgaWYgKHZlcnNpb24pIHtcbiAgICAgICAgYnJvd3Nlci52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJyb3dzZXI7XG4gICAgfSxcbiAgfSxcbiAge1xuICAgIHRlc3Q6IFsvc2FpbGZpc2gvaV0sXG4gICAgZGVzY3JpYmUodWEpIHtcbiAgICAgIGNvbnN0IGJyb3dzZXIgPSB7XG4gICAgICAgIG5hbWU6ICdTYWlsZmlzaCcsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCB2ZXJzaW9uID0gZ2V0Rmlyc3RNYXRjaCgvc2FpbGZpc2hcXHM/YnJvd3NlclxcLyhcXGQrKFxcLlxcZCspPykvaSwgdWEpO1xuXG4gICAgICBpZiAodmVyc2lvbikge1xuICAgICAgICBicm93c2VyLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYnJvd3NlcjtcbiAgICB9LFxuICB9LFxuICB7XG4gICAgdGVzdDogWy9zaWxrL2ldLFxuICAgIGRlc2NyaWJlKHVhKSB7XG4gICAgICBjb25zdCBicm93c2VyID0ge1xuICAgICAgICBuYW1lOiAnQW1hem9uIFNpbGsnLFxuICAgICAgfTtcbiAgICAgIGNvbnN0IHZlcnNpb24gPSBnZXRGaXJzdE1hdGNoKC9zaWxrXFwvKFxcZCsoXFwuP18/XFxkKykrKS9pLCB1YSk7XG5cbiAgICAgIGlmICh2ZXJzaW9uKSB7XG4gICAgICAgIGJyb3dzZXIudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBicm93c2VyO1xuICAgIH0sXG4gIH0sXG4gIHtcbiAgICB0ZXN0OiBbL3BoYW50b20vaV0sXG4gICAgZGVzY3JpYmUodWEpIHtcbiAgICAgIGNvbnN0IGJyb3dzZXIgPSB7XG4gICAgICAgIG5hbWU6ICdQaGFudG9tSlMnLFxuICAgICAgfTtcbiAgICAgIGNvbnN0IHZlcnNpb24gPSBnZXRGaXJzdE1hdGNoKC9waGFudG9tanNcXC8oXFxkKyhcXC4/Xz9cXGQrKSspL2ksIHVhKTtcblxuICAgICAgaWYgKHZlcnNpb24pIHtcbiAgICAgICAgYnJvd3Nlci52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJyb3dzZXI7XG4gICAgfSxcbiAgfSxcbiAge1xuICAgIHRlc3Q6IFsvc2xpbWVyanMvaV0sXG4gICAgZGVzY3JpYmUodWEpIHtcbiAgICAgIGNvbnN0IGJyb3dzZXIgPSB7XG4gICAgICAgIG5hbWU6ICdTbGltZXJKUycsXG4gICAgICB9O1xuICAgICAgY29uc3QgdmVyc2lvbiA9IGdldEZpcnN0TWF0Y2goL3NsaW1lcmpzXFwvKFxcZCsoXFwuP18/XFxkKykrKS9pLCB1YSk7XG5cbiAgICAgIGlmICh2ZXJzaW9uKSB7XG4gICAgICAgIGJyb3dzZXIudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBicm93c2VyO1xuICAgIH0sXG4gIH0sXG4gIHtcbiAgICB0ZXN0OiBbL2JsYWNrYmVycnl8XFxiYmJcXGQrL2ksIC9yaW1cXHN0YWJsZXQvaV0sXG4gICAgZGVzY3JpYmUodWEpIHtcbiAgICAgIGNvbnN0IGJyb3dzZXIgPSB7XG4gICAgICAgIG5hbWU6ICdCbGFja0JlcnJ5JyxcbiAgICAgIH07XG4gICAgICBjb25zdCB2ZXJzaW9uID0gZ2V0Rmlyc3RNYXRjaChjb21tb25WZXJzaW9uSWRlbnRpZmllciwgdWEpIHx8IGdldEZpcnN0TWF0Y2goL2JsYWNrYmVycnlbXFxkXStcXC8oXFxkKyhcXC4/Xz9cXGQrKSspL2ksIHVhKTtcblxuICAgICAgaWYgKHZlcnNpb24pIHtcbiAgICAgICAgYnJvd3Nlci52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGJyb3dzZXI7XG4gICAgfSxcbiAgfSxcbiAge1xuICAgIHRlc3Q6IFsvKHdlYnxocHcpW28wXXMvaV0sXG4gICAgZGVzY3JpYmUodWEpIHtcbiAgICAgIGNvbnN0IGJyb3dzZXIgPSB7XG4gICAgICAgIG5hbWU6ICdXZWJPUyBCcm93c2VyJyxcbiAgICAgIH07XG4gICAgICBjb25zdCB2ZXJzaW9uID0gZ2V0Rmlyc3RNYXRjaChjb21tb25WZXJzaW9uSWRlbnRpZmllciwgdWEpIHx8IGdldEZpcnN0TWF0Y2goL3coPzplYik/W28wXXNicm93c2VyXFwvKFxcZCsoXFwuP18/XFxkKykrKS9pLCB1YSk7XG5cbiAgICAgIGlmICh2ZXJzaW9uKSB7XG4gICAgICAgIGJyb3dzZXIudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBicm93c2VyO1xuICAgIH0sXG4gIH0sXG4gIHtcbiAgICB0ZXN0OiBbL2JhZGEvaV0sXG4gICAgZGVzY3JpYmUodWEpIHtcbiAgICAgIGNvbnN0IGJyb3dzZXIgPSB7XG4gICAgICAgIG5hbWU6ICdCYWRhJyxcbiAgICAgIH07XG4gICAgICBjb25zdCB2ZXJzaW9uID0gZ2V0Rmlyc3RNYXRjaCgvZG9sZmluXFwvKFxcZCsoXFwuP18/XFxkKykrKS9pLCB1YSk7XG5cbiAgICAgIGlmICh2ZXJzaW9uKSB7XG4gICAgICAgIGJyb3dzZXIudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBicm93c2VyO1xuICAgIH0sXG4gIH0sXG4gIHtcbiAgICB0ZXN0OiBbL3RpemVuL2ldLFxuICAgIGRlc2NyaWJlKHVhKSB7XG4gICAgICBjb25zdCBicm93c2VyID0ge1xuICAgICAgICBuYW1lOiAnVGl6ZW4nLFxuICAgICAgfTtcbiAgICAgIGNvbnN0IHZlcnNpb24gPSBnZXRGaXJzdE1hdGNoKC8oPzp0aXplblxccz8pP2Jyb3dzZXJcXC8oXFxkKyhcXC4/Xz9cXGQrKSspL2ksIHVhKSB8fCBnZXRGaXJzdE1hdGNoKGNvbW1vblZlcnNpb25JZGVudGlmaWVyLCB1YSk7XG5cbiAgICAgIGlmICh2ZXJzaW9uKSB7XG4gICAgICAgIGJyb3dzZXIudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBicm93c2VyO1xuICAgIH0sXG4gIH0sXG4gIHtcbiAgICB0ZXN0OiBbL3F1cHppbGxhL2ldLFxuICAgIGRlc2NyaWJlKHVhKSB7XG4gICAgICBjb25zdCBicm93c2VyID0ge1xuICAgICAgICBuYW1lOiAnUXVwWmlsbGEnLFxuICAgICAgfTtcbiAgICAgIGNvbnN0IHZlcnNpb24gPSBnZXRGaXJzdE1hdGNoKC8oPzpxdXB6aWxsYSlbXFxzL10oXFxkKyhcXC4/Xz9cXGQrKSspL2ksIHVhKSB8fCBnZXRGaXJzdE1hdGNoKGNvbW1vblZlcnNpb25JZGVudGlmaWVyLCB1YSk7XG5cbiAgICAgIGlmICh2ZXJzaW9uKSB7XG4gICAgICAgIGJyb3dzZXIudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBicm93c2VyO1xuICAgIH0sXG4gIH0sXG4gIHtcbiAgICB0ZXN0OiBbL2ZpcmVmb3h8aWNld2Vhc2VsfGZ4aW9zL2ldLFxuICAgIGRlc2NyaWJlKHVhKSB7XG4gICAgICBjb25zdCBicm93c2VyID0ge1xuICAgICAgICBuYW1lOiAnRmlyZWZveCcsXG4gICAgICB9O1xuICAgICAgY29uc3QgdmVyc2lvbiA9IGdldEZpcnN0TWF0Y2goLyg/OmZpcmVmb3h8aWNld2Vhc2VsfGZ4aW9zKVtcXHMvXShcXGQrKFxcLj9fP1xcZCspKykvaSwgdWEpO1xuXG4gICAgICBpZiAodmVyc2lvbikge1xuICAgICAgICBicm93c2VyLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYnJvd3NlcjtcbiAgICB9LFxuICB9LFxuICB7XG4gICAgdGVzdDogWy9jaHJvbWl1bS9pXSxcbiAgICBkZXNjcmliZSh1YSkge1xuICAgICAgY29uc3QgYnJvd3NlciA9IHtcbiAgICAgICAgbmFtZTogJ0Nocm9taXVtJyxcbiAgICAgIH07XG4gICAgICBjb25zdCB2ZXJzaW9uID0gZ2V0Rmlyc3RNYXRjaCgvKD86Y2hyb21pdW0pW1xccy9dKFxcZCsoXFwuP18/XFxkKykrKS9pLCB1YSkgfHwgZ2V0Rmlyc3RNYXRjaChjb21tb25WZXJzaW9uSWRlbnRpZmllciwgdWEpO1xuXG4gICAgICBpZiAodmVyc2lvbikge1xuICAgICAgICBicm93c2VyLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYnJvd3NlcjtcbiAgICB9LFxuICB9LFxuICB7XG4gICAgdGVzdDogWy9jaHJvbWV8Y3Jpb3N8Y3Jtby9pXSxcbiAgICBkZXNjcmliZSh1YSkge1xuICAgICAgY29uc3QgYnJvd3NlciA9IHtcbiAgICAgICAgbmFtZTogJ0Nocm9tZScsXG4gICAgICB9O1xuICAgICAgY29uc3QgdmVyc2lvbiA9IGdldEZpcnN0TWF0Y2goLyg/OmNocm9tZXxjcmlvc3xjcm1vKVxcLyhcXGQrKFxcLj9fP1xcZCspKykvaSwgdWEpO1xuXG4gICAgICBpZiAodmVyc2lvbikge1xuICAgICAgICBicm93c2VyLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYnJvd3NlcjtcbiAgICB9LFxuICB9LFxuXG4gIC8qIEFuZHJvaWQgQnJvd3NlciAqL1xuICB7XG4gICAgdGVzdChwYXJzZXIpIHtcbiAgICAgIGNvbnN0IG5vdExpa2VBbmRyb2lkID0gIXBhcnNlci50ZXN0KC9saWtlIGFuZHJvaWQvaSk7XG4gICAgICBjb25zdCBidXRBbmRyb2lkID0gcGFyc2VyLnRlc3QoL2FuZHJvaWQvaSk7XG4gICAgICByZXR1cm4gbm90TGlrZUFuZHJvaWQgJiYgYnV0QW5kcm9pZDtcbiAgICB9LFxuICAgIGRlc2NyaWJlKHVhKSB7XG4gICAgICBjb25zdCBicm93c2VyID0ge1xuICAgICAgICBuYW1lOiAnQW5kcm9pZCBCcm93c2VyJyxcbiAgICAgIH07XG4gICAgICBjb25zdCB2ZXJzaW9uID0gZ2V0Rmlyc3RNYXRjaChjb21tb25WZXJzaW9uSWRlbnRpZmllciwgdWEpO1xuXG4gICAgICBpZiAodmVyc2lvbikge1xuICAgICAgICBicm93c2VyLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYnJvd3NlcjtcbiAgICB9LFxuICB9LFxuXG4gIC8qIFNhZmFyaSAqL1xuICB7XG4gICAgdGVzdDogWy9zYWZhcml8YXBwbGV3ZWJraXQvaV0sXG4gICAgZGVzY3JpYmUodWEpIHtcbiAgICAgIGNvbnN0IGJyb3dzZXIgPSB7XG4gICAgICAgIG5hbWU6ICdTYWZhcmknLFxuICAgICAgfTtcbiAgICAgIGNvbnN0IHZlcnNpb24gPSBnZXRGaXJzdE1hdGNoKGNvbW1vblZlcnNpb25JZGVudGlmaWVyLCB1YSk7XG5cbiAgICAgIGlmICh2ZXJzaW9uKSB7XG4gICAgICAgIGJyb3dzZXIudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBicm93c2VyO1xuICAgIH0sXG4gIH0sXG5cbiAgLyogR29vZ2xlYm90ICovXG4gIHtcbiAgICB0ZXN0OiBbL2dvb2dsZWJvdC9pXSxcbiAgICBkZXNjcmliZSh1YSkge1xuICAgICAgY29uc3QgYnJvd3NlciA9IHtcbiAgICAgICAgbmFtZTogJ0dvb2dsZWJvdCcsXG4gICAgICB9O1xuICAgICAgY29uc3QgdmVyc2lvbiA9IGdldEZpcnN0TWF0Y2goL2dvb2dsZWJvdFxcLyhcXGQrKFxcLlxcZCspKS9pLCB1YSkgfHwgZ2V0Rmlyc3RNYXRjaChjb21tb25WZXJzaW9uSWRlbnRpZmllciwgdWEpO1xuXG4gICAgICBpZiAodmVyc2lvbikge1xuICAgICAgICBicm93c2VyLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYnJvd3NlcjtcbiAgICB9LFxuICB9LFxuXG4gIC8qIFNvbWV0aGluZyBlbHNlICovXG4gIHtcbiAgICB0ZXN0OiBbLy4qL2ldLFxuICAgIGRlc2NyaWJlKHVhKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiBnZXRGaXJzdE1hdGNoKC9eKC4qKVxcLyguKikgLywgdWEpLFxuICAgICAgICB2ZXJzaW9uOiBnZXRTZWNvbmRNYXRjaCgvXiguKilcXC8oLiopIC8sIHVhKSxcbiAgICAgIH07XG4gICAgfSxcbiAgfSxcbl07XG5cbmV4cG9ydCBkZWZhdWx0IGJyb3dzZXJzTGlzdDtcbiIsImltcG9ydCB7XG4gIGdldEZpcnN0TWF0Y2gsXG4gIGdldFdpbmRvd3NWZXJzaW9uTmFtZSxcbn0gZnJvbSAnLi91dGlscyc7XG5cbmV4cG9ydCBkZWZhdWx0IFtcbiAgLyogV2luZG93cyBQaG9uZSAqL1xuICB7XG4gICAgdGVzdDogWy93aW5kb3dzIHBob25lL2ldLFxuICAgIGRlc2NyaWJlKHVhKSB7XG4gICAgICBjb25zdCB2ZXJzaW9uID0gZ2V0Rmlyc3RNYXRjaCgvd2luZG93cyBwaG9uZSAoPzpvcyk/XFxzPyhcXGQrKFxcLlxcZCspKikvaSwgdWEpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogJ1dpbmRvd3MgUGhvbmUnLFxuICAgICAgICB2ZXJzaW9uLFxuICAgICAgfTtcbiAgICB9LFxuICB9LFxuXG4gIC8qIFdpbmRvd3MgKi9cbiAge1xuICAgIHRlc3Q6IFsvd2luZG93cy9pXSxcbiAgICBkZXNjcmliZSh1YSkge1xuICAgICAgY29uc3QgdmVyc2lvbiA9IGdldEZpcnN0TWF0Y2goL1dpbmRvd3MgKChOVHxYUCkoIFxcZFxcZD8uXFxkKT8pL2ksIHVhKTtcbiAgICAgIGNvbnN0IHZlcnNpb25OYW1lID0gZ2V0V2luZG93c1ZlcnNpb25OYW1lKHZlcnNpb24pO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiAnV2luZG93cycsXG4gICAgICAgIHZlcnNpb24sXG4gICAgICAgIHZlcnNpb25OYW1lLFxuICAgICAgfTtcbiAgICB9LFxuICB9LFxuXG4gIC8qIG1hY09TICovXG4gIHtcbiAgICB0ZXN0OiBbL21hY2ludG9zaC9pXSxcbiAgICBkZXNjcmliZSh1YSkge1xuICAgICAgY29uc3QgdmVyc2lvbiA9IGdldEZpcnN0TWF0Y2goL21hYyBvcyB4IChcXGQrKFxcLj9fP1xcZCspKykvaSwgdWEpLnJlcGxhY2UoL1tfXFxzXS9nLCAnLicpO1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogJ21hY09TJyxcbiAgICAgICAgdmVyc2lvbixcbiAgICAgIH07XG4gICAgfSxcbiAgfSxcblxuICAvKiBpT1MgKi9cbiAge1xuICAgIHRlc3Q6IFsvKGlwb2R8aXBob25lfGlwYWQpL2ldLFxuICAgIGRlc2NyaWJlKHVhKSB7XG4gICAgICBjb25zdCB2ZXJzaW9uID0gZ2V0Rmlyc3RNYXRjaCgvb3MgKFxcZCsoW19cXHNdXFxkKykqKSBsaWtlIG1hYyBvcyB4L2ksIHVhKS5yZXBsYWNlKC9bX1xcc10vZywgJy4nKTtcblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogJ2lPUycsXG4gICAgICAgIHZlcnNpb24sXG4gICAgICB9O1xuICAgIH0sXG4gIH0sXG5cbiAgLyogQW5kcm9pZCAqL1xuICB7XG4gICAgdGVzdChwYXJzZXIpIHtcbiAgICAgIGNvbnN0IG5vdExpa2VBbmRyb2lkID0gIXBhcnNlci50ZXN0KC9saWtlIGFuZHJvaWQvaSk7XG4gICAgICBjb25zdCBidXRBbmRyb2lkID0gcGFyc2VyLnRlc3QoL2FuZHJvaWQvaSk7XG4gICAgICByZXR1cm4gbm90TGlrZUFuZHJvaWQgJiYgYnV0QW5kcm9pZDtcbiAgICB9LFxuICAgIGRlc2NyaWJlKHVhKSB7XG4gICAgICBjb25zdCB2ZXJzaW9uID0gZ2V0Rmlyc3RNYXRjaCgvYW5kcm9pZFtcXHMvLV0oXFxkKyhcXC5cXGQrKSopL2ksIHVhKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6ICdBbmRyb2lkJyxcbiAgICAgICAgdmVyc2lvbixcbiAgICAgIH07XG4gICAgfSxcbiAgfSxcblxuICAvKiBXZWJPUyAqL1xuICB7XG4gICAgdGVzdDogWy8od2VifGhwdylbbzBdcy9pXSxcbiAgICBkZXNjcmliZSh1YSkge1xuICAgICAgY29uc3QgdmVyc2lvbiA9IGdldEZpcnN0TWF0Y2goLyg/OndlYnxocHcpW28wXXNcXC8oXFxkKyhcXC5cXGQrKSopL2ksIHVhKTtcbiAgICAgIGNvbnN0IG9zID0ge1xuICAgICAgICBuYW1lOiAnV2ViT1MnLFxuICAgICAgfTtcblxuICAgICAgaWYgKHZlcnNpb24gJiYgdmVyc2lvbi5sZW5ndGgpIHtcbiAgICAgICAgb3MudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICB9XG4gICAgICByZXR1cm4gb3M7XG4gICAgfSxcbiAgfSxcblxuICAvKiBCbGFja0JlcnJ5ICovXG4gIHtcbiAgICB0ZXN0OiBbL2JsYWNrYmVycnl8XFxiYmJcXGQrL2ksIC9yaW1cXHN0YWJsZXQvaV0sXG4gICAgZGVzY3JpYmUodWEpIHtcbiAgICAgIGNvbnN0IHZlcnNpb24gPSBnZXRGaXJzdE1hdGNoKC9yaW1cXHN0YWJsZXRcXHNvc1xccyhcXGQrKFxcLlxcZCspKikvaSwgdWEpXG4gICAgICAgIHx8IGdldEZpcnN0TWF0Y2goL2JsYWNrYmVycnlcXGQrXFwvKFxcZCsoW19cXHNdXFxkKykqKS9pLCB1YSlcbiAgICAgICAgfHwgZ2V0Rmlyc3RNYXRjaCgvXFxiYmIoXFxkKykvaSwgdWEpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiAnQmxhY2tCZXJyeScsXG4gICAgICAgIHZlcnNpb24sXG4gICAgICB9O1xuICAgIH0sXG4gIH0sXG5cbiAgLyogQmFkYSAqL1xuICB7XG4gICAgdGVzdDogWy9iYWRhL2ldLFxuICAgIGRlc2NyaWJlKHVhKSB7XG4gICAgICBjb25zdCB2ZXJzaW9uID0gZ2V0Rmlyc3RNYXRjaCgvYmFkYVxcLyhcXGQrKFxcLlxcZCspKikvaSwgdWEpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiAnQmFkYScsXG4gICAgICAgIHZlcnNpb24sXG4gICAgICB9O1xuICAgIH0sXG4gIH0sXG5cbiAgLyogVGl6ZW4gKi9cbiAge1xuICAgIHRlc3Q6IFsvdGl6ZW4vaV0sXG4gICAgZGVzY3JpYmUodWEpIHtcbiAgICAgIGNvbnN0IHZlcnNpb24gPSBnZXRGaXJzdE1hdGNoKC90aXplblsvXFxzXShcXGQrKFxcLlxcZCspKikvaSwgdWEpO1xuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBuYW1lOiAnVGl6ZW4nLFxuICAgICAgICB2ZXJzaW9uLFxuICAgICAgfTtcbiAgICB9LFxuICB9LFxuXG4gIC8qIExpbnV4ICovXG4gIHtcbiAgICB0ZXN0OiBbL2xpbnV4L2ldLFxuICAgIGRlc2NyaWJlKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgbmFtZTogJ0xpbnV4JyxcbiAgICAgIH07XG4gICAgfSxcbiAgfSxcbl07XG4iLCJpbXBvcnQgeyBnZXRGaXJzdE1hdGNoIH0gZnJvbSAnLi91dGlscyc7XG5cbmNvbnN0IFRZUEVTX0xBQkVMUyA9IHtcbiAgdGFibGV0OiAndGFibGV0JyxcbiAgbW9iaWxlOiAnbW9iaWxlJyxcbiAgZGVza3RvcDogJ2Rlc2t0b3AnLFxufTtcblxuLypcbiAqIFRhYmxldHMgZ28gZmlyc3Qgc2luY2UgdXN1YWxseSB0aGV5IGhhdmUgbW9yZSBzcGVjaWZpY1xuICogc2lnbnMgdG8gZGV0ZWN0LlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IFtcbiAgLyogTmV4dXMgVGFibGV0ICovXG4gIHtcbiAgICB0ZXN0OiBbL25leHVzXFxzKig/Ojd8OHw5fDEwKS4qL2ldLFxuICAgIGRlc2NyaWJlKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogVFlQRVNfTEFCRUxTLnRhYmxldCxcbiAgICAgICAgdmVuZG9yOiAnTmV4dXMnLFxuICAgICAgfTtcbiAgICB9LFxuICB9LFxuXG4gIC8qIGlQYWQgKi9cbiAge1xuICAgIHRlc3Q6IFsvaXBhZC9pXSxcbiAgICBkZXNjcmliZSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFRZUEVTX0xBQkVMUy50YWJsZXQsXG4gICAgICAgIHZlbmRvcjogJ0FwcGxlJyxcbiAgICAgICAgbW9kZWw6ICdpUGFkJyxcbiAgICAgIH07XG4gICAgfSxcbiAgfSxcblxuICAvKiBBbWF6b24gS2luZGxlIEZpcmUgKi9cbiAge1xuICAgIHRlc3Q6IFsva2Z0dCBidWlsZC9pXSxcbiAgICBkZXNjcmliZSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFRZUEVTX0xBQkVMUy50YWJsZXQsXG4gICAgICAgIHZlbmRvcjogJ0FtYXpvbicsXG4gICAgICAgIG1vZGVsOiAnS2luZGxlIEZpcmUgSEQgNycsXG4gICAgICB9O1xuICAgIH0sXG4gIH0sXG5cbiAgLyogQW5vdGhlciBBbWF6b24gVGFibGV0IHdpdGggU2lsayAqL1xuICB7XG4gICAgdGVzdDogWy9zaWxrL2ldLFxuICAgIGRlc2NyaWJlKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogVFlQRVNfTEFCRUxTLnRhYmxldCxcbiAgICAgICAgdmVuZG9yOiAnQW1hem9uJyxcbiAgICAgIH07XG4gICAgfSxcbiAgfSxcblxuICAvKiBUYWJsZXQgKi9cbiAge1xuICAgIHRlc3Q6IFsvdGFibGV0L2ldLFxuICAgIGRlc2NyaWJlKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogVFlQRVNfTEFCRUxTLnRhYmxldCxcbiAgICAgIH07XG4gICAgfSxcbiAgfSxcblxuICAvKiBpUG9kL2lQaG9uZSAqL1xuICB7XG4gICAgdGVzdChwYXJzZXIpIHtcbiAgICAgIGNvbnN0IGlEZXZpY2UgPSBwYXJzZXIudGVzdCgvaXBvZHxpcGhvbmUvaSk7XG4gICAgICBjb25zdCBsaWtlSURldmljZSA9IHBhcnNlci50ZXN0KC9saWtlIChpcG9kfGlwaG9uZSkvaSk7XG4gICAgICByZXR1cm4gaURldmljZSAmJiAhbGlrZUlEZXZpY2U7XG4gICAgfSxcbiAgICBkZXNjcmliZSh1YSkge1xuICAgICAgY29uc3QgbW9kZWwgPSBnZXRGaXJzdE1hdGNoKC8oaXBvZHxpcGhvbmUpL2ksIHVhKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFRZUEVTX0xBQkVMUy5tb2JpbGUsXG4gICAgICAgIHZlbmRvcjogJ0FwcGxlJyxcbiAgICAgICAgbW9kZWwsXG4gICAgICB9O1xuICAgIH0sXG4gIH0sXG5cbiAgLyogTmV4dXMgTW9iaWxlICovXG4gIHtcbiAgICB0ZXN0OiBbL25leHVzXFxzKlswLTZdLiovaSwgL2dhbGF4eSBuZXh1cy9pXSxcbiAgICBkZXNjcmliZSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFRZUEVTX0xBQkVMUy5tb2JpbGUsXG4gICAgICAgIHZlbmRvcjogJ05leHVzJyxcbiAgICAgIH07XG4gICAgfSxcbiAgfSxcblxuICAvKiBNb2JpbGUgKi9cbiAge1xuICAgIHRlc3Q6IFsvW14tXW1vYmkvaV0sXG4gICAgZGVzY3JpYmUoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBUWVBFU19MQUJFTFMubW9iaWxlLFxuICAgICAgfTtcbiAgICB9LFxuICB9LFxuXG4gIC8qIEJsYWNrQmVycnkgKi9cbiAge1xuICAgIHRlc3QocGFyc2VyKSB7XG4gICAgICByZXR1cm4gcGFyc2VyLmdldEJyb3dzZXJOYW1lKHRydWUpID09PSAnYmxhY2tiZXJyeSc7XG4gICAgfSxcbiAgICBkZXNjcmliZSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFRZUEVTX0xBQkVMUy5tb2JpbGUsXG4gICAgICAgIHZlbmRvcjogJ0JsYWNrQmVycnknLFxuICAgICAgfTtcbiAgICB9LFxuICB9LFxuXG4gIC8qIEJhZGEgKi9cbiAge1xuICAgIHRlc3QocGFyc2VyKSB7XG4gICAgICByZXR1cm4gcGFyc2VyLmdldEJyb3dzZXJOYW1lKHRydWUpID09PSAnYmFkYSc7XG4gICAgfSxcbiAgICBkZXNjcmliZSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFRZUEVTX0xBQkVMUy5tb2JpbGUsXG4gICAgICB9O1xuICAgIH0sXG4gIH0sXG5cbiAgLyogV2luZG93cyBQaG9uZSAqL1xuICB7XG4gICAgdGVzdChwYXJzZXIpIHtcbiAgICAgIHJldHVybiBwYXJzZXIuZ2V0QnJvd3Nlck5hbWUoKSA9PT0gJ3dpbmRvd3MgcGhvbmUnO1xuICAgIH0sXG4gICAgZGVzY3JpYmUoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBUWVBFU19MQUJFTFMubW9iaWxlLFxuICAgICAgICB2ZW5kb3I6ICdNaWNyb3NvZnQnLFxuICAgICAgfTtcbiAgICB9LFxuICB9LFxuXG4gIC8qIEFuZHJvaWQgVGFibGV0ICovXG4gIHtcbiAgICB0ZXN0KHBhcnNlcikge1xuICAgICAgY29uc3Qgb3NNYWpvclZlcnNpb24gPSBOdW1iZXIoU3RyaW5nKHBhcnNlci5nZXRPU1ZlcnNpb24oKSkuc3BsaXQoJy4nKVswXSk7XG4gICAgICByZXR1cm4gcGFyc2VyLmdldE9TTmFtZSh0cnVlKSA9PT0gJ2FuZHJvaWQnICYmIChvc01ham9yVmVyc2lvbiA+PSAzKTtcbiAgICB9LFxuICAgIGRlc2NyaWJlKCkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogVFlQRVNfTEFCRUxTLnRhYmxldCxcbiAgICAgIH07XG4gICAgfSxcbiAgfSxcblxuICAvKiBBbmRyb2lkIE1vYmlsZSAqL1xuICB7XG4gICAgdGVzdChwYXJzZXIpIHtcbiAgICAgIHJldHVybiBwYXJzZXIuZ2V0T1NOYW1lKHRydWUpID09PSAnYW5kcm9pZCc7XG4gICAgfSxcbiAgICBkZXNjcmliZSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6IFRZUEVTX0xBQkVMUy5tb2JpbGUsXG4gICAgICB9O1xuICAgIH0sXG4gIH0sXG5cbiAgLyogZGVza3RvcCAqL1xuICB7XG4gICAgdGVzdChwYXJzZXIpIHtcbiAgICAgIHJldHVybiBwYXJzZXIuZ2V0T1NOYW1lKHRydWUpID09PSAnbWFjb3MnO1xuICAgIH0sXG4gICAgZGVzY3JpYmUoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBUWVBFU19MQUJFTFMuZGVza3RvcCxcbiAgICAgICAgdmVuZG9yOiAnQXBwbGUnLFxuICAgICAgfTtcbiAgICB9LFxuICB9LFxuXG4gIC8qIFdpbmRvd3MgKi9cbiAge1xuICAgIHRlc3QocGFyc2VyKSB7XG4gICAgICByZXR1cm4gcGFyc2VyLmdldE9TTmFtZSh0cnVlKSA9PT0gJ3dpbmRvd3MnO1xuICAgIH0sXG4gICAgZGVzY3JpYmUoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBUWVBFU19MQUJFTFMuZGVza3RvcCxcbiAgICAgIH07XG4gICAgfSxcbiAgfSxcblxuICAvKiBMaW51eCAqL1xuICB7XG4gICAgdGVzdChwYXJzZXIpIHtcbiAgICAgIHJldHVybiBwYXJzZXIuZ2V0T1NOYW1lKHRydWUpID09PSAnbGludXgnO1xuICAgIH0sXG4gICAgZGVzY3JpYmUoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiBUWVBFU19MQUJFTFMuZGVza3RvcCxcbiAgICAgIH07XG4gICAgfSxcbiAgfSxcbl07XG4iLCJpbXBvcnQgeyBnZXRGaXJzdE1hdGNoIH0gZnJvbSAnLi91dGlscyc7XG5cbi8qXG4gKiBNb3JlIHNwZWNpZmljIGdvZXMgZmlyc3RcbiAqL1xuZXhwb3J0IGRlZmF1bHQgW1xuICAvKiBFZGdlSFRNTCAqL1xuICB7XG4gICAgdGVzdChwYXJzZXIpIHtcbiAgICAgIHJldHVybiBwYXJzZXIuZ2V0QnJvd3Nlck5hbWUodHJ1ZSkgPT09ICdtaWNyb3NvZnQgZWRnZSc7XG4gICAgfSxcbiAgICBkZXNjcmliZSh1YSkge1xuICAgICAgY29uc3QgdmVyc2lvbiA9IGdldEZpcnN0TWF0Y2goL2VkZ2VcXC8oXFxkKyhcXC4/Xz9cXGQrKSspL2ksIHVhKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6ICdFZGdlSFRNTCcsXG4gICAgICAgIHZlcnNpb24sXG4gICAgICB9O1xuICAgIH0sXG4gIH0sXG5cbiAgLyogVHJpZGVudCAqL1xuICB7XG4gICAgdGVzdDogWy90cmlkZW50L2ldLFxuICAgIGRlc2NyaWJlKHVhKSB7XG4gICAgICBjb25zdCBlbmdpbmUgPSB7XG4gICAgICAgIG5hbWU6ICdUcmlkZW50JyxcbiAgICAgIH07XG5cbiAgICAgIGNvbnN0IHZlcnNpb24gPSBnZXRGaXJzdE1hdGNoKC90cmlkZW50XFwvKFxcZCsoXFwuP18/XFxkKykrKS9pLCB1YSk7XG5cbiAgICAgIGlmICh2ZXJzaW9uKSB7XG4gICAgICAgIGVuZ2luZS52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVuZ2luZTtcbiAgICB9LFxuICB9LFxuXG4gIC8qIFByZXN0byAqL1xuICB7XG4gICAgdGVzdChwYXJzZXIpIHtcbiAgICAgIHJldHVybiBwYXJzZXIudGVzdCgvcHJlc3RvL2kpO1xuICAgIH0sXG4gICAgZGVzY3JpYmUodWEpIHtcbiAgICAgIGNvbnN0IGVuZ2luZSA9IHtcbiAgICAgICAgbmFtZTogJ1ByZXN0bycsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCB2ZXJzaW9uID0gZ2V0Rmlyc3RNYXRjaCgvcHJlc3RvXFwvKFxcZCsoXFwuP18/XFxkKykrKS9pLCB1YSk7XG5cbiAgICAgIGlmICh2ZXJzaW9uKSB7XG4gICAgICAgIGVuZ2luZS52ZXJzaW9uID0gdmVyc2lvbjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVuZ2luZTtcbiAgICB9LFxuICB9LFxuXG4gIC8qIEdlY2tvICovXG4gIHtcbiAgICB0ZXN0KHBhcnNlcikge1xuICAgICAgY29uc3QgaXNHZWNrbyA9IHBhcnNlci50ZXN0KC9nZWNrby9pKTtcbiAgICAgIGNvbnN0IGxpa2VHZWNrbyA9IHBhcnNlci50ZXN0KC9saWtlIGdlY2tvL2kpO1xuICAgICAgcmV0dXJuIGlzR2Vja28gJiYgIWxpa2VHZWNrbztcbiAgICB9LFxuICAgIGRlc2NyaWJlKHVhKSB7XG4gICAgICBjb25zdCBlbmdpbmUgPSB7XG4gICAgICAgIG5hbWU6ICdHZWNrbycsXG4gICAgICB9O1xuXG4gICAgICBjb25zdCB2ZXJzaW9uID0gZ2V0Rmlyc3RNYXRjaCgvZ2Vja29cXC8oXFxkKyhcXC4/Xz9cXGQrKSspL2ksIHVhKTtcblxuICAgICAgaWYgKHZlcnNpb24pIHtcbiAgICAgICAgZW5naW5lLnZlcnNpb24gPSB2ZXJzaW9uO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZW5naW5lO1xuICAgIH0sXG4gIH0sXG5cbiAgLyogQmxpbmsgKi9cbiAge1xuICAgIHRlc3Q6IFsvKGFwcGxlKT93ZWJraXRcXC81MzdcXC4zNi9pXSxcbiAgICBkZXNjcmliZSgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIG5hbWU6ICdCbGluaycsXG4gICAgICB9O1xuICAgIH0sXG4gIH0sXG5cbiAgLyogV2ViS2l0ICovXG4gIHtcbiAgICB0ZXN0OiBbLyhhcHBsZSk/d2Via2l0L2ldLFxuICAgIGRlc2NyaWJlKHVhKSB7XG4gICAgICBjb25zdCBlbmdpbmUgPSB7XG4gICAgICAgIG5hbWU6ICdXZWJLaXQnLFxuICAgICAgfTtcblxuICAgICAgY29uc3QgdmVyc2lvbiA9IGdldEZpcnN0TWF0Y2goL3dlYmtpdFxcLyhcXGQrKFxcLj9fP1xcZCspKykvaSwgdWEpO1xuXG4gICAgICBpZiAodmVyc2lvbikge1xuICAgICAgICBlbmdpbmUudmVyc2lvbiA9IHZlcnNpb247XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBlbmdpbmU7XG4gICAgfSxcbiAgfSxcbl07XG4iLCJpbXBvcnQgYnJvd3NlclBhcnNlcnNMaXN0IGZyb20gJy4vcGFyc2VyLWJyb3dzZXJzJztcbmltcG9ydCBvc1BhcnNlcnNMaXN0IGZyb20gJy4vcGFyc2VyLW9zJztcbmltcG9ydCBwbGF0Zm9ybVBhcnNlcnNMaXN0IGZyb20gJy4vcGFyc2VyLXBsYXRmb3Jtcyc7XG5pbXBvcnQgZW5naW5lc1BhcnNlcnNMaXN0IGZyb20gJy4vcGFyc2VyLWVuZ2luZXMnO1xuaW1wb3J0IHsgY29tcGFyZVZlcnNpb25zIH0gZnJvbSAnLi91dGlscyc7XG5cbi8qKlxuICogVGhlIG1haW4gY2xhc3MgdGhhdCBhcnJhbmdlcyB0aGUgd2hvbGUgcGFyc2luZyBwcm9jZXNzLlxuICovXG5jbGFzcyBQYXJzZXIge1xuICAvKipcbiAgICogQ3JlYXRlIGluc3RhbmNlIG9mIFBhcnNlclxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gVUEgVXNlci1BZ2VudCBzdHJpbmdcbiAgICogQHBhcmFtIHtCb29sZWFufSBbc2tpcFBhcnNpbmc9ZmFsc2VdIHBhcnNlciBjYW4gc2tpcCBwYXJzaW5nIGluIHB1cnBvc2Ugb2YgcGVyZm9ybWFuY2VcbiAgICogaW1wcm92ZW1lbnRzIGlmIHlvdSBuZWVkIHRvIG1ha2UgYSBtb3JlIHBhcnRpY3VsYXIgcGFyc2luZ1xuICAgKiBsaWtlIHtAbGluayBQYXJzZXIjcGFyc2VCcm93c2VyfSBvciB7QGxpbmsgUGFyc2VyI3BhcnNlUGxhdGZvcm19XG4gICAqXG4gICAqIEB0aHJvdyB7RXJyb3J9IGluIGNhc2Ugb2YgZW1wdHkgVUEgU3RyaW5nXG4gICAqXG4gICAqIEBjb25zdHJ1Y3RvclxuICAgKi9cbiAgY29uc3RydWN0b3IoVUEsIHNraXBQYXJzaW5nID0gZmFsc2UpIHtcbiAgICBpZiAoVUEgPT09IHZvaWQgKDApIHx8IFVBID09PSBudWxsIHx8IFVBID09PSAnJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiVXNlckFnZW50IHBhcmFtZXRlciBjYW4ndCBiZSBlbXB0eVwiKTtcbiAgICB9XG5cbiAgICB0aGlzLl91YSA9IFVBO1xuXG4gICAgLyoqXG4gICAgICogQHR5cGVkZWYgUGFyc2VkUmVzdWx0XG4gICAgICogQHByb3BlcnR5IHtPYmplY3R9IGJyb3dzZXJcbiAgICAgKiBAcHJvcGVydHkge1N0cmluZ3x1bmRlZmluZWR9IFticm93c2VyLm5hbWVdXG4gICAgICogQnJvd3NlciBuYW1lLCBsaWtlIGBcIkNocm9tZVwiYCBvciBgXCJJbnRlcm5ldCBFeHBsb3JlclwiYFxuICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfHVuZGVmaW5lZH0gW2Jyb3dzZXIudmVyc2lvbl0gQnJvd3NlciB2ZXJzaW9uIGFzIGEgU3RyaW5nIGBcIjEyLjAxLjQ1MzM0LjEwXCJgXG4gICAgICogQHByb3BlcnR5IHtPYmplY3R9IG9zXG4gICAgICogQHByb3BlcnR5IHtTdHJpbmd8dW5kZWZpbmVkfSBbb3MubmFtZV0gT1MgbmFtZSwgbGlrZSBgXCJXaW5kb3dzXCJgIG9yIGBcIm1hY09TXCJgXG4gICAgICogQHByb3BlcnR5IHtTdHJpbmd8dW5kZWZpbmVkfSBbb3MudmVyc2lvbl0gT1MgdmVyc2lvbiwgbGlrZSBgXCJOVCA1LjFcImAgb3IgYFwiMTAuMTEuMVwiYFxuICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfHVuZGVmaW5lZH0gW29zLnZlcnNpb25OYW1lXSBPUyBuYW1lLCBsaWtlIGBcIlhQXCJgIG9yIGBcIkhpZ2ggU2llcnJhXCJgXG4gICAgICogQHByb3BlcnR5IHtPYmplY3R9IHBsYXRmb3JtXG4gICAgICogQHByb3BlcnR5IHtTdHJpbmd8dW5kZWZpbmVkfSBbcGxhdGZvcm0udHlwZV1cbiAgICAgKiBwbGF0Zm9ybSB0eXBlLCBjYW4gYmUgZWl0aGVyIGBcImRlc2t0b3BcImAsIGBcInRhYmxldFwiYCBvciBgXCJtb2JpbGVcImBcbiAgICAgKiBAcHJvcGVydHkge1N0cmluZ3x1bmRlZmluZWR9IFtwbGF0Zm9ybS52ZW5kb3JdIFZlbmRvciBvZiB0aGUgZGV2aWNlLFxuICAgICAqIGxpa2UgYFwiQXBwbGVcImAgb3IgYFwiU2Ftc3VuZ1wiYFxuICAgICAqIEBwcm9wZXJ0eSB7U3RyaW5nfHVuZGVmaW5lZH0gW3BsYXRmb3JtLm1vZGVsXSBEZXZpY2UgbW9kZWwsXG4gICAgICogbGlrZSBgXCJpUGhvbmVcImAgb3IgYFwiS2luZGxlIEZpcmUgSEQgN1wiYFxuICAgICAqIEBwcm9wZXJ0eSB7T2JqZWN0fSBlbmdpbmVcbiAgICAgKiBAcHJvcGVydHkge1N0cmluZ3x1bmRlZmluZWR9IFtlbmdpbmUubmFtZV1cbiAgICAgKiBDYW4gYmUgYW55IG9mIHRoaXM6IGBXZWJLaXRgLCBgQmxpbmtgLCBgR2Vja29gLCBgVHJpZGVudGAsIGBQcmVzdG9gLCBgRWRnZUhUTUxgXG4gICAgICogQHByb3BlcnR5IHtTdHJpbmd8dW5kZWZpbmVkfSBbZW5naW5lLnZlcnNpb25dIFN0cmluZyB2ZXJzaW9uIG9mIHRoZSBlbmdpbmVcbiAgICAgKi9cbiAgICB0aGlzLnBhcnNlZFJlc3VsdCA9IHt9O1xuXG4gICAgaWYgKHNraXBQYXJzaW5nICE9PSB0cnVlKSB7XG4gICAgICB0aGlzLnBhcnNlKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCBVc2VyQWdlbnQgc3RyaW5nIG9mIGN1cnJlbnQgUGFyc2VyIGluc3RhbmNlXG4gICAqIEByZXR1cm4ge1N0cmluZ30gVXNlci1BZ2VudCBTdHJpbmcgb2YgdGhlIGN1cnJlbnQgPFBhcnNlcj4gb2JqZWN0XG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGdldFVBKCkge1xuICAgIHJldHVybiB0aGlzLl91YTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUZXN0IGEgVUEgc3RyaW5nIGZvciBhIHJlZ2V4cFxuICAgKiBAcGFyYW0ge1JlZ0V4cH0gcmVnZXhcbiAgICogQHJldHVybiB7Qm9vbGVhbn1cbiAgICovXG4gIHRlc3QocmVnZXgpIHtcbiAgICByZXR1cm4gcmVnZXgudGVzdCh0aGlzLl91YSk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHBhcnNlZCBicm93c2VyIG9iamVjdFxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqL1xuICBwYXJzZUJyb3dzZXIoKSB7XG4gICAgdGhpcy5wYXJzZWRSZXN1bHQuYnJvd3NlciA9IHt9O1xuXG4gICAgY29uc3QgYnJvd3NlckRlc2NyaXB0b3IgPSBicm93c2VyUGFyc2Vyc0xpc3QuZmluZCgoX2Jyb3dzZXIpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgX2Jyb3dzZXIudGVzdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gX2Jyb3dzZXIudGVzdCh0aGlzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKF9icm93c2VyLnRlc3QgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICByZXR1cm4gX2Jyb3dzZXIudGVzdC5zb21lKGNvbmRpdGlvbiA9PiB0aGlzLnRlc3QoY29uZGl0aW9uKSk7XG4gICAgICB9XG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkJyb3dzZXIncyB0ZXN0IGZ1bmN0aW9uIGlzIG5vdCB2YWxpZFwiKTtcbiAgICB9KTtcblxuICAgIGlmIChicm93c2VyRGVzY3JpcHRvcikge1xuICAgICAgdGhpcy5wYXJzZWRSZXN1bHQuYnJvd3NlciA9IGJyb3dzZXJEZXNjcmlwdG9yLmRlc2NyaWJlKHRoaXMuZ2V0VUEoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucGFyc2VkUmVzdWx0LmJyb3dzZXI7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHBhcnNlZCBicm93c2VyIG9iamVjdFxuICAgKiBAcmV0dXJuIHtPYmplY3R9XG4gICAqXG4gICAqIEBwdWJsaWNcbiAgICovXG4gIGdldEJyb3dzZXIoKSB7XG4gICAgaWYgKHRoaXMucGFyc2VkUmVzdWx0LmJyb3dzZXIpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhcnNlZFJlc3VsdC5icm93c2VyO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnBhcnNlQnJvd3NlcigpO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBicm93c2VyJ3MgbmFtZVxuICAgKiBAcmV0dXJuIHtTdHJpbmd9IEJyb3dzZXIncyBuYW1lIG9yIGFuIGVtcHR5IHN0cmluZ1xuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBnZXRCcm93c2VyTmFtZSh0b0xvd2VyQ2FzZSkge1xuICAgIGlmICh0b0xvd2VyQ2FzZSkge1xuICAgICAgcmV0dXJuIFN0cmluZyh0aGlzLmdldEJyb3dzZXIoKS5uYW1lKS50b0xvd2VyQ2FzZSgpIHx8ICcnO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5nZXRCcm93c2VyKCkubmFtZSB8fCAnJztcbiAgfVxuXG5cbiAgLyoqXG4gICAqIEdldCBicm93c2VyJ3MgdmVyc2lvblxuICAgKiBAcmV0dXJuIHtTdHJpbmd9IHZlcnNpb24gb2YgYnJvd3NlclxuICAgKlxuICAgKiBAcHVibGljXG4gICAqL1xuICBnZXRCcm93c2VyVmVyc2lvbigpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRCcm93c2VyKCkudmVyc2lvbjtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgT1NcbiAgICogQHJldHVybiB7T2JqZWN0fVxuICAgKlxuICAgKiBAZXhhbXBsZVxuICAgKiB0aGlzLmdldE9TKCk7XG4gICAqIHtcbiAgICogICBuYW1lOiAnbWFjT1MnLFxuICAgKiAgIHZlcnNpb246ICcxMC4xMS4xMidcbiAgICogfVxuICAgKi9cbiAgZ2V0T1MoKSB7XG4gICAgaWYgKHRoaXMucGFyc2VkUmVzdWx0Lm9zKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXJzZWRSZXN1bHQub3M7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucGFyc2VPUygpO1xuICB9XG5cbiAgLyoqXG4gICAqIFBhcnNlIE9TIGFuZCBzYXZlIGl0IHRvIHRoaXMucGFyc2VkUmVzdWx0Lm9zXG4gICAqIEByZXR1cm4geyp8e319XG4gICAqL1xuICBwYXJzZU9TKCkge1xuICAgIHRoaXMucGFyc2VkUmVzdWx0Lm9zID0ge307XG5cbiAgICBjb25zdCBvcyA9IG9zUGFyc2Vyc0xpc3QuZmluZCgoX29zKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIF9vcy50ZXN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBfb3MudGVzdCh0aGlzKTtcbiAgICAgIH1cblxuICAgICAgaWYgKF9vcy50ZXN0IGluc3RhbmNlb2YgQXJyYXkpIHtcbiAgICAgICAgcmV0dXJuIF9vcy50ZXN0LnNvbWUoY29uZGl0aW9uID0+IHRoaXMudGVzdChjb25kaXRpb24pKTtcbiAgICAgIH1cblxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQnJvd3NlcidzIHRlc3QgZnVuY3Rpb24gaXMgbm90IHZhbGlkXCIpO1xuICAgIH0pO1xuXG4gICAgaWYgKG9zKSB7XG4gICAgICB0aGlzLnBhcnNlZFJlc3VsdC5vcyA9IG9zLmRlc2NyaWJlKHRoaXMuZ2V0VUEoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucGFyc2VkUmVzdWx0Lm9zO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBPUyBuYW1lXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW3RvTG93ZXJDYXNlXSByZXR1cm4gbG93ZXItY2FzZWQgdmFsdWVcbiAgICogQHJldHVybiB7U3RyaW5nfSBuYW1lIG9mIHRoZSBPUyDigJQgbWFjT1MsIFdpbmRvd3MsIExpbnV4LCBldGMuXG4gICAqL1xuICBnZXRPU05hbWUodG9Mb3dlckNhc2UpIHtcbiAgICBjb25zdCB7IG5hbWUgfSA9IHRoaXMuZ2V0T1MoKTtcblxuICAgIGlmICh0b0xvd2VyQ2FzZSkge1xuICAgICAgcmV0dXJuIFN0cmluZyhuYW1lKS50b0xvd2VyQ2FzZSgpIHx8ICcnO1xuICAgIH1cblxuICAgIHJldHVybiBuYW1lIHx8ICcnO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBPUyB2ZXJzaW9uXG4gICAqIEByZXR1cm4ge1N0cmluZ30gZnVsbCB2ZXJzaW9uIHdpdGggZG90cyAoJzEwLjExLjEyJywgJzUuNicsIGV0YylcbiAgICovXG4gIGdldE9TVmVyc2lvbigpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRPUygpLnZlcnNpb247XG4gIH1cblxuICAvKipcbiAgICogR2V0IHBhcnNlZCBwbGF0Zm9ybVxuICAgKiBAcmV0dXJuIHt7fX1cbiAgICovXG4gIGdldFBsYXRmb3JtKCkge1xuICAgIGlmICh0aGlzLnBhcnNlZFJlc3VsdC5wbGF0Zm9ybSkge1xuICAgICAgcmV0dXJuIHRoaXMucGFyc2VkUmVzdWx0LnBsYXRmb3JtO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnBhcnNlUGxhdGZvcm0oKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgcGxhdGZvcm0gbmFtZVxuICAgKiBAcGFyYW0ge0Jvb2xlYW59IFt0b0xvd2VyQ2FzZT1mYWxzZV1cbiAgICogQHJldHVybiB7Kn1cbiAgICovXG4gIGdldFBsYXRmb3JtVHlwZSh0b0xvd2VyQ2FzZSA9IGZhbHNlKSB7XG4gICAgY29uc3QgeyB0eXBlIH0gPSB0aGlzLmdldFBsYXRmb3JtKCk7XG5cbiAgICBpZiAodG9Mb3dlckNhc2UpIHtcbiAgICAgIHJldHVybiBTdHJpbmcodHlwZSkudG9Mb3dlckNhc2UoKSB8fCAnJztcbiAgICB9XG5cbiAgICByZXR1cm4gdHlwZSB8fCAnJztcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgcGFyc2VkIHBsYXRmb3JtXG4gICAqIEByZXR1cm4ge3t9fVxuICAgKi9cbiAgcGFyc2VQbGF0Zm9ybSgpIHtcbiAgICB0aGlzLnBhcnNlZFJlc3VsdC5wbGF0Zm9ybSA9IHt9O1xuXG4gICAgY29uc3QgcGxhdGZvcm0gPSBwbGF0Zm9ybVBhcnNlcnNMaXN0LmZpbmQoKF9wbGF0Zm9ybSkgPT4ge1xuICAgICAgaWYgKHR5cGVvZiBfcGxhdGZvcm0udGVzdCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICByZXR1cm4gX3BsYXRmb3JtLnRlc3QodGhpcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChfcGxhdGZvcm0udGVzdCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgIHJldHVybiBfcGxhdGZvcm0udGVzdC5zb21lKGNvbmRpdGlvbiA9PiB0aGlzLnRlc3QoY29uZGl0aW9uKSk7XG4gICAgICB9XG5cbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkJyb3dzZXIncyB0ZXN0IGZ1bmN0aW9uIGlzIG5vdCB2YWxpZFwiKTtcbiAgICB9KTtcblxuICAgIGlmIChwbGF0Zm9ybSkge1xuICAgICAgdGhpcy5wYXJzZWRSZXN1bHQucGxhdGZvcm0gPSBwbGF0Zm9ybS5kZXNjcmliZSh0aGlzLmdldFVBKCkpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnBhcnNlZFJlc3VsdC5wbGF0Zm9ybTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZXQgcGFyc2VkIGVuZ2luZVxuICAgKiBAcmV0dXJuIHt7fX1cbiAgICovXG4gIGdldEVuZ2luZSgpIHtcbiAgICBpZiAodGhpcy5wYXJzZWRSZXN1bHQuZW5naW5lKSB7XG4gICAgICByZXR1cm4gdGhpcy5wYXJzZWRSZXN1bHQuZW5naW5lO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnBhcnNlRW5naW5lKCk7XG4gIH1cblxuICAvKipcbiAgICogR2V0IHBhcnNlZCBwbGF0Zm9ybVxuICAgKiBAcmV0dXJuIHt7fX1cbiAgICovXG4gIHBhcnNlRW5naW5lKCkge1xuICAgIHRoaXMucGFyc2VkUmVzdWx0LmVuZ2luZSA9IHt9O1xuXG4gICAgY29uc3QgZW5naW5lID0gZW5naW5lc1BhcnNlcnNMaXN0LmZpbmQoKF9lbmdpbmUpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgX2VuZ2luZS50ZXN0ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHJldHVybiBfZW5naW5lLnRlc3QodGhpcyk7XG4gICAgICB9XG5cbiAgICAgIGlmIChfZW5naW5lLnRlc3QgaW5zdGFuY2VvZiBBcnJheSkge1xuICAgICAgICByZXR1cm4gX2VuZ2luZS50ZXN0LnNvbWUoY29uZGl0aW9uID0+IHRoaXMudGVzdChjb25kaXRpb24pKTtcbiAgICAgIH1cblxuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiQnJvd3NlcidzIHRlc3QgZnVuY3Rpb24gaXMgbm90IHZhbGlkXCIpO1xuICAgIH0pO1xuXG4gICAgaWYgKGVuZ2luZSkge1xuICAgICAgdGhpcy5wYXJzZWRSZXN1bHQuZW5naW5lID0gZW5naW5lLmRlc2NyaWJlKHRoaXMuZ2V0VUEoKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMucGFyc2VkUmVzdWx0LmVuZ2luZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSBmdWxsIGluZm9ybWF0aW9uIGFib3V0IHRoZSBicm93c2VyXG4gICAqL1xuICBwYXJzZSgpIHtcbiAgICB0aGlzLnBhcnNlQnJvd3NlcigpO1xuICAgIHRoaXMucGFyc2VPUygpO1xuICAgIHRoaXMucGFyc2VQbGF0Zm9ybSgpO1xuICAgIHRoaXMucGFyc2VFbmdpbmUoKTtcblxuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIEdldCBwYXJzZWQgcmVzdWx0XG4gICAqIEByZXR1cm4ge1BhcnNlZFJlc3VsdH1cbiAgICovXG4gIGdldFJlc3VsdCgpIHtcbiAgICAvKiBUT0RPOiBNYWtlIHRoaXMgZnVuY3Rpb24gcHVyZSwgcmV0dXJuIGEgbmV3IG9iamVjdCBpbnN0ZWFkIG9mIHRoZSByZWZlcmVuY2UgKi9cbiAgICByZXR1cm4gdGhpcy5wYXJzZWRSZXN1bHQ7XG4gIH1cblxuICAvKipcbiAgICogQ2hlY2sgaWYgcGFyc2VkIGJyb3dzZXIgbWF0Y2hlcyBjZXJ0YWluIGNvbmRpdGlvbnNcbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGNoZWNrVHJlZSBJdCdzIG9uZSBvciB0d28gbGF5ZXJlZCBvYmplY3QsXG4gICAqIHdoaWNoIGNhbiBpbmNsdWRlIGEgcGxhdGZvcm0gb3IgYW4gT1Mgb24gdGhlIGZpcnN0IGxheWVyXG4gICAqIGFuZCBzaG91bGQgaGF2ZSBicm93c2VycyBzcGVjcyBvbiB0aGUgYm90dG9tLWxheWluZyBsYXllclxuICAgKlxuICAgKiBAcmV0dXJucyB7Qm9vbGVhbnx1bmRlZmluZWR9IFdoZXRoZXIgdGhlIGJyb3dzZXIgc2F0aXNmaWVzIHRoZSBzZXQgY29uZGl0aW9ucyBvciBub3QuXG4gICAqIFJldHVybnMgYHVuZGVmaW5lZGAgd2hlbiB0aGUgYnJvd3NlciBpcyBubyBkZXNjcmliZWQgaW4gdGhlIGNoZWNrVHJlZSBvYmplY3QuXG4gICAqXG4gICAqIEBleGFtcGxlXG4gICAqIGNvbnN0IGJyb3dzZXIgPSBuZXcgQm93c2VyKFVBKTtcbiAgICogaWYgKGJyb3dzZXIuY2hlY2soe2Nocm9tZTogJz4xMTguMDEuMTMyMicgfSkpXG4gICAqIC8vIG9yIHdpdGggb3NcbiAgICogaWYgKGJyb3dzZXIuY2hlY2soe3dpbmRvd3M6IHsgY2hyb21lOiAnPjExOC4wMS4xMzIyJyB9IH0pKVxuICAgKiAvLyBvciB3aXRoIHBsYXRmb3Jtc1xuICAgKiBpZiAoYnJvd3Nlci5jaGVjayh7ZGVza3RvcDogeyBjaHJvbWU6ICc+MTE4LjAxLjEzMjInIH0gfSkpXG4gICAqL1xuICBzYXRpc2ZpZXMoY2hlY2tUcmVlKSB7XG4gICAgY29uc3QgcGxhdGZvcm1zQW5kT1NlcyA9IHt9O1xuICAgIGxldCBwbGF0Zm9ybXNBbmRPU0NvdW50ZXIgPSAwO1xuICAgIGNvbnN0IGJyb3dzZXJzID0ge307XG4gICAgbGV0IGJyb3dzZXJzQ291bnRlciA9IDA7XG5cbiAgICBjb25zdCBhbGxEZWZpbml0aW9ucyA9IE9iamVjdC5rZXlzKGNoZWNrVHJlZSk7XG5cbiAgICBhbGxEZWZpbml0aW9ucy5mb3JFYWNoKChrZXkpID0+IHtcbiAgICAgIGNvbnN0IGN1cnJlbnREZWZpbml0aW9uID0gY2hlY2tUcmVlW2tleV07XG4gICAgICBpZiAodHlwZW9mIGN1cnJlbnREZWZpbml0aW9uID09PSAnc3RyaW5nJykge1xuICAgICAgICBicm93c2Vyc1trZXldID0gY3VycmVudERlZmluaXRpb247XG4gICAgICAgIGJyb3dzZXJzQ291bnRlciArPSAxO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgY3VycmVudERlZmluaXRpb24gPT09ICdvYmplY3QnKSB7XG4gICAgICAgIHBsYXRmb3Jtc0FuZE9TZXNba2V5XSA9IGN1cnJlbnREZWZpbml0aW9uO1xuICAgICAgICBwbGF0Zm9ybXNBbmRPU0NvdW50ZXIgKz0gMTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGlmIChwbGF0Zm9ybXNBbmRPU0NvdW50ZXIgPiAwKSB7XG4gICAgICBjb25zdCBwbGF0Zm9ybXNBbmRPU05hbWVzID0gT2JqZWN0LmtleXMocGxhdGZvcm1zQW5kT1Nlcyk7XG4gICAgICBjb25zdCBPU01hdGNoaW5nRGVmaW5pdGlvbiA9IHBsYXRmb3Jtc0FuZE9TTmFtZXMuZmluZChuYW1lID0+ICh0aGlzLmlzT1MobmFtZSkpKTtcblxuICAgICAgaWYgKE9TTWF0Y2hpbmdEZWZpbml0aW9uKSB7XG4gICAgICAgIGNvbnN0IG9zUmVzdWx0ID0gdGhpcy5zYXRpc2ZpZXMocGxhdGZvcm1zQW5kT1Nlc1tPU01hdGNoaW5nRGVmaW5pdGlvbl0pO1xuXG4gICAgICAgIGlmIChvc1Jlc3VsdCAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgcmV0dXJuIG9zUmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IHBsYXRmb3JtTWF0Y2hpbmdEZWZpbml0aW9uID0gcGxhdGZvcm1zQW5kT1NOYW1lcy5maW5kKG5hbWUgPT4gKHRoaXMuaXNQbGF0Zm9ybShuYW1lKSkpO1xuICAgICAgaWYgKHBsYXRmb3JtTWF0Y2hpbmdEZWZpbml0aW9uKSB7XG4gICAgICAgIGNvbnN0IHBsYXRmb3JtUmVzdWx0ID0gdGhpcy5zYXRpc2ZpZXMocGxhdGZvcm1zQW5kT1Nlc1twbGF0Zm9ybU1hdGNoaW5nRGVmaW5pdGlvbl0pO1xuXG4gICAgICAgIGlmIChwbGF0Zm9ybVJlc3VsdCAhPT0gdm9pZCAwKSB7XG4gICAgICAgICAgcmV0dXJuIHBsYXRmb3JtUmVzdWx0O1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGJyb3dzZXJzQ291bnRlciA+IDApIHtcbiAgICAgIGNvbnN0IGJyb3dzZXJOYW1lcyA9IE9iamVjdC5rZXlzKGJyb3dzZXJzKTtcbiAgICAgIGNvbnN0IG1hdGNoaW5nRGVmaW5pdGlvbiA9IGJyb3dzZXJOYW1lcy5maW5kKG5hbWUgPT4gKHRoaXMuaXNCcm93c2VyKG5hbWUpKSk7XG5cbiAgICAgIGlmIChtYXRjaGluZ0RlZmluaXRpb24gIT09IHZvaWQgMCkge1xuICAgICAgICByZXR1cm4gdGhpcy5jb21wYXJlVmVyc2lvbihicm93c2Vyc1ttYXRjaGluZ0RlZmluaXRpb25dKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdW5kZWZpbmVkO1xuICB9XG5cbiAgaXNCcm93c2VyKGJyb3dzZXJOYW1lKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0QnJvd3Nlck5hbWUodHJ1ZSkgPT09IFN0cmluZyhicm93c2VyTmFtZSkudG9Mb3dlckNhc2UoKTtcbiAgfVxuXG4gIGNvbXBhcmVWZXJzaW9uKHZlcnNpb24pIHtcbiAgICBsZXQgZXhwZWN0ZWRSZXN1bHQgPSAwO1xuICAgIGxldCBjb21wYXJhYmxlVmVyc2lvbiA9IHZlcnNpb247XG4gICAgbGV0IGlzTG9vc2UgPSBmYWxzZTtcblxuICAgIGNvbnN0IGN1cnJlbnRCcm93c2VyVmVyc2lvbiA9IHRoaXMuZ2V0QnJvd3NlclZlcnNpb24oKTtcblxuICAgIGlmICh0eXBlb2YgY3VycmVudEJyb3dzZXJWZXJzaW9uICE9PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHZvaWQgMDtcbiAgICB9XG5cbiAgICBpZiAodmVyc2lvblswXSA9PT0gJz4nKSB7XG4gICAgICBleHBlY3RlZFJlc3VsdCA9IDE7XG4gICAgICBjb21wYXJhYmxlVmVyc2lvbiA9IHZlcnNpb24uc3Vic3RyKDEpO1xuICAgIH0gZWxzZSBpZiAodmVyc2lvblswXSA9PT0gJzwnKSB7XG4gICAgICBleHBlY3RlZFJlc3VsdCA9IC0xO1xuICAgICAgY29tcGFyYWJsZVZlcnNpb24gPSB2ZXJzaW9uLnN1YnN0cigxKTtcbiAgICB9IGVsc2UgaWYgKHZlcnNpb25bMF0gPT09ICc9Jykge1xuICAgICAgY29tcGFyYWJsZVZlcnNpb24gPSB2ZXJzaW9uLnN1YnN0cigxKTtcbiAgICB9IGVsc2UgaWYgKHZlcnNpb25bMF0gPT09ICd+Jykge1xuICAgICAgaXNMb29zZSA9IHRydWU7XG4gICAgICBjb21wYXJhYmxlVmVyc2lvbiA9IHZlcnNpb24uc3Vic3RyKDEpO1xuICAgIH1cblxuICAgIHJldHVybiBjb21wYXJlVmVyc2lvbnMoY3VycmVudEJyb3dzZXJWZXJzaW9uLCBjb21wYXJhYmxlVmVyc2lvbiwgaXNMb29zZSkgPT09IGV4cGVjdGVkUmVzdWx0O1xuICB9XG5cbiAgaXNPUyhvc05hbWUpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRPU05hbWUodHJ1ZSkgPT09IFN0cmluZyhvc05hbWUpLnRvTG93ZXJDYXNlKCk7XG4gIH1cblxuICBpc1BsYXRmb3JtKHBsYXRmb3JtVHlwZSkge1xuICAgIHJldHVybiB0aGlzLmdldFBsYXRmb3JtVHlwZSh0cnVlKSA9PT0gU3RyaW5nKHBsYXRmb3JtVHlwZSkudG9Mb3dlckNhc2UoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBJcyBhbnl0aGluZz8gQ2hlY2sgaWYgdGhlIGJyb3dzZXIgaXMgY2FsbGVkIFwiYW55dGhpbmdcIixcbiAgICogdGhlIE9TIGNhbGxlZCBcImFueXRoaW5nXCIgb3IgdGhlIHBsYXRmb3JtIGNhbGxlZCBcImFueXRoaW5nXCJcbiAgICogQHBhcmFtIHtTdHJpbmd9IGFueXRoaW5nXG4gICAqIEByZXR1cm5zIHtCb29sZWFufVxuICAgKi9cbiAgaXMoYW55dGhpbmcpIHtcbiAgICByZXR1cm4gdGhpcy5pc0Jyb3dzZXIoYW55dGhpbmcpIHx8IHRoaXMuaXNPUyhhbnl0aGluZykgfHwgdGhpcy5pc1BsYXRmb3JtKGFueXRoaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbnkgb2YgdGhlIGdpdmVuIHZhbHVlcyBzYXRpZmllcyB0aGlzLmlzKGFueXRoaW5nKVxuICAgKiBAcGFyYW0ge1N0cmluZ1tdfSBhbnl0aGluZ3NcbiAgICogQHJldHVybnMge0Jvb2xlYW59XG4gICAqL1xuICBzb21lKGFueXRoaW5ncyA9IFtdKSB7XG4gICAgcmV0dXJuIGFueXRoaW5ncy5zb21lKGFueXRoaW5nID0+IHRoaXMuaXMoYW55dGhpbmcpKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBQYXJzZXI7XG4iLCIvKiFcbiAqIEJvd3NlciAtIGEgYnJvd3NlciBkZXRlY3RvclxuICogaHR0cHM6Ly9naXRodWIuY29tL2xhbmNlZGlrc29uL2Jvd3NlclxuICogTUlUIExpY2Vuc2UgfCAoYykgRHVzdGluIERpYXogMjAxMi0yMDE1XG4gKiBNSVQgTGljZW5zZSB8IChjKSBEZW5pcyBEZW1jaGVua28gMjAxNS0yMDE3XG4gKi9cbmltcG9ydCBQYXJzZXIgZnJvbSAnLi9wYXJzZXInO1xuXG4vKipcbiAqIEJvd3NlciBjbGFzcy5cbiAqIEtlZXAgaXQgc2ltcGxlIGFzIG11Y2ggYXMgaXQgY2FuIGJlLlxuICogSXQncyBzdXBwb3NlZCB0byB3b3JrIHdpdGggY29sbGVjdGlvbnMgb2Yge0BsaW5rIFBhcnNlcn0gaW5zdGFuY2VzXG4gKiByYXRoZXIgdGhlbiBzb2x2ZSBvbmUtaW5zdGFuY2UgcHJvYmxlbXMuXG4gKiBBbGwgdGhlIG9uZS1pbnN0YW5jZSBzdHVmZiBpcyBsb2NhdGVkIGluIFBhcnNlciBjbGFzcy5cbiAqL1xuY2xhc3MgQm93c2VyIHtcbiAgLyoqXG4gICAqIENyZWF0ZXMgYSB7QGxpbmsgbW9kdWxlOnBhcnNlcjpQYXJzZXJ9IGluc3RhbmNlXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBVQSBVc2VyQWdlbnQgc3RyaW5nXG4gICAqIEBwYXJhbSB7Qm9vbGVhbn0gW3NraXBQYXJzaW5nPWZhbHNlXSBzYW1lIGFzIHNraXBQYXJzaW5nIGZvciB7QGxpbmsgUGFyc2VyfVxuICAgKiBAcmV0dXJucyB7UGFyc2VyfVxuICAgKiBAdGhyb3dzIHtFcnJvcn0gd2hlbiBVQSBpcyBub3QgYSBTdHJpbmdcbiAgICpcbiAgICogQGV4YW1wbGVcbiAgICogY29uc3QgYm93c2VyID0gbmV3IEJvd3Nlcih3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudCk7XG4gICAqIGJvd3Nlci5nZXRSZXN1bHQoKVxuICAgKi9cbiAgc3RhdGljIGdldFBhcnNlcihVQSwgc2tpcFBhcnNpbmcgPSBmYWxzZSkge1xuICAgIGlmICh0eXBlb2YgVUEgIT09ICdzdHJpbmcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1VzZXJBZ2VudCBzaG91bGQgYmUgYSBzdHJpbmcnKTtcbiAgICB9XG4gICAgcmV0dXJuIG5ldyBQYXJzZXIoVUEsIHNraXBQYXJzaW5nKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEge0BsaW5rIFBhcnNlcn0gaW5zdGFuY2UgYW5kIHJ1bnMge0BsaW5rIFBhcnNlci5nZXRSZXN1bHR9IGltbWVkaWF0ZWx5XG4gICAqXG4gICAqIEBwYXJhbSBVQVxuICAgKiBAcmV0dXJuIHtQYXJzZWRSZXN1bHR9XG4gICAqL1xuICBzdGF0aWMgcGFyc2UoVUEpIHtcbiAgICByZXR1cm4gKG5ldyBQYXJzZXIoVUEpKS5nZXRSZXN1bHQoKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBCb3dzZXI7XG4iLCJmdW5jdGlvbiBfdHlwZW9mMihvYmopIHsgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9OyB9IGVsc2UgeyBfdHlwZW9mMiA9IGZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTsgfSByZXR1cm4gX3R5cGVvZjIob2JqKTsgfVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIF90eXBlb2YyKFN5bWJvbC5pdGVyYXRvcikgPT09IFwic3ltYm9sXCIpIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIF90eXBlb2YyKG9iaik7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBtb2R1bGUuZXhwb3J0cyA9IF90eXBlb2YgPSBmdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IF90eXBlb2YyKG9iaik7XG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiBfdHlwZW9mKG9iaik7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3R5cGVvZjsiLCJmdW5jdGlvbiBfYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpIHtcbiAgaWYgKHNlbGYgPT09IHZvaWQgMCkge1xuICAgIHRocm93IG5ldyBSZWZlcmVuY2VFcnJvcihcInRoaXMgaGFzbid0IGJlZW4gaW5pdGlhbGlzZWQgLSBzdXBlcigpIGhhc24ndCBiZWVuIGNhbGxlZFwiKTtcbiAgfVxuXG4gIHJldHVybiBzZWxmO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9hc3NlcnRUaGlzSW5pdGlhbGl6ZWQ7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2V4dGVuZHMoKSB7XG4gIF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7XG4gICAgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07XG5cbiAgICAgIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHtcbiAgICAgICAgICB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHRhcmdldDtcbiAgfTtcblxuICByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbn0iLCJ2YXIgb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSA9IHJlcXVpcmUoXCIuL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2VcIik7XG5cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7XG4gIGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9O1xuICB2YXIgdGFyZ2V0ID0gb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTtcbiAgdmFyIGtleSwgaTtcblxuICBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykge1xuICAgIHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07XG4gICAgICBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlO1xuICAgICAgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTtcbiAgICAgIHRhcmdldFtrZXldID0gc291cmNlW2tleV07XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXM7IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX2luaGVyaXRzTG9vc2Uoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpIHtcbiAgc3ViQ2xhc3MucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckNsYXNzLnByb3RvdHlwZSk7XG4gIHN1YkNsYXNzLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IHN1YkNsYXNzO1xuICBzdWJDbGFzcy5fX3Byb3RvX18gPSBzdXBlckNsYXNzO1xufSJdLCJzb3VyY2VSb290IjoiIn0=